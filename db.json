{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"node_modules/hexo-theme-ayer/source/404.html","path":"404.html","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/css/clipboard.styl","path":"css/clipboard.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/css/custom.styl","path":"css/custom.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/dist/main.css","path":"dist/main.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/dist/report.html","path":"dist/report.html","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/dist/main.js","path":"dist/main.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/js/busuanzi-2.3.pure.min.js","path":"js/busuanzi-2.3.pure.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/js/clickBoom1.js","path":"js/clickBoom1.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/js/clickBoom2.js","path":"js/clickBoom2.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/js/clickLove.js","path":"js/clickLove.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/js/dz.js","path":"js/dz.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/js/jquery-2.0.3.min.js","path":"js/jquery-2.0.3.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/js/lazyload.min.js","path":"js/lazyload.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/js/tocbot.min.js","path":"js/tocbot.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/404.jpg","path":"images/404.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/alipay.jpg","path":"images/alipay.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/ayer-side.svg","path":"images/ayer-side.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/ayer.png","path":"images/ayer.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/ayer.svg","path":"images/ayer.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/cover1.jpg","path":"images/cover1.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/cover2.jpg","path":"images/cover2.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/beian.png","path":"images/beian.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/cover3.jpg","path":"images/cover3.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/cover6.jpg","path":"images/cover6.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/cover5.jpg","path":"images/cover5.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/cover4.jpg","path":"images/cover4.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/cover7.jpg","path":"images/cover7.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/forkme.png","path":"images/forkme.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/mouse.cur","path":"images/mouse.cur","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/sponsor.jpg","path":"images/sponsor.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/wechat.jpg","path":"images/wechat.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"200ae2fafeb09d9155b573a60c8a9b4e97153b51","modified":1656487389381},{"_id":"source/categories/index.md","hash":"ed0327e53dd3df3354300d9411e13eea18bed86e","modified":1656394226000},{"_id":"source/aboutme/index.md","hash":"1269d73a4fa9b8a6d0736e75016c067f4d50018a","modified":1656485971336},{"_id":"source/_posts/hello-world.md","hash":"acad91ace80b80295b11a9b7ad4c29a2dcfdd8fb","modified":1656395004000},{"_id":"source/tags/index.md","hash":"d7b41b1bd5cfc4255b6d2ee7db8fe5d5f0b6aca3","modified":1656394226000},{"_id":"source/_posts/Markdown测试.md","hash":"41df1dbc809ec605f222cdd611f72fa51e32a3e9","modified":1656394226000},{"_id":"source/_posts/Ayer中文说明.md","hash":"c390ff1d5e7054d8068876aa8eb841242fd8a9b8","modified":1656394226000},{"_id":"source/_posts/多线程.md","hash":"2ea925794923ef4d93a250d38c29ad487dd3b566","modified":1656485303606},{"_id":"source/friends/index.md","hash":"06df0298dcc6aba936d4a936e292236883f34f64","modified":1656394226000},{"_id":"source/events/index.md","hash":"0d607e036af58cdf742990dff936246074adead4","modified":1656487302974},{"_id":"source/_posts/智能车竞赛获得全国一等奖.md","hash":"bf187beda792ce7f6b511edb7e105747dc323eab","modified":1656394226000},{"_id":"node_modules/hexo-theme-ayer/.gitattributes","hash":"2e08e93c6f6790b02ab7f81a6191ed097b20cbf9","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/.travis.yml","hash":"3e7e1618cc72c269e5fdc28e97cafb8b7b90ccd9","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/.postcssrc","hash":"c171a60205840e3dcd3825d5bbb6b2d19d48ee76","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/index.js","hash":"a144d64baec7130267f64272fb256a9be3aa7cd5","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/.stylintrc","hash":"eec4e824067be1a223745ca426aa367c8d482673","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/LICENSE","hash":"d7308ddbd63bf372429401e188a906c52622f62e","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/languages/de.yml","hash":"7b516d228f6175a079e260f1d5eb105644bacd15","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/logo.png","hash":"16fbb131601570b21890a922cd6e596691ccff42","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/README.md","hash":"f796204bb2ac2065b35ab9e0e1937f3cbd4a6d30","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/languages/en.yml","hash":"44e16cb5f43b5e17521a052d36fb7f66faf80c95","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/languages/default.yml","hash":"44e16cb5f43b5e17521a052d36fb7f66faf80c95","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/move_config.js","hash":"9fde64d58714990bf93ba877bbc3b48f6b8fb7d9","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/languages/es.yml","hash":"7d44c39c9ab9c6f0b2e592e9f02a0b6b1b35daa8","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/languages/fr.yml","hash":"deb03585d492faac20c360b3d96a1a7331dc0f78","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/package.json","hash":"41aea0d7b9439d9d77498e8bf2ab423a73c441ee","modified":1614490654000},{"_id":"node_modules/hexo-theme-ayer/languages/ja.yml","hash":"e6849a6c716b588bb17e19f72a61965c74570421","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/languages/ko.yml","hash":"6d645ed779b8427e5bb5c87c5989f3013c613baf","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/languages/no.yml","hash":"2faf5999099765bd662d0979e35e0d43d06bd63c","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/languages/ru.yml","hash":"22f2e2310d7025b03950f450865a6c3ae66fe677","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/languages/pt.yml","hash":"8ec0eacefc2ca124bafc86fe4fb23bd2b9cad8ab","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/languages/zh-TW.yml","hash":"68ddd866f1e74515cfe92faa5a37a067d9308142","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/languages/nl.yml","hash":"86518a4aa58bdbd57361eb2340b2d5e9a684a035","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/languages/zh-CN.yml","hash":"14d1fa64b52a252e2ed54a682c5d47b128780dcd","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/categories.ejs","hash":"b2deae0c31dd7fbf42a124db1b4c8c28d435c8e5","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/index.ejs","hash":"c40a98c0a6f55c27959e44c9e8e4f2619fc2ad3f","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/layout.ejs","hash":"cf0c7d69d68c747379ad7e775a57c9c64a2edd9a","modified":1615014290000},{"_id":"node_modules/hexo-theme-ayer/layout/friends.ejs","hash":"2a4c0bfdf189ebae720f1325786a87c7cac51d37","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/page.ejs","hash":"75879224e47b3329d7accfc2403580a2412dce25","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/languages/vi.yml","hash":"768ed9dc0161990dcdfdc4054ec281dda4d7a33e","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/plain-page.ejs","hash":"d351ff4aadd020a1960cc00f17fdd91a17e0cc54","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/main.js","hash":"e42992bf24b2864e33ea5fdfab122b5d41851066","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/scripts/default_config.js","hash":"617c2614d8bd8ffda2f2f84ab54fb18866e39b33","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/tags.ejs","hash":"e7c9f93c6f7041a7d2aa95e85cc131b22aa426b7","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/post.ejs","hash":"75879224e47b3329d7accfc2403580a2412dce25","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/ads.ejs","hash":"2be035aeef82265c5b0cb6aec6f4135ad1e0aa75","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/favicon.ico","hash":"473ba682e828a7e34f24fae320e77b6bed4260c7","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/404.html","hash":"b1395f87d2b6eaaed6eee6f0673e724e20a439c2","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/archive-post.ejs","hash":"6b3e77cdbf8271c2a22b839608cccaa651f84e93","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/article.ejs","hash":"af6ae47b0cb5028089f72803312356e95309e69b","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/archive.ejs","hash":"1da014dd52294e132bc91eb2f45f67264a41e059","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/after-footer.ejs","hash":"a9865e7262d4a5b5a724685f99db1846a1cbd168","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/baidu-analytics.ejs","hash":"155327c23607f69989b58845f24d842a54e504b8","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/ayer.ejs","hash":"061e5d25789c9a0c3df3172c0c53966053af89d1","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/google-analytics.ejs","hash":"3a23d6ae48305c9f1b5c400da780288c2425254b","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/katex.ejs","hash":"02cb9da065cd315a06d62d13872dc687c62e9a1f","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/scripts/filters/index.js","hash":"e0c3b821ecd1cb614569282fb4f6e6f555545f8b","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/scripts/filters/meta_generator.js","hash":"46f6461a2bdc509837c36ede4d32c8b12e3d49b9","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/broadcast.ejs","hash":"21fadeb390cff713fd432d0565bb901f8caff0c0","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/modal.ejs","hash":"b9caece8b5fb47e250c67f6f80f101f08d04eba9","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/scripts/helpers/ayer-plus-vendors.js","hash":"611f3bcd8220312f92c11fa6a5dad02f011068d2","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/footer.ejs","hash":"16c6877db510a28afff0334be8d2ffe2f76d7a3e","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/mathjax.ejs","hash":"bcc264b6d6b58b3b692139c4d8b1381da4820da8","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/music.ejs","hash":"4a67b36cadf2661a5579a454b7d6e0be34e7a0d4","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/scripts/lib/core.js","hash":"00509e97554914e5b0a20e0843dc90bcf53461aa","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/head.ejs","hash":"d58608ace6070c2ae65672d524a336ce1641ded4","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/scripts/helpers/wordcount.js","hash":"2014b5c5053ad737887b61014a045cc1b08799cd","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/sidebar.ejs","hash":"b7efb7f2b300de23d12ef310d710d809d979f4fd","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/css/custom.styl","hash":"3753c4505761a66faccf736816f053e1e3489982","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/totop.ejs","hash":"b2fc5726168f012bc61845f33a46404ff4065947","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/dist/main.css","hash":"252d84915d54235b3f3780d6b0d81819b1f29151","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/css/clipboard.styl","hash":"145f335d6369744a75c2c39a50f63a88f720f85b","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_extend.styl","hash":"996ed7faa5ebf69af1f14f90f774dc7a53774537","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/viewer.ejs","hash":"219f0a0ec2eb35e8ba27a849639a5f634273fb6f","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_darkmode.styl","hash":"eda0bf55d64f2cdeb75f9489818c34635bc85c00","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/dist/main.js","hash":"68b1b6cd15f6038d757fa280281073128162b5ce","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_normalize.styl","hash":"b90386215434cc76549c046e7f67392049492a6a","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_mixins.styl","hash":"e4804d78ded3714495f8ac9cebdbd2871ed97549","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_remixicon.styl","hash":"78f4dd8c613df005d6ecf6a073d96d38bbbe531e","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/js/busuanzi-2.3.pure.min.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/js/clickBoom1.js","hash":"daac19b1cf7381f1a36deb6ac5a4892e14774887","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/js/clickBoom2.js","hash":"fd61d8aeb2cfeaa0e548ac83a1ee1631979cbdb9","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/js/clickLove.js","hash":"a35dfb7ff19796c005ee30b55fd95e39d6d59a89","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/style.styl","hash":"6106e6f53be4bbc13fe8a69ed6d40052bdeb49f8","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/js/dz.js","hash":"079ae73e2e396c2e00919a50a6fe0d064f99303a","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_variables.styl","hash":"2fdb4425b6213fed28921f53179e825aee0500cf","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/js/lazyload.min.js","hash":"d9bc50752cd7e331dbd0a833386838397c9a079f","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/js/share.js","hash":"e8fd85622f774be877438421c182cd37eb15196e","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/js/ayer.js","hash":"acc2b740765f8fc3b0e8c27f3226cc74b865f127","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/js/search.js","hash":"6d5c093d12e922ad204dab1723b786c35847bf1b","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/js/tocbot.min.js","hash":"bae97e8a24a05a99335f8e725641c8ca9c50502a","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/images/ayer-side.svg","hash":"ad004ce7a873de0f91774f3d5923e010396a07bd","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/images/ayer.png","hash":"0466c05244273f645d239cd27513bfa3c50308aa","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/images/404.jpg","hash":"4f36a8d378712427cded03f5166949f5e0ba754c","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/images/ayer.svg","hash":"379c3307f97c364718a1dbc1e52fb14de12eb11a","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/images/beian.png","hash":"29c400bc3b89f6085766dac4e0330ded5cb73d52","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/images/cover7.jpg","hash":"573bff6899d2d9c5bcba0dc9c60cd1ec9eb8b029","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/category.ejs","hash":"89cb32e8d98bad81d3ef33377212e9b253699d3d","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/images/forkme.png","hash":"99c3e21a169421e4f249befb428396c729863a75","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/albums.ejs","hash":"f4cfbabca9f59a9e5aa457a6f2a9cf6f56cd22b3","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/busuanzi.ejs","hash":"4c7a9191658395bcac45dcd07c165af8773cffa9","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/date.ejs","hash":"947f513f7a85fbcf085624e46dc2ae6de8185eec","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/images/sponsor.jpg","hash":"5b5e4498177b369a7eca7ab2b1d0710b8690e21d","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/justifiedGallery.ejs","hash":"a313df6a014a0f2ba6b869dabc56bacb8ff6324d","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/gallery.ejs","hash":"6f78a49edc91f230b0a838c77630e9671d8d6089","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/clipboard.ejs","hash":"c93d82de1635536a633b6254b604590ab4428594","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/gitalk.ejs","hash":"b8514325f462a99abefa922747312a907dc0140b","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/images/mouse.cur","hash":"c1ffe93a6ba0d25ef06bb3d097560762e4807593","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/search.ejs","hash":"47c818c236b063d6ce0c41e0824f9f10a3521414","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/tag.ejs","hash":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/minivaline.ejs","hash":"bc41af88b2b85f638ab7bd4cf0b227510ccb0108","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/title.ejs","hash":"e55c57b8cb8c8acf0ed998ea31c2fbc1d6256027","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/nav.ejs","hash":"a73010cbbc463089a1376889850fb0890143c988","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/tocbot.ejs","hash":"17ac504f2a6d561765046a0ba19dcce504104517","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/topping.ejs","hash":"de2c50fb5b7a816287c6d048a2a22ae9c29abcdd","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/share.ejs","hash":"9a978d55358878c97186ed010e536e1b314adb35","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/ads.styl","hash":"e3e533ac5b9b6c5ef7d3829c890aff42dc29cfc1","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/twikoo.ejs","hash":"7f064611a2297dda84e6b329252e838666ac7c93","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/valine.ejs","hash":"b71f2af08c1916b3c5ef3a553a1df16f1787af24","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/archive.styl","hash":"9dbb04cf0ae07b50acd6f343e673df215a3c868e","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/albums.styl","hash":"5802253789028a4d9dac474168fc7132045e72ff","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/articles.styl","hash":"ddbe833939180afdc832659c5cdad08f77ef4f46","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/word.ejs","hash":"5b785368a0a6f3b5538aa1b9e7574daa8dfb0df6","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/float.styl","hash":"b1abfdfd05e74745484f7e6d043ef2842b3f6b41","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/ayer.styl","hash":"cfcae3839170f2d04ea504a3cd3d62a9cde6647d","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/article.styl","hash":"c93c96bccfafe568cebbeb14bf577e97cb6e3c64","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/apple.styl","hash":"333f9e59dc6625c4dee126a1c1a9c25ce9292655","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/categories.styl","hash":"cb3b1667c83182d6309e6d066f53f2771723729e","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/footer.styl","hash":"ae22e9d1525f267be368359ed0096f26791b809e","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/gallery.styl","hash":"f5eae1b0030cfd97f1646844c9d3f692dbb38946","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/friends.styl","hash":"10332c63736e4ce31353b7605012caf744a8286a","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/gitalk.styl","hash":"0678e8b330daea56fa30d14e97de73289a7d6f22","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/lists.styl","hash":"dc45f8b1a5942d4d979fb0859bc47a86f73fe0a9","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/navbar.styl","hash":"30d7e1de22185c4b4da33eef66b5eb96f9e5ae98","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/highlight.styl","hash":"1210f704aae34ef653e3a458cccb700b05353ea1","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/mobile.styl","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/justifiedGallery.styl","hash":"9828c78fb59c3ea3de7cce2569313d12c4b1a6ff","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/layout.styl","hash":"d4613f176636cae6a4af6124863a176c32ea6471","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/pace.styl","hash":"bbda18c692fc66ae99e45347ff52c14e44a08e3b","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/reward.styl","hash":"924114f723a22dbb8970d023bc2e033141b3438d","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/sidebar.styl","hash":"cdc7bea47a768b18991decde0d38c554399621ee","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/search.styl","hash":"3f2c7bd1371f6f25aec7c581dbae7b52f95ec4c6","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/share.styl","hash":"4a6e6ac9156553dd5cee1eeee8fdc6f1f8a5d117","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/tocbot.styl","hash":"2135ab02e098ddfaaa60009d8413186a564af840","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/tag.styl","hash":"6072aa6bd16e0a1e75f0258d7b20587cab56fff8","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/totop.styl","hash":"b6010788be1d99a345abcf0cf9cdf0a564b90d3c","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/js/jquery-2.0.3.min.js","hash":"e68550a39c95a6400287b3abd77f40c44f322e50","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/images/cover2.jpg","hash":"f61dd08c95327468c5f6bc5175eff68d00f05b46","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/dist/report.html","hash":"cc78bfe345c800fbabd89cf46f7848c7f3a002fd","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/images/alipay.jpg","hash":"c16625fd1422843f1ba3b0162b460673ec5dfe25","modified":1614485838000},{"_id":"node_modules/hexo-theme-ayer/source/images/cover6.jpg","hash":"a5b8a5dddff2607fee5fccf5fdef3b214a8468cc","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/images/wechat.jpg","hash":"6bfeee0de316c61a63abd1eaf4b37e26ee24eea6","modified":1614485812000},{"_id":"node_modules/hexo-theme-ayer/screenshots/hexo-theme-ayer.png","hash":"4111670e622ce09837b6b9cc641782af75805079","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/images/cover1.jpg","hash":"e019fbed6158ae3e4ec3d255b41bddc1afcbfa90","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/images/cover3.jpg","hash":"7b4e7c9ce19ce5d5c1588b2567e88ecbb04370af","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/images/cover4.jpg","hash":"77040e609d2f1c60e00a8e47cb95b25bf7ff5b9c","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/images/cover5.jpg","hash":"1a2d6182d94b015a45fe4bf8e8a239dfcc0ef776","modified":499162500000},{"_id":"public/baidusitemap.xml","hash":"ace92175146676f24f0e0e396abbcabec584896b","modified":1656487461335},{"_id":"public/sitemap.xml","hash":"2a751c94a0edc516096e8506da845cfa2ce5a1c3","modified":1656487461335},{"_id":"public/categories/index.html","hash":"1e37241d5bc24603b5956cf1439c65fc86c3e5c7","modified":1656487461335},{"_id":"public/tags/index.html","hash":"92b7d9688b97c33d6b1a435e7159b44fdbd3e098","modified":1656487461335},{"_id":"public/events/index.html","hash":"7f674c5a3a258d0fc0491ff2aa5c5e1ff5a48e82","modified":1656487461335},{"_id":"public/friends/index.html","hash":"f078c89501509c685877c54af1829617f0fc8ce0","modified":1656487461335},{"_id":"public/archives/2019/index.html","hash":"f3fd939ab9450abc56e523463b02ed95c84c6d21","modified":1656487461335},{"_id":"public/archives/index.html","hash":"71bdbba17655d6abbbfbab2ecfd6924dc7df82b9","modified":1656487461335},{"_id":"public/archives/2019/09/index.html","hash":"600700a25bacc8454e5cd4c0f155cb697e5b9e9a","modified":1656487461335},{"_id":"public/archives/2019/12/index.html","hash":"58e1468d82dd497e97ea75b2d4973282f2a570df","modified":1656487461335},{"_id":"public/archives/2022/index.html","hash":"e02fed886ad10b1ea996ee36c4fc5df2600f34ce","modified":1656487461335},{"_id":"public/archives/2022/06/index.html","hash":"1070248314fe9e5ead71b853604ed3ff99fb98f3","modified":1656487461335},{"_id":"public/categories/测试/index.html","hash":"cdb5b33c57e4da010ac2d7d3f1817492ed730921","modified":1656487461335},{"_id":"public/categories/技术/index.html","hash":"4ec2c5daf6355812c0f01c69326af316369c6be1","modified":1656487461335},{"_id":"public/categories/比赛/index.html","hash":"2507061956d02abdee13ed5c9717f12b4673ff06","modified":1656487461335},{"_id":"public/tags/测试/index.html","hash":"03df315459524c1d1e67d24e4cdfd60d0e34042c","modified":1656487461335},{"_id":"public/tags/比赛/index.html","hash":"94000bb7c66eff3d2ab48a4166967c20d03b1934","modified":1656487461335},{"_id":"public/tags/技术/index.html","hash":"4ffcd7c0a516b48afdca5a18a7267fa6a8768c98","modified":1656487461335},{"_id":"public/aboutme/index.html","hash":"3dcdffd1be32268b47f631d17bfa91ee8abd4133","modified":1656487461335},{"_id":"public/2022/06/29/多线程/index.html","hash":"507ac218a3b4a1e6097104dacbfc1a2187ad2bbb","modified":1656487461335},{"_id":"public/2022/06/29/hello-world/index.html","hash":"ac1e1a3174cfc7a70e2f3035feb8f5914820929c","modified":1656487461335},{"_id":"public/2019/09/01/智能车竞赛获得全国一等奖/index.html","hash":"d4b57e2fff0dab423e642a5e006d90c99f9b6627","modified":1656487461335},{"_id":"public/2019/12/01/Markdown测试/index.html","hash":"6754dbc9b66480b28169bbb3dfece64dff1d26de","modified":1656487461335},{"_id":"public/index.html","hash":"9aaf8d416d7e8b228456175a89ca1887a80a988d","modified":1656487461335},{"_id":"public/2019/12/03/Ayer中文说明/index.html","hash":"486a2619ee690a5c2a64c4268a5ee41a9b8cadba","modified":1656487461335},{"_id":"public/CNAME","hash":"200ae2fafeb09d9155b573a60c8a9b4e97153b51","modified":1656487461335},{"_id":"public/images/404.jpg","hash":"4f36a8d378712427cded03f5166949f5e0ba754c","modified":1656487461335},{"_id":"public/favicon.ico","hash":"473ba682e828a7e34f24fae320e77b6bed4260c7","modified":1656487461335},{"_id":"public/images/ayer.png","hash":"0466c05244273f645d239cd27513bfa3c50308aa","modified":1656487461335},{"_id":"public/images/ayer-side.svg","hash":"ad004ce7a873de0f91774f3d5923e010396a07bd","modified":1656487461335},{"_id":"public/images/beian.png","hash":"29c400bc3b89f6085766dac4e0330ded5cb73d52","modified":1656487461335},{"_id":"public/images/ayer.svg","hash":"379c3307f97c364718a1dbc1e52fb14de12eb11a","modified":1656487461335},{"_id":"public/images/forkme.png","hash":"99c3e21a169421e4f249befb428396c729863a75","modified":1656487461335},{"_id":"public/images/cover7.jpg","hash":"573bff6899d2d9c5bcba0dc9c60cd1ec9eb8b029","modified":1656487461335},{"_id":"public/images/mouse.cur","hash":"c1ffe93a6ba0d25ef06bb3d097560762e4807593","modified":1656487461335},{"_id":"public/images/sponsor.jpg","hash":"5b5e4498177b369a7eca7ab2b1d0710b8690e21d","modified":1656487461335},{"_id":"public/404.html","hash":"6f7743b6fceb16708c89cde40d66a3fa18f24a1d","modified":1656487461335},{"_id":"public/css/custom.css","hash":"78b13bf5b98278ff65cdb0a731f2a1c98b2324a5","modified":1656487461335},{"_id":"public/css/clipboard.css","hash":"7990b92ffeda1b06b94b50140d9c95dac21bd418","modified":1656487461335},{"_id":"public/dist/main.js","hash":"68b1b6cd15f6038d757fa280281073128162b5ce","modified":1656487461335},{"_id":"public/js/busuanzi-2.3.pure.min.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1656487461335},{"_id":"public/js/clickBoom1.js","hash":"56582907b4c2ece5187b8d64125f91ddabb8a24e","modified":1656487461335},{"_id":"public/js/clickBoom2.js","hash":"bea5232eb8b32542283d9a28257f4b85ce2f3c1b","modified":1656487461335},{"_id":"public/js/dz.js","hash":"079ae73e2e396c2e00919a50a6fe0d064f99303a","modified":1656487461335},{"_id":"public/js/lazyload.min.js","hash":"b801b3946fb9b72e03512c0663458e140e1fa77b","modified":1656487461335},{"_id":"public/js/clickLove.js","hash":"9e8e79d69ad8338761272f86fe5cad0ad5e503cc","modified":1656487461335},{"_id":"public/js/search.js","hash":"118be0e0918532ac1225f62e1a0a6f0673e0b173","modified":1656487461335},{"_id":"public/js/tocbot.min.js","hash":"bae97e8a24a05a99335f8e725641c8ca9c50502a","modified":1656487461335},{"_id":"public/dist/main.css","hash":"252d84915d54235b3f3780d6b0d81819b1f29151","modified":1656487461335},{"_id":"public/dist/report.html","hash":"cc78bfe345c800fbabd89cf46f7848c7f3a002fd","modified":1656487461335},{"_id":"public/js/jquery-2.0.3.min.js","hash":"800edb7787c30f4982bf38f2cb8f4f6fb61340e9","modified":1656487461335},{"_id":"public/images/cover2.jpg","hash":"f61dd08c95327468c5f6bc5175eff68d00f05b46","modified":1656487461335},{"_id":"public/images/alipay.jpg","hash":"c16625fd1422843f1ba3b0162b460673ec5dfe25","modified":1656487461335},{"_id":"public/lib/hbe.js","hash":"136dba00826bdd086153bf0acb5473aea7183ad1","modified":1656487461335},{"_id":"public/css/hbe.style.css","hash":"b0a0077cb588c0941823905fcc383aa7509ade73","modified":1656487461335},{"_id":"public/images/cover6.jpg","hash":"a5b8a5dddff2607fee5fccf5fdef3b214a8468cc","modified":1656487461335},{"_id":"public/images/wechat.jpg","hash":"6bfeee0de316c61a63abd1eaf4b37e26ee24eea6","modified":1656487461335},{"_id":"public/images/cover1.jpg","hash":"e019fbed6158ae3e4ec3d255b41bddc1afcbfa90","modified":1656487461335},{"_id":"public/images/cover3.jpg","hash":"7b4e7c9ce19ce5d5c1588b2567e88ecbb04370af","modified":1656487461335},{"_id":"public/images/cover4.jpg","hash":"77040e609d2f1c60e00a8e47cb95b25bf7ff5b9c","modified":1656487461335},{"_id":"public/images/cover5.jpg","hash":"1a2d6182d94b015a45fe4bf8e8a239dfcc0ef776","modified":1656487461335}],"Category":[{"name":"测试","_id":"cl4z9v5oe00040s7ece4c53ts"},{"name":"技术","_id":"cl4z9v5ok000c0s7efvrxeupz"},{"name":"比赛","_id":"cl4z9v5on000j0s7e5kyq31y3"}],"Data":[],"Page":[{"title":"about","date":"2021-02-28T09:11:40.000Z","_content":"\n> A postdtudent, live in Chongqing, China.\n\n\n姓名：邵雨坤\n现居：重庆\nGitee: [yk](https://ykshao.gitee.io)\nQQ: [1741667279](http://wpa.qq.com/msgrd?v=3&uin=1741667279&site=qq&menu=yes)\n微信: chdz112233\n\n# 学习经历\n2016-2020   重庆大学本科\n2020-至今       重庆大学研究生\n\n\n# 获奖与荣誉\n> 2021年10月  获得重庆大学研究生A等奖学金，校级\n> 2021年6月   申请可重构研讨桌辅助拼接装置专利，已授权，发明专利\n> 2021年3月   获得重庆大学五星团员，校级\n> 2021年1月   获得第二届全国高校创新英语挑战活动英语翻译赛三等奖，国家级\n> 2020年12月  获得重庆大学唐立新奖学金，校级\n> 2020年12月  获得重庆大学研究生基地优秀助管员，校级\n> 2020年10月  获得重庆大学研究生A等奖学金，校级\n> 2020年8月   获得2022年北京冬奥会冬梦大使称号，国家级\n> 2020年7月   国际人因手册《Handbook of Human Factors and Ergonomics》 编写子课题主研人\n> 2020年8月   获得东莞松山湖国际机器人产业基地Xborpark科创训练营优秀营员\n> 2020年7月   获得重庆大学优秀毕业生干部，校级\n> 2020年7月   获得重庆大学丙等综合奖学金，校级\n> 2020年3月   获得重庆大学甲等综合奖学金，校级\n> 2019年12月  获得重庆大学创新创业先进个人，校级\n> 2019年12月  获得机械工程学院先进个人，院级\n> 2019年12月  获得国家励志奖学金，国际级\n> 2019年12月  获得重庆大学甲等综合奖学金，校级\n> 2019年8月   获得全国大学生恩智浦杯智能汽车竞赛一等奖，国家级\n> 2019年7月   获得富士康科技集团重庆园区实习成果二等奖\n> 2019年6月   重庆大学SRTP科研训练计划\"智能制造环境下中小型企业流程管理研究\"结题，校级\n\n\n","source":"aboutme/index.md","raw":"---\ntitle: about\ndate: 2021-02-28 17:11:40\n---\n\n> A postdtudent, live in Chongqing, China.\n\n\n姓名：邵雨坤\n现居：重庆\nGitee: [yk](https://ykshao.gitee.io)\nQQ: [1741667279](http://wpa.qq.com/msgrd?v=3&uin=1741667279&site=qq&menu=yes)\n微信: chdz112233\n\n# 学习经历\n2016-2020   重庆大学本科\n2020-至今       重庆大学研究生\n\n\n# 获奖与荣誉\n> 2021年10月  获得重庆大学研究生A等奖学金，校级\n> 2021年6月   申请可重构研讨桌辅助拼接装置专利，已授权，发明专利\n> 2021年3月   获得重庆大学五星团员，校级\n> 2021年1月   获得第二届全国高校创新英语挑战活动英语翻译赛三等奖，国家级\n> 2020年12月  获得重庆大学唐立新奖学金，校级\n> 2020年12月  获得重庆大学研究生基地优秀助管员，校级\n> 2020年10月  获得重庆大学研究生A等奖学金，校级\n> 2020年8月   获得2022年北京冬奥会冬梦大使称号，国家级\n> 2020年7月   国际人因手册《Handbook of Human Factors and Ergonomics》 编写子课题主研人\n> 2020年8月   获得东莞松山湖国际机器人产业基地Xborpark科创训练营优秀营员\n> 2020年7月   获得重庆大学优秀毕业生干部，校级\n> 2020年7月   获得重庆大学丙等综合奖学金，校级\n> 2020年3月   获得重庆大学甲等综合奖学金，校级\n> 2019年12月  获得重庆大学创新创业先进个人，校级\n> 2019年12月  获得机械工程学院先进个人，院级\n> 2019年12月  获得国家励志奖学金，国际级\n> 2019年12月  获得重庆大学甲等综合奖学金，校级\n> 2019年8月   获得全国大学生恩智浦杯智能汽车竞赛一等奖，国家级\n> 2019年7月   获得富士康科技集团重庆园区实习成果二等奖\n> 2019年6月   重庆大学SRTP科研训练计划\"智能制造环境下中小型企业流程管理研究\"结题，校级\n\n\n","updated":"2022-06-29T06:59:31.336Z","path":"aboutme/index.html","comments":1,"layout":"page","_id":"cl4z9v5o500000s7e3qtqglip","content":"<blockquote>\n<p>A postdtudent, live in Chongqing, China.</p>\n</blockquote>\n<p>姓名：邵雨坤<br>现居：重庆<br>Gitee: <a href=\"https://ykshao.gitee.io/\">yk</a><br>QQ: <a href=\"http://wpa.qq.com/msgrd?v=3&uin=1741667279&site=qq&menu=yes\">1741667279</a><br>微信: chdz112233</p>\n<h1 id=\"学习经历\"><a href=\"#学习经历\" class=\"headerlink\" title=\"学习经历\"></a>学习经历</h1><p>2016-2020   重庆大学本科<br>2020-至今       重庆大学研究生</p>\n<h1 id=\"获奖与荣誉\"><a href=\"#获奖与荣誉\" class=\"headerlink\" title=\"获奖与荣誉\"></a>获奖与荣誉</h1><blockquote>\n<p>2021年10月  获得重庆大学研究生A等奖学金，校级<br>2021年6月   申请可重构研讨桌辅助拼接装置专利，已授权，发明专利<br>2021年3月   获得重庆大学五星团员，校级<br>2021年1月   获得第二届全国高校创新英语挑战活动英语翻译赛三等奖，国家级<br>2020年12月  获得重庆大学唐立新奖学金，校级<br>2020年12月  获得重庆大学研究生基地优秀助管员，校级<br>2020年10月  获得重庆大学研究生A等奖学金，校级<br>2020年8月   获得2022年北京冬奥会冬梦大使称号，国家级<br>2020年7月   国际人因手册《Handbook of Human Factors and Ergonomics》 编写子课题主研人<br>2020年8月   获得东莞松山湖国际机器人产业基地Xborpark科创训练营优秀营员<br>2020年7月   获得重庆大学优秀毕业生干部，校级<br>2020年7月   获得重庆大学丙等综合奖学金，校级<br>2020年3月   获得重庆大学甲等综合奖学金，校级<br>2019年12月  获得重庆大学创新创业先进个人，校级<br>2019年12月  获得机械工程学院先进个人，院级<br>2019年12月  获得国家励志奖学金，国际级<br>2019年12月  获得重庆大学甲等综合奖学金，校级<br>2019年8月   获得全国大学生恩智浦杯智能汽车竞赛一等奖，国家级<br>2019年7月   获得富士康科技集团重庆园区实习成果二等奖<br>2019年6月   重庆大学SRTP科研训练计划”智能制造环境下中小型企业流程管理研究”结题，校级</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>A postdtudent, live in Chongqing, China.</p>\n</blockquote>\n<p>姓名：邵雨坤<br>现居：重庆<br>Gitee: <a href=\"https://ykshao.gitee.io/\">yk</a><br>QQ: <a href=\"http://wpa.qq.com/msgrd?v=3&uin=1741667279&site=qq&menu=yes\">1741667279</a><br>微信: chdz112233</p>\n<h1 id=\"学习经历\"><a href=\"#学习经历\" class=\"headerlink\" title=\"学习经历\"></a>学习经历</h1><p>2016-2020   重庆大学本科<br>2020-至今       重庆大学研究生</p>\n<h1 id=\"获奖与荣誉\"><a href=\"#获奖与荣誉\" class=\"headerlink\" title=\"获奖与荣誉\"></a>获奖与荣誉</h1><blockquote>\n<p>2021年10月  获得重庆大学研究生A等奖学金，校级<br>2021年6月   申请可重构研讨桌辅助拼接装置专利，已授权，发明专利<br>2021年3月   获得重庆大学五星团员，校级<br>2021年1月   获得第二届全国高校创新英语挑战活动英语翻译赛三等奖，国家级<br>2020年12月  获得重庆大学唐立新奖学金，校级<br>2020年12月  获得重庆大学研究生基地优秀助管员，校级<br>2020年10月  获得重庆大学研究生A等奖学金，校级<br>2020年8月   获得2022年北京冬奥会冬梦大使称号，国家级<br>2020年7月   国际人因手册《Handbook of Human Factors and Ergonomics》 编写子课题主研人<br>2020年8月   获得东莞松山湖国际机器人产业基地Xborpark科创训练营优秀营员<br>2020年7月   获得重庆大学优秀毕业生干部，校级<br>2020年7月   获得重庆大学丙等综合奖学金，校级<br>2020年3月   获得重庆大学甲等综合奖学金，校级<br>2019年12月  获得重庆大学创新创业先进个人，校级<br>2019年12月  获得机械工程学院先进个人，院级<br>2019年12月  获得国家励志奖学金，国际级<br>2019年12月  获得重庆大学甲等综合奖学金，校级<br>2019年8月   获得全国大学生恩智浦杯智能汽车竞赛一等奖，国家级<br>2019年7月   获得富士康科技集团重庆园区实习成果二等奖<br>2019年6月   重庆大学SRTP科研训练计划”智能制造环境下中小型企业流程管理研究”结题，校级</p>\n</blockquote>\n"},{"title":"categories","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ntype: \"categories\"\nlayout: \"categories\"\n---","date":"2022-06-29T05:39:22.536Z","updated":"2022-06-28T05:30:26.000Z","path":"categories/index.html","comments":1,"_id":"cl4z9v5ob00020s7eewmmhxav","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ntype: \"tags\"\nlayout: \"tags\"\n---","date":"2022-06-29T05:39:22.565Z","updated":"2022-06-28T05:30:26.000Z","path":"tags/index.html","comments":1,"_id":"cl4z9v5og00060s7e8amd6qca","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"events","date":"2021-02-28T11:34:03.000Z","_content":"\n\n\n\n\n\n","source":"events/index.md","raw":"---\ntitle: events\ndate: 2021-02-28 19:34:03\n---\n\n\n\n\n\n\n","updated":"2022-06-29T07:21:42.974Z","path":"events/index.html","comments":1,"layout":"page","_id":"cl4z9v5oi00080s7eaxfxanwi","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"friends","type":"friends","layout":"friends","_content":"","source":"friends/index.md","raw":"---\ntitle: friends\ntype: friends\nlayout: \"friends\"\n---","date":"2022-06-29T05:39:22.555Z","updated":"2022-06-28T05:30:26.000Z","path":"friends/index.html","comments":1,"_id":"cl4z9v5oj000a0s7e541t1uqr","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Markdown测试","date":"2019-12-01T09:07:11.000Z","_content":"\n# 一级标题\n\n\n---\n\n### 1. 斜体和粗体\n\n使用 * 和 ** 表示斜体和粗体。\n\n示例：\n\n这是 *斜体*，这是 **粗体**。\n\n<!-- more -->\n\n### 2. 分级标题\n\n使用 === 表示一级标题，使用 --- 表示二级标题。\n\n示例：\n\n```\n这是一个一级标题\n============================\n\n这是一个二级标题\n--------------------------------------------------\n\n### 这是一个三级标题\n```\n\n你也可以选择在行首加井号表示不同级别的标题 (H1-H6)，例如：# H1, ## H2, ### H3，#### H4。\n\n### 3. 外链接\n\n使用 \\[描述](链接地址) 为文字增加外链接。\n\n示例：\n\n这是去往 [本人博客](http://Shen-Yu.github.com) 的链接。\n\n![](https://n1-q.mafengwo.net/s15/M00/65/BB/CoUBGV3brtOAMKOdAAsHBZ8nyQk791.jpg?imageMogr2%2Fthumbnail%2F1360x%2Fstrip%2Fquality%2F90)\n\n### 4. 无序列表\n\n使用 *，+，- 表示无序列表。\n\n示例：\n\n- 无序列表项 一\n- 无序列表项 二\n- 无序列表项 三\n\n### 5. 有序列表\n\n使用数字和点表示有序列表。\n\n示例：\n\n1. 有序列表项 一\n2. 有序列表项 二\n3. 有序列表项 三\n\n### 6. 文字引用\n\n使用 > 表示文字引用。\n\n示例：\n\n> 野火烧不尽，春风吹又生。\n\n### 7. 行内代码块\n\n使用 \\`代码` 表示行内代码块。\n\n示例：\n\n让我们聊聊 `html`。\n\n### 8.  代码块\n\n使用 四个缩进空格 表示代码块。\n\n示例：\n\n    这是一个代码块，此行左侧有四个不可见的空格。\n\n### 9.  插入图像\n\n使用 \\!\\[描述](图片链接地址) 插入图像。\n\n示例：\n\n![我的头像](https://www.zybuluo.com/static/img/my_head.jpg)\n\n# Cmd Markdown 高阶语法手册\n\n### 1. 内容目录\n\n在段落中填写 `[TOC]` 以显示全文内容的目录结构。\n\n[TOC]\n\n### 2. 标签分类\n\n在编辑区任意行的列首位置输入以下代码给文稿标签：\n\n标签： 数学 英语 Markdown\n\n或者\n\nTags： 数学 英语 Markdown\n\n### 3. 删除线\n\n使用 ~~ 表示删除线。\n\n~~这是一段错误的文本。~~\n\n### 4. 注脚\n\n使用 [^keyword] 表示注脚。\n\n这是一个注脚[^footnote]的样例。\n\n这是第二个注脚[^footnote2]的样例。\n\n### 5. LaTeX 公式\n\n$ 表示行内公式： \n\n质能守恒方程可以用一个很简洁的方程式 $E=mc^2$ 来表达。\n\n$$ 表示整行公式：\n\n$$\\sum_{i=1}^n a_i=0$$\n\n$$f(x_1,x_x,\\ldots,x_n) = x_1^2 + x_2^2 + \\cdots + x_n^2 $$\n\n$$\\sum^{j-1}_{k=0}{\\widehat{\\gamma}_{kj} z_k}$$\n\n访问 [MathJax](http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference) 参考更多使用方法。\n\n### 6. 加强的代码块\n\n支持四十一种编程语言的语法高亮的显示，行号显示。\n\n非代码示例：\n\n```\n$ sudo apt-get install vim-gnome\n```\n\nPython 示例：\n\n```python\n@requires_authorization\ndef somefunc(param1='', param2=0):\n    '''A docstring'''\n    if param1 > param2: # interesting\n        print 'Greater'\n    return (param2 - param1 + 1) or None\n\nclass SomeClass:\n    pass\n\n>>> message = '''interpreter\n... prompt'''\n```\n\nJavaScript 示例：\n\n``` javascript\n/**\n* nth element in the fibonacci series.\n* @param n >= 0\n* @return the nth element, >= 0.\n*/\nfunction fib(n) {\n  var a = 1, b = 1;\n  var tmp;\n  while (--n >= 0) {\n    tmp = a;\n    a += b;\n    b = tmp;\n  }\n  return a;\n}\n\ndocument.write(fib(10));\n```\n\n### 7. 流程图\n\n#### 示例\n\n```flow\nst=>start: Start:>https://www.zybuluo.com\nio=>inputoutput: verification\nop=>operation: Your Operation\ncond=>condition: Yes or No?\nsub=>subroutine: Your Subroutine\ne=>end\n\nst->io->op->cond\ncond(yes)->e\ncond(no)->sub->io\n```\n\n#### 更多语法参考：[流程图语法参考](http://adrai.github.io/flowchart.js/)\n\n### 8. 序列图\n\n#### 示例 1\n\n```seq\nAlice->Bob: Hello Bob, how are you?\nNote right of Bob: Bob thinks\nBob-->Alice: I am good thanks!\n```\n\n#### 示例 2\n\n```seq\nTitle: Here is a title\nA->B: Normal line\nB-->C: Dashed line\nC->>D: Open arrow\nD-->>A: Dashed open arrow\n```\n\n#### 更多语法参考：[序列图语法参考](http://bramp.github.io/js-sequence-diagrams/)\n\n### 9. 甘特图\n\n甘特图内在思想简单。基本是一条线条图，横轴表示时间，纵轴表示活动（项目），线条表示在整个期间上计划和实际的活动完成情况。它直观地表明任务计划在什么时候进行，及实际进展与计划要求的对比。\n\n```gantt\n    title 项目开发流程\n    section 项目确定\n        需求分析       :a1, 2016-06-22, 3d\n        可行性报告     :after a1, 5d\n        概念验证       : 5d\n    section 项目实施\n        概要设计      :2016-07-05  , 5d\n        详细设计      :2016-07-08, 10d\n        编码          :2016-07-15, 10d\n        测试          :2016-07-22, 5d\n    section 发布验收\n        发布: 2d\n        验收: 3d\n```\n\n#### 更多语法参考：[甘特图语法参考](https://knsv.github.io/mermaid/#gant-diagrams)\n\n### 10. Mermaid 流程图\n\n```graphLR\n    A[Hard edge] -->|Link text| B(Round edge)\n    B --> C{Decision}\n    C -->|One| D[Result one]\n    C -->|Two| E[Result two]\n```\n\n#### 更多语法参考：[Mermaid 流程图语法参考](https://knsv.github.io/mermaid/#flowcharts-basic-syntax)\n\n### 11. Mermaid 序列图\n\n```sequence\n    Alice->John: Hello John, how are you?\n    loop every minute\n        John-->Alice: Great!\n    end\n```\n\n#### 更多语法参考：[Mermaid 序列图语法参考](https://knsv.github.io/mermaid/#sequence-diagrams)\n\n### 12. 表格支持\n\n| 项目        | 价格   |  数量  |\n| --------   | -----:  | :----:  |\n| 计算机     | \\$1600 |   5     |\n| 手机        |   \\$12   |   12   |\n| 管线        |    \\$1    |  234  |\n\n\n### 13. 定义型列表\n\n名词 1\n:   定义 1（左侧有一个可见的冒号和四个不可见的空格）\n\n代码块 2\n:   这是代码块的定义（左侧有一个可见的冒号和四个不可见的空格）\n\n        代码块（左侧有八个不可见的空格）\n\n### 14. Html 标签\n\n本站支持在 Markdown 语法中嵌套 Html 标签，譬如，你可以用 Html 写一个纵跨两行的表格：\n\n    <table>\n        <tr>\n            <th rowspan=\"2\">值班人员</th>\n            <th>星期一</th>\n            <th>星期二</th>\n            <th>星期三</th>\n        </tr>\n        <tr>\n            <td>李强</td>\n            <td>张明</td>\n            <td>王平</td>\n        </tr>\n    </table>\n\n\n<table>\n    <tr>\n        <th rowspan=\"2\">值班人员</th>\n        <th>星期一</th>\n        <th>星期二</th>\n        <th>星期三</th>\n    </tr>\n    <tr>\n        <td>李强</td>\n        <td>张明</td>\n        <td>王平</td>\n    </tr>\n</table>\n\n### 15. 内嵌图标\n\n本站的图标系统对外开放，在文档中输入\n\n    <i class=\"icon-weibo\"></i>\n\n即显示微博的图标： <i class=\"icon-weibo icon-2x\"></i>\n\n替换 上述 `i 标签` 内的 `icon-weibo` 以显示不同的图标，例如：\n\n    <i class=\"icon-renren\"></i>\n\n即显示人人的图标： <i class=\"icon-renren icon-2x\"></i>\n\n更多的图标和玩法可以参看 [font-awesome](http://fortawesome.github.io/Font-Awesome/3.2.1/icons/) 官方网站。\n\n### 16. 待办事宜 Todo 列表\n\n使用带有 [ ] 或 [x] （未完成或已完成）项的列表语法撰写一个待办事宜列表，并且支持子列表嵌套以及混用Markdown语法，例如：\n\n    - [ ] **Cmd Markdown 开发**\n        - [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率\n        - [ ] 支持以 PDF 格式导出文稿\n        - [x] 新增Todo列表功能 [语法参考](https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments)\n        - [x] 改进 LaTex 功能\n            - [x] 修复 LaTex 公式渲染问题\n            - [x] 新增 LaTex 公式编号功能 [语法参考](http://docs.mathjax.org/en/latest/tex.html#tex-eq-numbers)\n    - [ ] **七月旅行准备**\n        - [ ] 准备邮轮上需要携带的物品\n        - [ ] 浏览日本免税店的物品\n        - [x] 购买蓝宝石公主号七月一日的船票\n        \n对应显示如下待办事宜 Todo 列表：\n        \n- [ ] **Cmd Markdown 开发**\n    - [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率\n    - [ ] 支持以 PDF 格式导出文稿\n    - [x] 新增Todo列表功能 [语法参考](https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments)\n    - [x] 改进 LaTex 功能\n        - [x] 修复 LaTex 公式渲染问题\n        - [x] 新增 LaTex 公式编号功能 [语法参考](http://docs.mathjax.org/en/latest/tex.html#tex-eq-numbers)\n- [ ] **七月旅行准备**\n    - [ ] 准备邮轮上需要携带的物品\n    - [ ] 浏览日本免税店的物品\n    - [x] 购买蓝宝石公主号七月一日的船票\n        \n        \n[^footnote]: 这是一个 *注脚* 的 **文本**。\n\n[^footnote2]: 这是另一个 *注脚* 的 **文本**。\n\n","source":"_posts/Markdown测试.md","raw":"---\ntitle: Markdown测试\ndate: 2019-12-01 17:07:11\ntags: ['测试']\ncategories: 测试\n---\n\n# 一级标题\n\n\n---\n\n### 1. 斜体和粗体\n\n使用 * 和 ** 表示斜体和粗体。\n\n示例：\n\n这是 *斜体*，这是 **粗体**。\n\n<!-- more -->\n\n### 2. 分级标题\n\n使用 === 表示一级标题，使用 --- 表示二级标题。\n\n示例：\n\n```\n这是一个一级标题\n============================\n\n这是一个二级标题\n--------------------------------------------------\n\n### 这是一个三级标题\n```\n\n你也可以选择在行首加井号表示不同级别的标题 (H1-H6)，例如：# H1, ## H2, ### H3，#### H4。\n\n### 3. 外链接\n\n使用 \\[描述](链接地址) 为文字增加外链接。\n\n示例：\n\n这是去往 [本人博客](http://Shen-Yu.github.com) 的链接。\n\n![](https://n1-q.mafengwo.net/s15/M00/65/BB/CoUBGV3brtOAMKOdAAsHBZ8nyQk791.jpg?imageMogr2%2Fthumbnail%2F1360x%2Fstrip%2Fquality%2F90)\n\n### 4. 无序列表\n\n使用 *，+，- 表示无序列表。\n\n示例：\n\n- 无序列表项 一\n- 无序列表项 二\n- 无序列表项 三\n\n### 5. 有序列表\n\n使用数字和点表示有序列表。\n\n示例：\n\n1. 有序列表项 一\n2. 有序列表项 二\n3. 有序列表项 三\n\n### 6. 文字引用\n\n使用 > 表示文字引用。\n\n示例：\n\n> 野火烧不尽，春风吹又生。\n\n### 7. 行内代码块\n\n使用 \\`代码` 表示行内代码块。\n\n示例：\n\n让我们聊聊 `html`。\n\n### 8.  代码块\n\n使用 四个缩进空格 表示代码块。\n\n示例：\n\n    这是一个代码块，此行左侧有四个不可见的空格。\n\n### 9.  插入图像\n\n使用 \\!\\[描述](图片链接地址) 插入图像。\n\n示例：\n\n![我的头像](https://www.zybuluo.com/static/img/my_head.jpg)\n\n# Cmd Markdown 高阶语法手册\n\n### 1. 内容目录\n\n在段落中填写 `[TOC]` 以显示全文内容的目录结构。\n\n[TOC]\n\n### 2. 标签分类\n\n在编辑区任意行的列首位置输入以下代码给文稿标签：\n\n标签： 数学 英语 Markdown\n\n或者\n\nTags： 数学 英语 Markdown\n\n### 3. 删除线\n\n使用 ~~ 表示删除线。\n\n~~这是一段错误的文本。~~\n\n### 4. 注脚\n\n使用 [^keyword] 表示注脚。\n\n这是一个注脚[^footnote]的样例。\n\n这是第二个注脚[^footnote2]的样例。\n\n### 5. LaTeX 公式\n\n$ 表示行内公式： \n\n质能守恒方程可以用一个很简洁的方程式 $E=mc^2$ 来表达。\n\n$$ 表示整行公式：\n\n$$\\sum_{i=1}^n a_i=0$$\n\n$$f(x_1,x_x,\\ldots,x_n) = x_1^2 + x_2^2 + \\cdots + x_n^2 $$\n\n$$\\sum^{j-1}_{k=0}{\\widehat{\\gamma}_{kj} z_k}$$\n\n访问 [MathJax](http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference) 参考更多使用方法。\n\n### 6. 加强的代码块\n\n支持四十一种编程语言的语法高亮的显示，行号显示。\n\n非代码示例：\n\n```\n$ sudo apt-get install vim-gnome\n```\n\nPython 示例：\n\n```python\n@requires_authorization\ndef somefunc(param1='', param2=0):\n    '''A docstring'''\n    if param1 > param2: # interesting\n        print 'Greater'\n    return (param2 - param1 + 1) or None\n\nclass SomeClass:\n    pass\n\n>>> message = '''interpreter\n... prompt'''\n```\n\nJavaScript 示例：\n\n``` javascript\n/**\n* nth element in the fibonacci series.\n* @param n >= 0\n* @return the nth element, >= 0.\n*/\nfunction fib(n) {\n  var a = 1, b = 1;\n  var tmp;\n  while (--n >= 0) {\n    tmp = a;\n    a += b;\n    b = tmp;\n  }\n  return a;\n}\n\ndocument.write(fib(10));\n```\n\n### 7. 流程图\n\n#### 示例\n\n```flow\nst=>start: Start:>https://www.zybuluo.com\nio=>inputoutput: verification\nop=>operation: Your Operation\ncond=>condition: Yes or No?\nsub=>subroutine: Your Subroutine\ne=>end\n\nst->io->op->cond\ncond(yes)->e\ncond(no)->sub->io\n```\n\n#### 更多语法参考：[流程图语法参考](http://adrai.github.io/flowchart.js/)\n\n### 8. 序列图\n\n#### 示例 1\n\n```seq\nAlice->Bob: Hello Bob, how are you?\nNote right of Bob: Bob thinks\nBob-->Alice: I am good thanks!\n```\n\n#### 示例 2\n\n```seq\nTitle: Here is a title\nA->B: Normal line\nB-->C: Dashed line\nC->>D: Open arrow\nD-->>A: Dashed open arrow\n```\n\n#### 更多语法参考：[序列图语法参考](http://bramp.github.io/js-sequence-diagrams/)\n\n### 9. 甘特图\n\n甘特图内在思想简单。基本是一条线条图，横轴表示时间，纵轴表示活动（项目），线条表示在整个期间上计划和实际的活动完成情况。它直观地表明任务计划在什么时候进行，及实际进展与计划要求的对比。\n\n```gantt\n    title 项目开发流程\n    section 项目确定\n        需求分析       :a1, 2016-06-22, 3d\n        可行性报告     :after a1, 5d\n        概念验证       : 5d\n    section 项目实施\n        概要设计      :2016-07-05  , 5d\n        详细设计      :2016-07-08, 10d\n        编码          :2016-07-15, 10d\n        测试          :2016-07-22, 5d\n    section 发布验收\n        发布: 2d\n        验收: 3d\n```\n\n#### 更多语法参考：[甘特图语法参考](https://knsv.github.io/mermaid/#gant-diagrams)\n\n### 10. Mermaid 流程图\n\n```graphLR\n    A[Hard edge] -->|Link text| B(Round edge)\n    B --> C{Decision}\n    C -->|One| D[Result one]\n    C -->|Two| E[Result two]\n```\n\n#### 更多语法参考：[Mermaid 流程图语法参考](https://knsv.github.io/mermaid/#flowcharts-basic-syntax)\n\n### 11. Mermaid 序列图\n\n```sequence\n    Alice->John: Hello John, how are you?\n    loop every minute\n        John-->Alice: Great!\n    end\n```\n\n#### 更多语法参考：[Mermaid 序列图语法参考](https://knsv.github.io/mermaid/#sequence-diagrams)\n\n### 12. 表格支持\n\n| 项目        | 价格   |  数量  |\n| --------   | -----:  | :----:  |\n| 计算机     | \\$1600 |   5     |\n| 手机        |   \\$12   |   12   |\n| 管线        |    \\$1    |  234  |\n\n\n### 13. 定义型列表\n\n名词 1\n:   定义 1（左侧有一个可见的冒号和四个不可见的空格）\n\n代码块 2\n:   这是代码块的定义（左侧有一个可见的冒号和四个不可见的空格）\n\n        代码块（左侧有八个不可见的空格）\n\n### 14. Html 标签\n\n本站支持在 Markdown 语法中嵌套 Html 标签，譬如，你可以用 Html 写一个纵跨两行的表格：\n\n    <table>\n        <tr>\n            <th rowspan=\"2\">值班人员</th>\n            <th>星期一</th>\n            <th>星期二</th>\n            <th>星期三</th>\n        </tr>\n        <tr>\n            <td>李强</td>\n            <td>张明</td>\n            <td>王平</td>\n        </tr>\n    </table>\n\n\n<table>\n    <tr>\n        <th rowspan=\"2\">值班人员</th>\n        <th>星期一</th>\n        <th>星期二</th>\n        <th>星期三</th>\n    </tr>\n    <tr>\n        <td>李强</td>\n        <td>张明</td>\n        <td>王平</td>\n    </tr>\n</table>\n\n### 15. 内嵌图标\n\n本站的图标系统对外开放，在文档中输入\n\n    <i class=\"icon-weibo\"></i>\n\n即显示微博的图标： <i class=\"icon-weibo icon-2x\"></i>\n\n替换 上述 `i 标签` 内的 `icon-weibo` 以显示不同的图标，例如：\n\n    <i class=\"icon-renren\"></i>\n\n即显示人人的图标： <i class=\"icon-renren icon-2x\"></i>\n\n更多的图标和玩法可以参看 [font-awesome](http://fortawesome.github.io/Font-Awesome/3.2.1/icons/) 官方网站。\n\n### 16. 待办事宜 Todo 列表\n\n使用带有 [ ] 或 [x] （未完成或已完成）项的列表语法撰写一个待办事宜列表，并且支持子列表嵌套以及混用Markdown语法，例如：\n\n    - [ ] **Cmd Markdown 开发**\n        - [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率\n        - [ ] 支持以 PDF 格式导出文稿\n        - [x] 新增Todo列表功能 [语法参考](https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments)\n        - [x] 改进 LaTex 功能\n            - [x] 修复 LaTex 公式渲染问题\n            - [x] 新增 LaTex 公式编号功能 [语法参考](http://docs.mathjax.org/en/latest/tex.html#tex-eq-numbers)\n    - [ ] **七月旅行准备**\n        - [ ] 准备邮轮上需要携带的物品\n        - [ ] 浏览日本免税店的物品\n        - [x] 购买蓝宝石公主号七月一日的船票\n        \n对应显示如下待办事宜 Todo 列表：\n        \n- [ ] **Cmd Markdown 开发**\n    - [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率\n    - [ ] 支持以 PDF 格式导出文稿\n    - [x] 新增Todo列表功能 [语法参考](https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments)\n    - [x] 改进 LaTex 功能\n        - [x] 修复 LaTex 公式渲染问题\n        - [x] 新增 LaTex 公式编号功能 [语法参考](http://docs.mathjax.org/en/latest/tex.html#tex-eq-numbers)\n- [ ] **七月旅行准备**\n    - [ ] 准备邮轮上需要携带的物品\n    - [ ] 浏览日本免税店的物品\n    - [x] 购买蓝宝石公主号七月一日的船票\n        \n        \n[^footnote]: 这是一个 *注脚* 的 **文本**。\n\n[^footnote2]: 这是另一个 *注脚* 的 **文本**。\n\n","slug":"Markdown测试","published":1,"updated":"2022-06-28T05:30:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4z9v5o800010s7ehndq0a2x","content":"<h1 id=\"一级标题\"><a href=\"#一级标题\" class=\"headerlink\" title=\"一级标题\"></a>一级标题</h1><hr>\n<h3 id=\"1-斜体和粗体\"><a href=\"#1-斜体和粗体\" class=\"headerlink\" title=\"1. 斜体和粗体\"></a>1. 斜体和粗体</h3><p>使用 * 和 ** 表示斜体和粗体。</p>\n<p>示例：</p>\n<p>这是 <em>斜体</em>，这是 <strong>粗体</strong>。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"2-分级标题\"><a href=\"#2-分级标题\" class=\"headerlink\" title=\"2. 分级标题\"></a>2. 分级标题</h3><p>使用 === 表示一级标题，使用 — 表示二级标题。</p>\n<p>示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这是一个一级标题</span><br><span class=\"line\">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class=\"line\"></span><br><span class=\"line\">这是一个二级标题</span><br><span class=\"line\">--------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\">### 这是一个三级标题</span><br></pre></td></tr></table></figure>\n\n<p>你也可以选择在行首加井号表示不同级别的标题 (H1-H6)，例如：# H1, ## H2, ### H3，#### H4。</p>\n<h3 id=\"3-外链接\"><a href=\"#3-外链接\" class=\"headerlink\" title=\"3. 外链接\"></a>3. 外链接</h3><p>使用 [描述](链接地址) 为文字增加外链接。</p>\n<p>示例：</p>\n<p>这是去往 <a href=\"http://shen-yu.github.com/\">本人博客</a> 的链接。</p>\n<p><img src=\"https://n1-q.mafengwo.net/s15/M00/65/BB/CoUBGV3brtOAMKOdAAsHBZ8nyQk791.jpg?imageMogr2/thumbnail/1360x/strip/quality/90\"></p>\n<h3 id=\"4-无序列表\"><a href=\"#4-无序列表\" class=\"headerlink\" title=\"4. 无序列表\"></a>4. 无序列表</h3><p>使用 *，+，- 表示无序列表。</p>\n<p>示例：</p>\n<ul>\n<li>无序列表项 一</li>\n<li>无序列表项 二</li>\n<li>无序列表项 三</li>\n</ul>\n<h3 id=\"5-有序列表\"><a href=\"#5-有序列表\" class=\"headerlink\" title=\"5. 有序列表\"></a>5. 有序列表</h3><p>使用数字和点表示有序列表。</p>\n<p>示例：</p>\n<ol>\n<li>有序列表项 一</li>\n<li>有序列表项 二</li>\n<li>有序列表项 三</li>\n</ol>\n<h3 id=\"6-文字引用\"><a href=\"#6-文字引用\" class=\"headerlink\" title=\"6. 文字引用\"></a>6. 文字引用</h3><p>使用 &gt; 表示文字引用。</p>\n<p>示例：</p>\n<blockquote>\n<p>野火烧不尽，春风吹又生。</p>\n</blockquote>\n<h3 id=\"7-行内代码块\"><a href=\"#7-行内代码块\" class=\"headerlink\" title=\"7. 行内代码块\"></a>7. 行内代码块</h3><p>使用 `代码` 表示行内代码块。</p>\n<p>示例：</p>\n<p>让我们聊聊 <code>html</code>。</p>\n<h3 id=\"8-代码块\"><a href=\"#8-代码块\" class=\"headerlink\" title=\"8.  代码块\"></a>8.  代码块</h3><p>使用 四个缩进空格 表示代码块。</p>\n<p>示例：</p>\n<pre><code>这是一个代码块，此行左侧有四个不可见的空格。\n</code></pre>\n<h3 id=\"9-插入图像\"><a href=\"#9-插入图像\" class=\"headerlink\" title=\"9.  插入图像\"></a>9.  插入图像</h3><p>使用 ![描述](图片链接地址) 插入图像。</p>\n<p>示例：</p>\n<p><img src=\"https://www.zybuluo.com/static/img/my_head.jpg\" alt=\"我的头像\"></p>\n<h1 id=\"Cmd-Markdown-高阶语法手册\"><a href=\"#Cmd-Markdown-高阶语法手册\" class=\"headerlink\" title=\"Cmd Markdown 高阶语法手册\"></a>Cmd Markdown 高阶语法手册</h1><h3 id=\"1-内容目录\"><a href=\"#1-内容目录\" class=\"headerlink\" title=\"1. 内容目录\"></a>1. 内容目录</h3><p>在段落中填写 <code>[TOC]</code> 以显示全文内容的目录结构。</p>\n<p>[TOC]</p>\n<h3 id=\"2-标签分类\"><a href=\"#2-标签分类\" class=\"headerlink\" title=\"2. 标签分类\"></a>2. 标签分类</h3><p>在编辑区任意行的列首位置输入以下代码给文稿标签：</p>\n<p>标签： 数学 英语 Markdown</p>\n<p>或者</p>\n<p>Tags： 数学 英语 Markdown</p>\n<h3 id=\"3-删除线\"><a href=\"#3-删除线\" class=\"headerlink\" title=\"3. 删除线\"></a>3. 删除线</h3><p>使用 ~~ 表示删除线。</p>\n<p><del>这是一段错误的文本。</del></p>\n<h3 id=\"4-注脚\"><a href=\"#4-注脚\" class=\"headerlink\" title=\"4. 注脚\"></a>4. 注脚</h3><p>使用 [^keyword] 表示注脚。</p>\n<p>这是一个注脚[^footnote]的样例。</p>\n<p>这是第二个注脚[^footnote2]的样例。</p>\n<h3 id=\"5-LaTeX-公式\"><a href=\"#5-LaTeX-公式\" class=\"headerlink\" title=\"5. LaTeX 公式\"></a>5. LaTeX 公式</h3><p>$ 表示行内公式： </p>\n<p>质能守恒方程可以用一个很简洁的方程式 $E=mc^2$ 来表达。</p>\n<p>$$ 表示整行公式：</p>\n<p>$$\\sum_{i=1}^n a_i=0$$</p>\n<p>$$f(x_1,x_x,\\ldots,x_n) = x_1^2 + x_2^2 + \\cdots + x_n^2 $$</p>\n<p>$$\\sum^{j-1}<em>{k=0}{\\widehat{\\gamma}</em>{kj} z_k}$$</p>\n<p>访问 <a href=\"http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference\">MathJax</a> 参考更多使用方法。</p>\n<h3 id=\"6-加强的代码块\"><a href=\"#6-加强的代码块\" class=\"headerlink\" title=\"6. 加强的代码块\"></a>6. 加强的代码块</h3><p>支持四十一种编程语言的语法高亮的显示，行号显示。</p>\n<p>非代码示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install vim-gnome</span><br></pre></td></tr></table></figure>\n\n<p>Python 示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@requires_authorization</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">somefunc</span>(<span class=\"params\">param1=<span class=\"string\">&#x27;&#x27;</span>, param2=<span class=\"number\">0</span></span>):</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;A docstring&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> param1 &gt; param2: <span class=\"comment\"># interesting</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span> <span class=\"string\">&#x27;Greater&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (param2 - param1 + <span class=\"number\">1</span>) <span class=\"keyword\">or</span> <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SomeClass</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>message = <span class=\"string\">&#x27;&#x27;&#x27;interpreter</span></span><br><span class=\"line\"><span class=\"string\"><span class=\"meta\">... </span>prompt&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>JavaScript 示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* nth element in the fibonacci series.</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param </span>n &gt;= 0</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@return </span>the nth element, &gt;= 0.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fib</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">1</span>, b = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> tmp;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (--n &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    tmp = a;</span><br><span class=\"line\">    a += b;</span><br><span class=\"line\">    b = tmp;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(fib(<span class=\"number\">10</span>));</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-流程图\"><a href=\"#7-流程图\" class=\"headerlink\" title=\"7. 流程图\"></a>7. 流程图</h3><h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">st&#x3D;&gt;start: Start:&gt;https:&#x2F;&#x2F;www.zybuluo.com</span><br><span class=\"line\">io&#x3D;&gt;inputoutput: verification</span><br><span class=\"line\">op&#x3D;&gt;operation: Your Operation</span><br><span class=\"line\">cond&#x3D;&gt;condition: Yes or No?</span><br><span class=\"line\">sub&#x3D;&gt;subroutine: Your Subroutine</span><br><span class=\"line\">e&#x3D;&gt;end</span><br><span class=\"line\"></span><br><span class=\"line\">st-&gt;io-&gt;op-&gt;cond</span><br><span class=\"line\">cond(yes)-&gt;e</span><br><span class=\"line\">cond(no)-&gt;sub-&gt;io</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"更多语法参考：流程图语法参考\"><a href=\"#更多语法参考：流程图语法参考\" class=\"headerlink\" title=\"更多语法参考：流程图语法参考\"></a>更多语法参考：<a href=\"http://adrai.github.io/flowchart.js/\">流程图语法参考</a></h4><h3 id=\"8-序列图\"><a href=\"#8-序列图\" class=\"headerlink\" title=\"8. 序列图\"></a>8. 序列图</h3><h4 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例 1\"></a>示例 1</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Alice-&gt;Bob: Hello Bob, how are you?</span><br><span class=\"line\">Note right of Bob: Bob thinks</span><br><span class=\"line\">Bob--&gt;Alice: I am good thanks!</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"示例-2\"><a href=\"#示例-2\" class=\"headerlink\" title=\"示例 2\"></a>示例 2</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Title: Here is a title</span><br><span class=\"line\">A-&gt;B: Normal line</span><br><span class=\"line\">B--&gt;C: Dashed line</span><br><span class=\"line\">C-&gt;&gt;D: Open arrow</span><br><span class=\"line\">D--&gt;&gt;A: Dashed open arrow</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"更多语法参考：序列图语法参考\"><a href=\"#更多语法参考：序列图语法参考\" class=\"headerlink\" title=\"更多语法参考：序列图语法参考\"></a>更多语法参考：<a href=\"http://bramp.github.io/js-sequence-diagrams/\">序列图语法参考</a></h4><h3 id=\"9-甘特图\"><a href=\"#9-甘特图\" class=\"headerlink\" title=\"9. 甘特图\"></a>9. 甘特图</h3><p>甘特图内在思想简单。基本是一条线条图，横轴表示时间，纵轴表示活动（项目），线条表示在整个期间上计划和实际的活动完成情况。它直观地表明任务计划在什么时候进行，及实际进展与计划要求的对比。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title 项目开发流程</span><br><span class=\"line\">section 项目确定</span><br><span class=\"line\">    需求分析       :a1, 2016-06-22, 3d</span><br><span class=\"line\">    可行性报告     :after a1, 5d</span><br><span class=\"line\">    概念验证       : 5d</span><br><span class=\"line\">section 项目实施</span><br><span class=\"line\">    概要设计      :2016-07-05  , 5d</span><br><span class=\"line\">    详细设计      :2016-07-08, 10d</span><br><span class=\"line\">    编码          :2016-07-15, 10d</span><br><span class=\"line\">    测试          :2016-07-22, 5d</span><br><span class=\"line\">section 发布验收</span><br><span class=\"line\">    发布: 2d</span><br><span class=\"line\">    验收: 3d</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"更多语法参考：甘特图语法参考\"><a href=\"#更多语法参考：甘特图语法参考\" class=\"headerlink\" title=\"更多语法参考：甘特图语法参考\"></a>更多语法参考：<a href=\"https://knsv.github.io/mermaid/#gant-diagrams\">甘特图语法参考</a></h4><h3 id=\"10-Mermaid-流程图\"><a href=\"#10-Mermaid-流程图\" class=\"headerlink\" title=\"10. Mermaid 流程图\"></a>10. Mermaid 流程图</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A[Hard edge] --&gt;|Link text| B(Round edge)</span><br><span class=\"line\">B --&gt; C&#123;Decision&#125;</span><br><span class=\"line\">C --&gt;|One| D[Result one]</span><br><span class=\"line\">C --&gt;|Two| E[Result two]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"更多语法参考：Mermaid-流程图语法参考\"><a href=\"#更多语法参考：Mermaid-流程图语法参考\" class=\"headerlink\" title=\"更多语法参考：Mermaid 流程图语法参考\"></a>更多语法参考：<a href=\"https://knsv.github.io/mermaid/#flowcharts-basic-syntax\">Mermaid 流程图语法参考</a></h4><h3 id=\"11-Mermaid-序列图\"><a href=\"#11-Mermaid-序列图\" class=\"headerlink\" title=\"11. Mermaid 序列图\"></a>11. Mermaid 序列图</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Alice-&gt;John: Hello John, how are you?</span><br><span class=\"line\">loop every minute</span><br><span class=\"line\">    John--&gt;Alice: Great!</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"更多语法参考：Mermaid-序列图语法参考\"><a href=\"#更多语法参考：Mermaid-序列图语法参考\" class=\"headerlink\" title=\"更多语法参考：Mermaid 序列图语法参考\"></a>更多语法参考：<a href=\"https://knsv.github.io/mermaid/#sequence-diagrams\">Mermaid 序列图语法参考</a></h4><h3 id=\"12-表格支持\"><a href=\"#12-表格支持\" class=\"headerlink\" title=\"12. 表格支持\"></a>12. 表格支持</h3><table>\n<thead>\n<tr>\n<th>项目</th>\n<th align=\"right\">价格</th>\n<th align=\"center\">数量</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>计算机</td>\n<td align=\"right\">$1600</td>\n<td align=\"center\">5</td>\n</tr>\n<tr>\n<td>手机</td>\n<td align=\"right\">$12</td>\n<td align=\"center\">12</td>\n</tr>\n<tr>\n<td>管线</td>\n<td align=\"right\">$1</td>\n<td align=\"center\">234</td>\n</tr>\n</tbody></table>\n<h3 id=\"13-定义型列表\"><a href=\"#13-定义型列表\" class=\"headerlink\" title=\"13. 定义型列表\"></a>13. 定义型列表</h3><dl><dt>名词 1</dt><dd>定义 1（左侧有一个可见的冒号和四个不可见的空格）</dd></dl><dl><dt>代码块 2</dt><dd>这是代码块的定义（左侧有一个可见的冒号和四个不可见的空格）</dd></dl><pre><code>    代码块（左侧有八个不可见的空格）\n</code></pre>\n<h3 id=\"14-Html-标签\"><a href=\"#14-Html-标签\" class=\"headerlink\" title=\"14. Html 标签\"></a>14. Html 标签</h3><p>本站支持在 Markdown 语法中嵌套 Html 标签，譬如，你可以用 Html 写一个纵跨两行的表格：</p>\n<pre><code>&lt;table&gt;\n    &lt;tr&gt;\n        &lt;th rowspan=&quot;2&quot;&gt;值班人员&lt;/th&gt;\n        &lt;th&gt;星期一&lt;/th&gt;\n        &lt;th&gt;星期二&lt;/th&gt;\n        &lt;th&gt;星期三&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n        &lt;td&gt;李强&lt;/td&gt;\n        &lt;td&gt;张明&lt;/td&gt;\n        &lt;td&gt;王平&lt;/td&gt;\n    &lt;/tr&gt;\n&lt;/table&gt;\n</code></pre>\n<table>\n    <tr>\n        <th rowspan=\"2\">值班人员</th>\n        <th>星期一</th>\n        <th>星期二</th>\n        <th>星期三</th>\n    </tr>\n    <tr>\n        <td>李强</td>\n        <td>张明</td>\n        <td>王平</td>\n    </tr>\n</table>\n\n<h3 id=\"15-内嵌图标\"><a href=\"#15-内嵌图标\" class=\"headerlink\" title=\"15. 内嵌图标\"></a>15. 内嵌图标</h3><p>本站的图标系统对外开放，在文档中输入</p>\n<pre><code>&lt;i class=&quot;icon-weibo&quot;&gt;&lt;/i&gt;\n</code></pre>\n<p>即显示微博的图标： <i class=\"icon-weibo icon-2x\"></i></p>\n<p>替换 上述 <code>i 标签</code> 内的 <code>icon-weibo</code> 以显示不同的图标，例如：</p>\n<pre><code>&lt;i class=&quot;icon-renren&quot;&gt;&lt;/i&gt;\n</code></pre>\n<p>即显示人人的图标： <i class=\"icon-renren icon-2x\"></i></p>\n<p>更多的图标和玩法可以参看 <a href=\"http://fortawesome.github.io/Font-Awesome/3.2.1/icons/\">font-awesome</a> 官方网站。</p>\n<h3 id=\"16-待办事宜-Todo-列表\"><a href=\"#16-待办事宜-Todo-列表\" class=\"headerlink\" title=\"16. 待办事宜 Todo 列表\"></a>16. 待办事宜 Todo 列表</h3><p>使用带有 [ ] 或 [x] （未完成或已完成）项的列表语法撰写一个待办事宜列表，并且支持子列表嵌套以及混用Markdown语法，例如：</p>\n<pre><code>- [ ] **Cmd Markdown 开发**\n    - [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率\n    - [ ] 支持以 PDF 格式导出文稿\n    - [x] 新增Todo列表功能 [语法参考](https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments)\n    - [x] 改进 LaTex 功能\n        - [x] 修复 LaTex 公式渲染问题\n        - [x] 新增 LaTex 公式编号功能 [语法参考](http://docs.mathjax.org/en/latest/tex.html#tex-eq-numbers)\n- [ ] **七月旅行准备**\n    - [ ] 准备邮轮上需要携带的物品\n    - [ ] 浏览日本免税店的物品\n    - [x] 购买蓝宝石公主号七月一日的船票\n    \n</code></pre>\n<p>对应显示如下待办事宜 Todo 列表：</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> <strong>Cmd Markdown 开发</strong><ul>\n<li><input disabled=\"\" type=\"checkbox\"> 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率</li>\n<li><input disabled=\"\" type=\"checkbox\"> 支持以 PDF 格式导出文稿</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 新增Todo列表功能 <a href=\"https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments\">语法参考</a></li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 改进 LaTex 功能<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 修复 LaTex 公式渲染问题</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 新增 LaTex 公式编号功能 <a href=\"http://docs.mathjax.org/en/latest/tex.html#tex-eq-numbers\">语法参考</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> <strong>七月旅行准备</strong><ul>\n<li><input disabled=\"\" type=\"checkbox\"> 准备邮轮上需要携带的物品</li>\n<li><input disabled=\"\" type=\"checkbox\"> 浏览日本免税店的物品</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 购买蓝宝石公主号七月一日的船票[^footnote]: 这是一个 <em>注脚</em> 的 <strong>文本</strong>。</li>\n</ul>\n</li>\n</ul>\n<p>[^footnote2]: 这是另一个 <em>注脚</em> 的 <strong>文本</strong>。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"一级标题\"><a href=\"#一级标题\" class=\"headerlink\" title=\"一级标题\"></a>一级标题</h1><hr>\n<h3 id=\"1-斜体和粗体\"><a href=\"#1-斜体和粗体\" class=\"headerlink\" title=\"1. 斜体和粗体\"></a>1. 斜体和粗体</h3><p>使用 * 和 ** 表示斜体和粗体。</p>\n<p>示例：</p>\n<p>这是 <em>斜体</em>，这是 <strong>粗体</strong>。</p>","more":"<h3 id=\"2-分级标题\"><a href=\"#2-分级标题\" class=\"headerlink\" title=\"2. 分级标题\"></a>2. 分级标题</h3><p>使用 === 表示一级标题，使用 — 表示二级标题。</p>\n<p>示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这是一个一级标题</span><br><span class=\"line\">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class=\"line\"></span><br><span class=\"line\">这是一个二级标题</span><br><span class=\"line\">--------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\">### 这是一个三级标题</span><br></pre></td></tr></table></figure>\n\n<p>你也可以选择在行首加井号表示不同级别的标题 (H1-H6)，例如：# H1, ## H2, ### H3，#### H4。</p>\n<h3 id=\"3-外链接\"><a href=\"#3-外链接\" class=\"headerlink\" title=\"3. 外链接\"></a>3. 外链接</h3><p>使用 [描述](链接地址) 为文字增加外链接。</p>\n<p>示例：</p>\n<p>这是去往 <a href=\"http://shen-yu.github.com/\">本人博客</a> 的链接。</p>\n<p><img src=\"https://n1-q.mafengwo.net/s15/M00/65/BB/CoUBGV3brtOAMKOdAAsHBZ8nyQk791.jpg?imageMogr2/thumbnail/1360x/strip/quality/90\"></p>\n<h3 id=\"4-无序列表\"><a href=\"#4-无序列表\" class=\"headerlink\" title=\"4. 无序列表\"></a>4. 无序列表</h3><p>使用 *，+，- 表示无序列表。</p>\n<p>示例：</p>\n<ul>\n<li>无序列表项 一</li>\n<li>无序列表项 二</li>\n<li>无序列表项 三</li>\n</ul>\n<h3 id=\"5-有序列表\"><a href=\"#5-有序列表\" class=\"headerlink\" title=\"5. 有序列表\"></a>5. 有序列表</h3><p>使用数字和点表示有序列表。</p>\n<p>示例：</p>\n<ol>\n<li>有序列表项 一</li>\n<li>有序列表项 二</li>\n<li>有序列表项 三</li>\n</ol>\n<h3 id=\"6-文字引用\"><a href=\"#6-文字引用\" class=\"headerlink\" title=\"6. 文字引用\"></a>6. 文字引用</h3><p>使用 &gt; 表示文字引用。</p>\n<p>示例：</p>\n<blockquote>\n<p>野火烧不尽，春风吹又生。</p>\n</blockquote>\n<h3 id=\"7-行内代码块\"><a href=\"#7-行内代码块\" class=\"headerlink\" title=\"7. 行内代码块\"></a>7. 行内代码块</h3><p>使用 `代码` 表示行内代码块。</p>\n<p>示例：</p>\n<p>让我们聊聊 <code>html</code>。</p>\n<h3 id=\"8-代码块\"><a href=\"#8-代码块\" class=\"headerlink\" title=\"8.  代码块\"></a>8.  代码块</h3><p>使用 四个缩进空格 表示代码块。</p>\n<p>示例：</p>\n<pre><code>这是一个代码块，此行左侧有四个不可见的空格。\n</code></pre>\n<h3 id=\"9-插入图像\"><a href=\"#9-插入图像\" class=\"headerlink\" title=\"9.  插入图像\"></a>9.  插入图像</h3><p>使用 ![描述](图片链接地址) 插入图像。</p>\n<p>示例：</p>\n<p><img src=\"https://www.zybuluo.com/static/img/my_head.jpg\" alt=\"我的头像\"></p>\n<h1 id=\"Cmd-Markdown-高阶语法手册\"><a href=\"#Cmd-Markdown-高阶语法手册\" class=\"headerlink\" title=\"Cmd Markdown 高阶语法手册\"></a>Cmd Markdown 高阶语法手册</h1><h3 id=\"1-内容目录\"><a href=\"#1-内容目录\" class=\"headerlink\" title=\"1. 内容目录\"></a>1. 内容目录</h3><p>在段落中填写 <code>[TOC]</code> 以显示全文内容的目录结构。</p>\n<p>[TOC]</p>\n<h3 id=\"2-标签分类\"><a href=\"#2-标签分类\" class=\"headerlink\" title=\"2. 标签分类\"></a>2. 标签分类</h3><p>在编辑区任意行的列首位置输入以下代码给文稿标签：</p>\n<p>标签： 数学 英语 Markdown</p>\n<p>或者</p>\n<p>Tags： 数学 英语 Markdown</p>\n<h3 id=\"3-删除线\"><a href=\"#3-删除线\" class=\"headerlink\" title=\"3. 删除线\"></a>3. 删除线</h3><p>使用 ~~ 表示删除线。</p>\n<p><del>这是一段错误的文本。</del></p>\n<h3 id=\"4-注脚\"><a href=\"#4-注脚\" class=\"headerlink\" title=\"4. 注脚\"></a>4. 注脚</h3><p>使用 [^keyword] 表示注脚。</p>\n<p>这是一个注脚[^footnote]的样例。</p>\n<p>这是第二个注脚[^footnote2]的样例。</p>\n<h3 id=\"5-LaTeX-公式\"><a href=\"#5-LaTeX-公式\" class=\"headerlink\" title=\"5. LaTeX 公式\"></a>5. LaTeX 公式</h3><p>$ 表示行内公式： </p>\n<p>质能守恒方程可以用一个很简洁的方程式 $E=mc^2$ 来表达。</p>\n<p>$$ 表示整行公式：</p>\n<p>$$\\sum_{i=1}^n a_i=0$$</p>\n<p>$$f(x_1,x_x,\\ldots,x_n) = x_1^2 + x_2^2 + \\cdots + x_n^2 $$</p>\n<p>$$\\sum^{j-1}<em>{k=0}{\\widehat{\\gamma}</em>{kj} z_k}$$</p>\n<p>访问 <a href=\"http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference\">MathJax</a> 参考更多使用方法。</p>\n<h3 id=\"6-加强的代码块\"><a href=\"#6-加强的代码块\" class=\"headerlink\" title=\"6. 加强的代码块\"></a>6. 加强的代码块</h3><p>支持四十一种编程语言的语法高亮的显示，行号显示。</p>\n<p>非代码示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install vim-gnome</span><br></pre></td></tr></table></figure>\n\n<p>Python 示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@requires_authorization</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">somefunc</span>(<span class=\"params\">param1=<span class=\"string\">&#x27;&#x27;</span>, param2=<span class=\"number\">0</span></span>):</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;A docstring&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> param1 &gt; param2: <span class=\"comment\"># interesting</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span> <span class=\"string\">&#x27;Greater&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (param2 - param1 + <span class=\"number\">1</span>) <span class=\"keyword\">or</span> <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SomeClass</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>message = <span class=\"string\">&#x27;&#x27;&#x27;interpreter</span></span><br><span class=\"line\"><span class=\"string\"><span class=\"meta\">... </span>prompt&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>JavaScript 示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* nth element in the fibonacci series.</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param </span>n &gt;= 0</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@return </span>the nth element, &gt;= 0.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fib</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">1</span>, b = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> tmp;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (--n &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    tmp = a;</span><br><span class=\"line\">    a += b;</span><br><span class=\"line\">    b = tmp;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(fib(<span class=\"number\">10</span>));</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-流程图\"><a href=\"#7-流程图\" class=\"headerlink\" title=\"7. 流程图\"></a>7. 流程图</h3><h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">st&#x3D;&gt;start: Start:&gt;https:&#x2F;&#x2F;www.zybuluo.com</span><br><span class=\"line\">io&#x3D;&gt;inputoutput: verification</span><br><span class=\"line\">op&#x3D;&gt;operation: Your Operation</span><br><span class=\"line\">cond&#x3D;&gt;condition: Yes or No?</span><br><span class=\"line\">sub&#x3D;&gt;subroutine: Your Subroutine</span><br><span class=\"line\">e&#x3D;&gt;end</span><br><span class=\"line\"></span><br><span class=\"line\">st-&gt;io-&gt;op-&gt;cond</span><br><span class=\"line\">cond(yes)-&gt;e</span><br><span class=\"line\">cond(no)-&gt;sub-&gt;io</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"更多语法参考：流程图语法参考\"><a href=\"#更多语法参考：流程图语法参考\" class=\"headerlink\" title=\"更多语法参考：流程图语法参考\"></a>更多语法参考：<a href=\"http://adrai.github.io/flowchart.js/\">流程图语法参考</a></h4><h3 id=\"8-序列图\"><a href=\"#8-序列图\" class=\"headerlink\" title=\"8. 序列图\"></a>8. 序列图</h3><h4 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例 1\"></a>示例 1</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Alice-&gt;Bob: Hello Bob, how are you?</span><br><span class=\"line\">Note right of Bob: Bob thinks</span><br><span class=\"line\">Bob--&gt;Alice: I am good thanks!</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"示例-2\"><a href=\"#示例-2\" class=\"headerlink\" title=\"示例 2\"></a>示例 2</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Title: Here is a title</span><br><span class=\"line\">A-&gt;B: Normal line</span><br><span class=\"line\">B--&gt;C: Dashed line</span><br><span class=\"line\">C-&gt;&gt;D: Open arrow</span><br><span class=\"line\">D--&gt;&gt;A: Dashed open arrow</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"更多语法参考：序列图语法参考\"><a href=\"#更多语法参考：序列图语法参考\" class=\"headerlink\" title=\"更多语法参考：序列图语法参考\"></a>更多语法参考：<a href=\"http://bramp.github.io/js-sequence-diagrams/\">序列图语法参考</a></h4><h3 id=\"9-甘特图\"><a href=\"#9-甘特图\" class=\"headerlink\" title=\"9. 甘特图\"></a>9. 甘特图</h3><p>甘特图内在思想简单。基本是一条线条图，横轴表示时间，纵轴表示活动（项目），线条表示在整个期间上计划和实际的活动完成情况。它直观地表明任务计划在什么时候进行，及实际进展与计划要求的对比。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title 项目开发流程</span><br><span class=\"line\">section 项目确定</span><br><span class=\"line\">    需求分析       :a1, 2016-06-22, 3d</span><br><span class=\"line\">    可行性报告     :after a1, 5d</span><br><span class=\"line\">    概念验证       : 5d</span><br><span class=\"line\">section 项目实施</span><br><span class=\"line\">    概要设计      :2016-07-05  , 5d</span><br><span class=\"line\">    详细设计      :2016-07-08, 10d</span><br><span class=\"line\">    编码          :2016-07-15, 10d</span><br><span class=\"line\">    测试          :2016-07-22, 5d</span><br><span class=\"line\">section 发布验收</span><br><span class=\"line\">    发布: 2d</span><br><span class=\"line\">    验收: 3d</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"更多语法参考：甘特图语法参考\"><a href=\"#更多语法参考：甘特图语法参考\" class=\"headerlink\" title=\"更多语法参考：甘特图语法参考\"></a>更多语法参考：<a href=\"https://knsv.github.io/mermaid/#gant-diagrams\">甘特图语法参考</a></h4><h3 id=\"10-Mermaid-流程图\"><a href=\"#10-Mermaid-流程图\" class=\"headerlink\" title=\"10. Mermaid 流程图\"></a>10. Mermaid 流程图</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A[Hard edge] --&gt;|Link text| B(Round edge)</span><br><span class=\"line\">B --&gt; C&#123;Decision&#125;</span><br><span class=\"line\">C --&gt;|One| D[Result one]</span><br><span class=\"line\">C --&gt;|Two| E[Result two]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"更多语法参考：Mermaid-流程图语法参考\"><a href=\"#更多语法参考：Mermaid-流程图语法参考\" class=\"headerlink\" title=\"更多语法参考：Mermaid 流程图语法参考\"></a>更多语法参考：<a href=\"https://knsv.github.io/mermaid/#flowcharts-basic-syntax\">Mermaid 流程图语法参考</a></h4><h3 id=\"11-Mermaid-序列图\"><a href=\"#11-Mermaid-序列图\" class=\"headerlink\" title=\"11. Mermaid 序列图\"></a>11. Mermaid 序列图</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Alice-&gt;John: Hello John, how are you?</span><br><span class=\"line\">loop every minute</span><br><span class=\"line\">    John--&gt;Alice: Great!</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"更多语法参考：Mermaid-序列图语法参考\"><a href=\"#更多语法参考：Mermaid-序列图语法参考\" class=\"headerlink\" title=\"更多语法参考：Mermaid 序列图语法参考\"></a>更多语法参考：<a href=\"https://knsv.github.io/mermaid/#sequence-diagrams\">Mermaid 序列图语法参考</a></h4><h3 id=\"12-表格支持\"><a href=\"#12-表格支持\" class=\"headerlink\" title=\"12. 表格支持\"></a>12. 表格支持</h3><table>\n<thead>\n<tr>\n<th>项目</th>\n<th align=\"right\">价格</th>\n<th align=\"center\">数量</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>计算机</td>\n<td align=\"right\">$1600</td>\n<td align=\"center\">5</td>\n</tr>\n<tr>\n<td>手机</td>\n<td align=\"right\">$12</td>\n<td align=\"center\">12</td>\n</tr>\n<tr>\n<td>管线</td>\n<td align=\"right\">$1</td>\n<td align=\"center\">234</td>\n</tr>\n</tbody></table>\n<h3 id=\"13-定义型列表\"><a href=\"#13-定义型列表\" class=\"headerlink\" title=\"13. 定义型列表\"></a>13. 定义型列表</h3><dl><dt>名词 1</dt><dd>定义 1（左侧有一个可见的冒号和四个不可见的空格）</dd></dl><dl><dt>代码块 2</dt><dd>这是代码块的定义（左侧有一个可见的冒号和四个不可见的空格）</dd></dl><pre><code>    代码块（左侧有八个不可见的空格）\n</code></pre>\n<h3 id=\"14-Html-标签\"><a href=\"#14-Html-标签\" class=\"headerlink\" title=\"14. Html 标签\"></a>14. Html 标签</h3><p>本站支持在 Markdown 语法中嵌套 Html 标签，譬如，你可以用 Html 写一个纵跨两行的表格：</p>\n<pre><code>&lt;table&gt;\n    &lt;tr&gt;\n        &lt;th rowspan=&quot;2&quot;&gt;值班人员&lt;/th&gt;\n        &lt;th&gt;星期一&lt;/th&gt;\n        &lt;th&gt;星期二&lt;/th&gt;\n        &lt;th&gt;星期三&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n        &lt;td&gt;李强&lt;/td&gt;\n        &lt;td&gt;张明&lt;/td&gt;\n        &lt;td&gt;王平&lt;/td&gt;\n    &lt;/tr&gt;\n&lt;/table&gt;\n</code></pre>\n<table>\n    <tr>\n        <th rowspan=\"2\">值班人员</th>\n        <th>星期一</th>\n        <th>星期二</th>\n        <th>星期三</th>\n    </tr>\n    <tr>\n        <td>李强</td>\n        <td>张明</td>\n        <td>王平</td>\n    </tr>\n</table>\n\n<h3 id=\"15-内嵌图标\"><a href=\"#15-内嵌图标\" class=\"headerlink\" title=\"15. 内嵌图标\"></a>15. 内嵌图标</h3><p>本站的图标系统对外开放，在文档中输入</p>\n<pre><code>&lt;i class=&quot;icon-weibo&quot;&gt;&lt;/i&gt;\n</code></pre>\n<p>即显示微博的图标： <i class=\"icon-weibo icon-2x\"></i></p>\n<p>替换 上述 <code>i 标签</code> 内的 <code>icon-weibo</code> 以显示不同的图标，例如：</p>\n<pre><code>&lt;i class=&quot;icon-renren&quot;&gt;&lt;/i&gt;\n</code></pre>\n<p>即显示人人的图标： <i class=\"icon-renren icon-2x\"></i></p>\n<p>更多的图标和玩法可以参看 <a href=\"http://fortawesome.github.io/Font-Awesome/3.2.1/icons/\">font-awesome</a> 官方网站。</p>\n<h3 id=\"16-待办事宜-Todo-列表\"><a href=\"#16-待办事宜-Todo-列表\" class=\"headerlink\" title=\"16. 待办事宜 Todo 列表\"></a>16. 待办事宜 Todo 列表</h3><p>使用带有 [ ] 或 [x] （未完成或已完成）项的列表语法撰写一个待办事宜列表，并且支持子列表嵌套以及混用Markdown语法，例如：</p>\n<pre><code>- [ ] **Cmd Markdown 开发**\n    - [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率\n    - [ ] 支持以 PDF 格式导出文稿\n    - [x] 新增Todo列表功能 [语法参考](https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments)\n    - [x] 改进 LaTex 功能\n        - [x] 修复 LaTex 公式渲染问题\n        - [x] 新增 LaTex 公式编号功能 [语法参考](http://docs.mathjax.org/en/latest/tex.html#tex-eq-numbers)\n- [ ] **七月旅行准备**\n    - [ ] 准备邮轮上需要携带的物品\n    - [ ] 浏览日本免税店的物品\n    - [x] 购买蓝宝石公主号七月一日的船票\n    \n</code></pre>\n<p>对应显示如下待办事宜 Todo 列表：</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> <strong>Cmd Markdown 开发</strong><ul>\n<li><input disabled=\"\" type=\"checkbox\"> 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率</li>\n<li><input disabled=\"\" type=\"checkbox\"> 支持以 PDF 格式导出文稿</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 新增Todo列表功能 <a href=\"https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments\">语法参考</a></li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 改进 LaTex 功能<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 修复 LaTex 公式渲染问题</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 新增 LaTex 公式编号功能 <a href=\"http://docs.mathjax.org/en/latest/tex.html#tex-eq-numbers\">语法参考</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> <strong>七月旅行准备</strong><ul>\n<li><input disabled=\"\" type=\"checkbox\"> 准备邮轮上需要携带的物品</li>\n<li><input disabled=\"\" type=\"checkbox\"> 浏览日本免税店的物品</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 购买蓝宝石公主号七月一日的船票[^footnote]: 这是一个 <em>注脚</em> 的 <strong>文本</strong>。</li>\n</ul>\n</li>\n</ul>\n<p>[^footnote2]: 这是另一个 <em>注脚</em> 的 <strong>文本</strong>。</p>"},{"title":"Ayer中文说明","date":"2019-12-03T05:26:02.000Z","id":"ayer","top":2,"_content":"\n\n# 介绍\n\n> [Ayer](https://github.com/Shen-Yu/hexo-theme-ayer) 是一个干净且优雅的 Hexo 主题，自带响应式，加载速度很快，该有的功能都有，可配置项很多，非常适合作为你的博客主题，主题内还附送了6张精美的高清壁纸。欢迎使用和 Star 支持，如果你在使用过程中有任何疑问或者建议，欢迎联系我！如果你的博客采用了本主题，欢迎在下面评论区留下地址~\n\n[Ayer](https://github.com/Shen-Yu/hexo-theme-ayer) 在马来语中是“水”的意思，在西班牙语中是“昨天”的意思。\n\n![hexo-theme-ayer](https://cdn.jsdelivr.net/gh/Shen-Yu/cdn/picgo/ayer.jpg)\n\n[GitHub地址](https://github.com/Shen-Yu/hexo-theme-ayer)\n\n[国内镜像](https://gitee.com/shen-yu/hexo-theme-ayer)\n\n[效果预览](https://shen-yu.gitee.io)\n\n[中文说明](https://shen-yu.gitee.io/2019/ayer/)\n\n<!-- more -->\n\n# 特性\n\n1. 干净且优雅，文章内容美观易读\n1. 首页封面全屏平铺，扁平化设计，简洁又不失高大上\n1. 响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现\n1. 首页封面和文案可以任意更换，主题内附送 6 张精美高清壁纸\n1. 时间轴式的归档页\n1. 支持 `黑夜阅读` 模式\n1. 侧边栏可以点击显示或隐藏\n1. 支持文章置顶和文章打赏\n1. 支持文章字数和阅读时长统计\n1. 支持网易云音乐播放\n1. 支持 `MathJax` 和 `Katex` 数学公式\n1. `TOC` 目录在文章页悬浮，跳转更方便\n1. 可设置阅读文章时做密码验证[hexo-blog-encrypt](https://github.com/MikeCoder/hexo-blog-encrypt/blob/master/ReadMe.zh.md)\n1. [Valine](https://valine.js.org/)和[Gitalk](https://gitalk.github.io/)评论模块（推荐配合`leancloud`使用 `Valine`）\n1. 集成了[不蒜子](http://busuanzi.ibruce.info/)、百度统计、Google Analytics、CNZZ等统计功能\n1. 支持 Github Ribbons\n\n\n如果想体验手机端浏览效果，可以扫一下二维码：\n\n![手机端效果](https://cdn.jsdelivr.net/gh/Shen-Yu/cdn/picgo/mobile_ayer.jpg)\n\n# 多语言支持\n`zh-CN（简体中文）` ; `en（English）` ; `zh-TW（繁體中文）` ; `ja（Japanese）` ; `es（Spanish）` ; `de（German）` ; `fr（French）` ; `ru（Russian）` ; `ko（Korean）` ; `vi（Vietnamese）` ; `nl（Dutch）` ; `no（Norwegian）` ; `pt（Portuguese）` \n\nHexo 默认语言为英语（en），请参照上表修改 Hexo 博客目录下的 `_config.yml` 文件中 `language:` 的值（第 11 行）。\n\n# 支持\n\n根据 [Ayer 主题的开源许可证](https://github.com/Shen-Yu/hexo-theme-ayer/blob/master/LICENSE)，只要你进 [项目主页](https://github.com/Shen-Yu/hexo-theme-ayer) 给这个主题右上角点一个 Star 并且不抹掉页脚的主题仓库链接就可以任意修改使用该主题了。\n\n<!-- 此主题完全开源且免费，目前由我一个人维护，如果你觉得主题不错，可以选择适当打赏我，不在于金额多少，而是能让我更有动力去维护这个主题。打赏请备注说明，谢谢~\n\n<div style=\"width:100%;text-align:center;font-weight:bold\">\n<span style=\"width:30%;display:inline-block\">\n微信\n<img src=\"https://cdn.jsdelivr.net/gh/Shen-Yu/cdn/picgo/wechatpay.png\" alt=\"wechat\" style=\"width:100%\"></span>\n<span style=\"width:30%;;display:inline-block\">\n支付宝\n<img src=\"https://cdn.jsdelivr.net/gh/Shen-Yu/cdn/picgo/alipay.jpg\" alt=\"alipay\" style=\"width:100%\"></span>\n</div> -->\n\n如果你不懂技术，希望我帮忙从零搭建一个类似的网站或者有其他技术类需求，我也愿意提供有偿服务，我的QQ：448766534\n\n# 安装\n\n**方法一：**\n\n``` bash\n# 国内用户如果速度较慢，可以把github地址替换为：https://gitee.com/mirrors/ayer.git\ngit clone https://github.com/Shen-Yu/hexo-theme-ayer.git themes/ayer\n```\n\n**方法二（hexo >= 5.0）：**\n\n``` bash\nnpm i hexo-theme-ayer -S\n```\n\n- 如果是新安装本主题，安装完成后会在根目录生成一个`_config.ayer.yml`文件，直接编辑`_config.ayer.yml`文件进行配置即可。\n- 如果是主题升级，可以使用方法一，也可以将原来的配置文件移动到根目录，并重命名为`_config.ayer.yml`。\n\n# 修改\n\n将博客根目录下的 `_config.yml` 里的 `theme` 值修改成 `ayer`\n\n``` yml\ntheme: ayer\n```\n\n# 更新\n\n更新主题可能会覆盖你之前改动过的 config 文件，建议先把 `config.yml` 里的配置备份一下，然后删掉 ayer 目录后重新 `git clone` 下载主题，再把配置复制进去。\n\n``` bash\ncd themes/ayer\ngit pull\n```\n\n如果你是用方法二的 npm 安装本主题，那么在根目录执行以下命令就可更新。\n\n``` bash\nnpm update hexo-theme-ayer -S\n```\n\n# 主题配置\n\n以下是 ayer 主题目录下的 `_config.yml` 文件配置，如果你是用方法二的 npm 安装，那么在 Hexo 博客目录下的 `_config.ayer.yml` 配置就行，注意别把 Hexo 的配置文件和主题的配置文件搞混。另外，请先确保你已经读过 [Hexo 文档](https://hexo.io/zh-cn/docs/)。如果你在配置过程中有问题，请先擅用 [搜索引擎](https://cn.bing.com)。如果你搜不到解决方法，你可以参考：[我的博客源码](https://gitee.com/shen-yu/shen-yu/tree/dev/)，按照我的一模一样配肯定是不会有问题的。如果对部分字体或颜色等有定制需求，请自行在 css 文件进行修改，主题本身已经很符合审美，自定义配置项也很多，不建议改得花里胡哨，过大的字体和库都会影响博客加载速度。如果还有问题或者建议，那么请在评论区给我留言~\n\n``` yml\n# 侧边栏菜单\nmenu:\n  主页: /\n  归档: /archives\n  分类: /categories\n  标签: /tags\n  摄影: http://shenyu-vip.lofter.com\n  旅行: /tags/旅行/\n  关于我: /2019/about\n\n# 站点次标题和打字动效\n# https://github.com/mattboldt/typed.js\nsubtitle:\n  enable: true  # 是否开启动效\n  text: 面朝大海，春暖花开  # 显示的文字\n  text2: 愿你一生努力，一生被爱   # 滚动播放，如果不需要可以留空\n  text3: 想要的都拥有，得不到的都释怀  # 最多支持三段文字\n  startDelay: 0   # 延迟时间\n  typeSpeed: 200  # 打字速度\n  loop: true  # 是否循环\n  backSpeed: 100  # 回退速度\n  showCursor: true  # 是否显示光标\n\n# 网站图标和侧边栏logo\nfavicon: /favicon.ico\nlogo: /images/ayer-side.svg\n\n# 封面配置\n# enable-是否启用封面；path-封面背景图；logo-封面logo\ncover:\n  enable: true\n  path: /images/cover1.jpg  # /source/images目录下附送多张精美壁纸，可任意更换\n  logo: /images/ayer.svg  # 如果不要直接设置成false\n\n# 页面顶部进度条  \nprogressBar: true\n\n# 告示板模块\nbroadcast:\n  enable: true # true开启，false关闭\n  type: 2 # 1：自定义输入，2：一言api(https://hitokoto.cn/)\n  text: 一个安静优雅的hexo主题，快速且响应式。 # type为1时有效\n\n# 文章配置\n# 文章太长，截断按钮文字(在需要截断的行增加此标记：<!--more-->)\nexcerpt_link: 阅读更多...\n# 如果你嫌每篇文章手动加more标记比较麻烦，又不想在首页全文显示，可以把excerpt_all设置成true，这样首页只会显示文章归档\nexcerpt_all: false\n\n# 是否开启代码复制按钮\ncopy_btn: true\n# 是否开启文章分享按钮\nshare_enable: true\n# 国内的社交平台(If you are not in China, maybe you prefer to set:false)\nshare_china: true\n# 文章分享文字\nshare_text: 分享\n\n# 分页文字\nnav_text:\n  page_prev: 上一页\n  page_next: 下一页\n  post_prev: 上一篇\n  post_next: 下一篇\n\n# 文章页是否显示目录\ntoc: true\n\n# 文章中的图片是否支持点击放大\nimage_viewer: true\n\n# https://github.com/willin/hexo-wordcount\n# 是否开启字数统计(关闭请设置enable为false)\n# 也可以单独在md文件里Front-matter设置`no_word_count: true`属性，来自定义关闭字数统计\nword_count:\n  enable: true\n  # 只在文章详情显示(不在首页显示)\n  only_article_visit: true\n\n# 打赏\n# 打赏type设定：0-关闭打赏； 1-文章对应的md文件里有reward:true属性，才有打赏； 2-默认开启所有文章均有打赏，如果有些文章你不需要，请在文章对应的md文件里设置no_reward:true\nreward_type: 2\n# 打赏wording\nreward_wording: '请我喝杯咖啡吧~'\n# 支付宝二维码图片地址，跟你设置logo的方式一样。比如：/images/alipay.jpg\nalipay: /images/alipay.jpg\n# 微信二维码图片地址\nweixin: /images/wechat.jpg\n\n# 版权声明\n# 版权声明type设定：0-关闭版权声明； 1-文章对应的md文件里有copyright: true属性，才有版权声明； 2-所有文章均有版权声明\ncopyright_type: 2\n\n# 是否启用搜索\nsearch: true\n\n# RSS订阅(先安装hexo-generator-feed插件，再去博客根目录config进行配置)\n# 不想显示可以直接留空\nrss: /atom.xml\n\n# 是否启用黑夜模式开关\ndarkmode: true\n\n# 动态背景效果: 0-关闭，1-动态线条(跟随鼠标)\ncanvas_bg: 0\n\n# 自定义鼠标样式，直接替换/images/mouse.cur文件\nmouse:\n  enable: false\n  path: /images/mouse.cur\n\n# 鼠标点击效果：0-关闭，1-爱心，2-爆炸烟花，3-粒子烟花\nclick_effect: 0\n\n# 页面宽度自定义（不建议修改，可能造成布局混乱），article_width文章宽度，sidebar_width侧边栏宽度\nlayout:\n  article_width: 80rem\n  sidebar_width: 8rem\n  \n# GitHub Ribbons-封面右上角的forkme，换样式直接在source/images目录下替换forkme图片\ngithub: \n  # (关闭请设置为false)\n  enable: true\n  url: https://github.com/Shen-Yu/hexo-theme-ayer\n\n# 网易云音乐插件\nmusic:\n  enable: false\n  # 播放器尺寸类型(1：小尺寸、2：大尺寸)\n  type: 1\n  id: 22707008  # 网易云分享的音乐ID(更换音乐请更改此配置项)\n  autoPlay: true  # 是否开启自动播放\n\n# 访问量统计(不蒜子)\nbusuanzi:\n  enable: true\n\n# 友盟cnzz统计(url填js代码src链接)\ncnzz:\n  enable: true\n  url: #\n\n# Google Analytics\ngoogle_analytics: ''\n# 百度统计\nbaidu_analytics: ''\n\n# Mathjax数学公式\nmathjax: true\n\n# Katex数学公式(allpost设置为false时只有头部设置math:true的文章才开启)\n# 需要更换hexo渲染器，npm un hexo-renderer-marked -S && npm i hexo-renderer-markdown-it-katex -S\nkatex:\n  enable: false # true\n  allpost: true\n  copy_tex: false\n\n# 网站成立年份(默认为 2019，若填入年份小于当前年份，则显示为 2018-2019 类似的格式)\nsince: 2019\n\n# 是否显示页脚信息(建议保留，有助于本主题的推广)\npageFooter: true\n\n# ICP备案信息尾部显示\nicp:\n  enable: false\n  url: 'http://www.beian.miit.gov.cn/' # 备案链接\n  text: '浙ICP备88888888' # 备案信息\n# 公安备案信息尾部显示\ngongan:\n  enable: true\n  img: /images/beian.png #公安备案图片\n  url: \"http://www.beian.gov.cn/portal/registerSystemInfo?recordcode=01234567890123\" #公安备案链接\n  text: \"浙公网安备01234567890123号\" #公安备案信息\n\n# 友情链接\nfriends_link:\n  Ayer主题: #网站名称\n    #网站地址\n    url: https://github.com/Shen-Yu/hexo-theme-ayer\n    #网站图片(可忽略不写)\n    img: /images/ayer.png\n  GitHub:\n    url: https://github.com/Shen-Yu\n    img: https://i.loli.net/2020/09/07/indb4PRYDA98EkN.png\n  码云:\n    url: https://gitee.com/shen-yu\n    img: https://i.loli.net/2020/09/07/K3AqO7h6krQFlRX.png\n  Hexo官网:\n    url: https://hexo.io\n    img: https://i.loli.net/2020/09/07/UYGzjo7h68CRWny.png\n  Hexo图表插件:\n    url: https://github.com/Shen-Yu/hexo-tag-chart\n    img: https://i.loli.net/2020/09/07/GIXBYE5SoylhR1r.png\n\n# 评论：1、Valine(推荐)；2、Gitalk；3、Twikoo; 4.MiniValine\n\n# 1、Valine[一款快速、简洁且高效的无后端评论系统](https://github.com/xCss/Valine)\n# 启用Valine必须先创建leancloud应用， 获取 id|key 填入即可\nleancloud:\n  enable: true\n  app_id: #\n  app_key: #\n# Valine配置\nvaline:\n  enable: true # 是否启用\n  avatar: monsterid # 头像样式(https://valine.js.org/avatar.html)\n  placeholder: 给我的文章加点评论吧~ # placeholder\n\n# 2、Gitalk(https://github.com/gitalk/gitalk)\ngitalk:\n  enable: false # true\n  clientID: # GitHub Application Client ID\n  clientSecret: # Client Secret\n  repo: # Repository name\n  owner: # GitHub ID\n  admin: # GitHub ID\n\n# 3、Twikoo(https://github.com/imaegoo/twikoo)\ntwikoo:\n  enable: false\n  envId: #\n\n# 4、MiniValine\n# See: https://github.com/MiniValine/MiniValine\nminivaline:\n  enable: false\n  md: true\n  # 更多选项 https://minivaline.js.org/docs/cn/#/Options 按照yml格式继续填写即可 （除了 [el] 选项）  \n  # emoticonUrl 等列表选项 可参考 https://github.com/MiniValine/hexo-next-minivaline\n  # 下面是一个例子：\n  backend: waline\n  serverURL: https://waline.vercel.app\n\n# 首页广告配置\n# 可以根据需要自行增加ad_3，ad_4...，留空则不显示\nads:\n  ad_1:\n    title: 腾讯云限时秒杀\n    img: https://cdn.jsdelivr.net/gh/Shen-Yu/cdn/img/ad_1.jpg\n    url: https://curl.qcloud.com/ezctH6FU\n    width: 300\n  ad_2:\n    title: 云服务器全球购低至2折\n    img: https://cdn.jsdelivr.net/gh/Shen-Yu/cdn/img/ad_2.jpg\n    url: https://curl.qcloud.com/kvO7hb43\n    width: 300\n```\n\n\n## 插件(必需)\n\n+ [hexo-generator-searchdb](https://github.com/theme-next/hexo-generator-searchdb) 用于搜索\n\t\n  ```yml\n  npm install hexo-generator-searchdb --save\n  ```\n  然后将以下配置复制到你博客根目录下的 `_config.yml` 里（注意不是ayer目录下的）:\n  \n  ```yml\n  # hexo-generator-searchdb\n  search:\n    path: search.xml\n    field: post\n    format: html\n  ```\n\n+ [hexo-generator-feed](https://github.com/hexojs/hexo-generator-feed) 用于生成RSS订阅\n\n  ```yml\n  npm install hexo-generator-feed --save\n  ```\n  \n    然后将以下配置复制到你博客根目录下的 `_config.yml` 里（注意不是ayer目录下的）:\n  \n  ```yml\n  feed:\n      type: atom\n      path: atom.xml\n      limit: 20\n      hub:\n      content:\n      content_limit: 140\n      content_limit_delim: ' '\n      order_by: -date\t\n  ```\n\n## 插件(可选)\n\n+ [hexo-generator-index-pin-top](https://github.com/netcan/hexo-generator-index-pin-top) 用于文章置顶\n\n+ [hexo-blog-encrypt](https://github.com/MikeCoder/hexo-blog-encrypt/blob/master/ReadMe.zh.md) 用于文章加密\n\n+ [hexo-tag-aplayer](https://github.com/MoePlayer/hexo-tag-aplayer/blob/master/docs/README-zh_cn.md) 用于播放音乐\n\n+ [hexo-tag-dplayer](https://github.com/MoePlayer/hexo-tag-dplayer) 用于播放视频\n\n+ [hexo-helper-live2d](https://github.com/EYHN/hexo-helper-live2d/blob/master/README.zh-CN.md) 二次元看板娘\n\n更多插件请见 [hexo插件市场](https://hexo.io/plugins/)\n\n## 分类\n``` bash\n  hexo new page categories\n```\n然后将以下复制到 /source/categories/index.md 文件\n``` md\n---\ntitle: categories\ntype: \"categories\"\nlayout: \"categories\"\n---\n```\n\n## 标签\n``` bash\n  hexo new page tags\n```\n配置同分类一样\n\n## 友情链接\n``` bash\nhexo new page friends\n```\n然后将以下复制到 /source/friends/index.md 文件\n``` md\n---\ntitle: friends\ntype: friends\nlayout: \"friends\"\n---\n```\n然后在 ayer 主题目录下的 `_config.yml` 中自定义 `friends_link` 配置项即可\n\n## 相册\n``` bash\n  hexo new page photos\n```\n然后将以下复制到 /source/photos/index.md 文件，`img_url` 替换成图片路径，`caption` 替换成图片名称\n\n``` md\n---\ntitle: Gallery\n\nalbums: [\n        [\"img_url\",\"img_caption\"],\n        [\"img_url\",\"img_caption\"]\n        ]\n---\n```\n\n## 文章目录\n\n用 Tocbot 解析文章标题并生成目录\n\n+ 将以下配置复制到你 ayer 主题目录下的 `_config.yml` 里：\n\n``` bash\n# Toc\ntoc: true\n```\n+ 当然你可能并不想所有文章都生成悬浮目录，你可以在文章顶部的配置中加一行来进行关闭：\n\n``` md\n---\nno_toc: true\n---\n```\n\n---\n\n# 常见问题\n\n## 一.本地图片引用了却无法显示\n\n> 插入图片的两种方法：\n1. 引用图床\n2. 引用本地图片。为了防止路径出错，建议使用图床。\n\n### 1.图床\n推荐使用：[SM.MS](https://sm.ms/)，[聚合图床](https://www.superbed.cn/)\n\n### 2.本地图片\n参照 [Hexo文档](https://hexo.io/zh-cn/docs/asset-folders)，然后用这种方式引用图片：\n``` md\n{% asset_img image.jpg [title] %}\n```\n\n*html引用图片*\n根据width and height来调整图片的大小\n```\n<img src=\"https://img.imgdb.cn/item/60431c61360785be54872edf\" width=256 height=256 />\n```\n\n\n如果还是无法显示，请尝试在文章里用 html 的 img 标签来引用本地图片。\n\n\n## 二.可以启动但是样式变形了\n\n这很可能是因为你把博客部署到了服务器子目录，导致静态资源加载的路径不对，在此强烈建议你部署到根目录，github和码云都支持根目录部署，只要你把仓库名搞成和用户名一样就行了。\n\n## 三.点击侧边栏页面无法显示\n\n原因：ayer 主题目录下的 `config.yml` 里 menu 属性的路径不对，这需要你根据页面路径手动配置。\n\n\n以我的博客为例：\n\n```yaml\nmenu:\n  主页: /\n  归档: /archives\n  分类: /categories\n  标签: /tags\n  旅行: /tags/旅行/\n  摄影: http://shenyu-vip.lofter.com\n  关于我: /2019/about\n```\n\n上面的 `归档/archives` 是固定的，你不需要修改，`标签`和`分类`都需要手动创建目录，`旅行`实际上就是一个标签页，当你在文章头部设置tags属性后就会自动生成，`摄影`是一个站外的绝对路径，`关于我`实际上就是一个正常的文章页。好了，现在一个侧边栏导航就已经配置好了。\n\n## 四.为什么修改了配置却没有效果\n\n建议每次生成站点或部署之前都用 `hexo clean` 命令清理一下缓存，请使用 Ctrl + F5 清除缓存并刷新页面。\n\n## 五.怎么修改大标题和站点信息\n\n参考 [Hexo 文档](https://hexo.io/zh-cn/docs/configuration)\n\n站点配置文件 `_config.yml` 是 Hexo 站点根目录下的主配置文件（还不知道是哪里的，自己搜索），注意：别和 `ayer` 主题目录下的 `_config.yml` 搞混了。\n\n修改网站各种资料，例如标题、副标题和邮箱等个人资料，请修改 Hexo 博客目录下的 `_config.yml`\n\n以我的博客为例：\n![](https://pic.downk.cc/item/5e75c69c9d7d586a54cf119d.jpg)\n\n## 六.怎么添加百度或谷歌统计\n\n### 百度统计\n\n参考这里：[百度统计代码介绍](https://tongji.baidu.com/web/help/article?id=174&type=0&castk=LTE%3D)\n\n在 ayer 的 config 配置里的 `baidu_analytics` 填上百度统计代码中的 `hm.js?` 后面那一串东西\n\n### 谷歌统计\n\n参考这里：[Get started with Google Analytics](https://support.google.com/analytics/answer/1008015?hl=en)\n\n在 ayer 的 config 配置里的 `google_analytics` 填上谷歌统计代码的跟踪 ID，即 UA 值(包含 UA)\n\n## 七.怎么查看文章的访问量\n\n在 ayer 的 config 配置里有 `busuanzi` 选项，默认设置为 `enable:true`，就开启了站点访问量的统计，站点尾部左下角的 `PV` 代表了当前页的访问次数，`UV` 代表了当前站点的访问人数。注意：不蒜子统计是根据当前域名来统计的，你在本地启动的时候由于是 localhost，所以数字会很大，部署到线上之后就会根据域名重新统计。\n\n## 八.网易云音乐无法播放\n\n这是由于网易云音乐对部分歌曲做了版权限制，你可以多换几首试试，配置文件里的默认歌曲 `潮鳴り` 是可以播放的。如果你动手能力强，也可以试试音乐播放插件 [hexo-tag-aplayer](https://github.com/MoePlayer/hexo-tag-aplayer/blob/master/docs/README-zh_cn.md)，配合`MetingJS`可以支持对于 QQ音乐、网易云、虾米、酷狗、百度等平台的音乐播放。\n\n## 九.分享链接无法打开\n\n你需要在 Hexo 博客目录下的 `_config.yml` 文件中把 url 配置成部署后的域名。\n\n## 十.怎么让搜索引擎收录站点\n\n参考：[Hexo站点SEO优化技巧](/2020/hexo-seo)","source":"_posts/Ayer中文说明.md","raw":"---\ntitle: Ayer中文说明\ndate: 2019-12-03 13:26:02\ntags: ['技术']\nid: ayer\ncategories: 技术\ntop: 2\n---\n\n\n# 介绍\n\n> [Ayer](https://github.com/Shen-Yu/hexo-theme-ayer) 是一个干净且优雅的 Hexo 主题，自带响应式，加载速度很快，该有的功能都有，可配置项很多，非常适合作为你的博客主题，主题内还附送了6张精美的高清壁纸。欢迎使用和 Star 支持，如果你在使用过程中有任何疑问或者建议，欢迎联系我！如果你的博客采用了本主题，欢迎在下面评论区留下地址~\n\n[Ayer](https://github.com/Shen-Yu/hexo-theme-ayer) 在马来语中是“水”的意思，在西班牙语中是“昨天”的意思。\n\n![hexo-theme-ayer](https://cdn.jsdelivr.net/gh/Shen-Yu/cdn/picgo/ayer.jpg)\n\n[GitHub地址](https://github.com/Shen-Yu/hexo-theme-ayer)\n\n[国内镜像](https://gitee.com/shen-yu/hexo-theme-ayer)\n\n[效果预览](https://shen-yu.gitee.io)\n\n[中文说明](https://shen-yu.gitee.io/2019/ayer/)\n\n<!-- more -->\n\n# 特性\n\n1. 干净且优雅，文章内容美观易读\n1. 首页封面全屏平铺，扁平化设计，简洁又不失高大上\n1. 响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现\n1. 首页封面和文案可以任意更换，主题内附送 6 张精美高清壁纸\n1. 时间轴式的归档页\n1. 支持 `黑夜阅读` 模式\n1. 侧边栏可以点击显示或隐藏\n1. 支持文章置顶和文章打赏\n1. 支持文章字数和阅读时长统计\n1. 支持网易云音乐播放\n1. 支持 `MathJax` 和 `Katex` 数学公式\n1. `TOC` 目录在文章页悬浮，跳转更方便\n1. 可设置阅读文章时做密码验证[hexo-blog-encrypt](https://github.com/MikeCoder/hexo-blog-encrypt/blob/master/ReadMe.zh.md)\n1. [Valine](https://valine.js.org/)和[Gitalk](https://gitalk.github.io/)评论模块（推荐配合`leancloud`使用 `Valine`）\n1. 集成了[不蒜子](http://busuanzi.ibruce.info/)、百度统计、Google Analytics、CNZZ等统计功能\n1. 支持 Github Ribbons\n\n\n如果想体验手机端浏览效果，可以扫一下二维码：\n\n![手机端效果](https://cdn.jsdelivr.net/gh/Shen-Yu/cdn/picgo/mobile_ayer.jpg)\n\n# 多语言支持\n`zh-CN（简体中文）` ; `en（English）` ; `zh-TW（繁體中文）` ; `ja（Japanese）` ; `es（Spanish）` ; `de（German）` ; `fr（French）` ; `ru（Russian）` ; `ko（Korean）` ; `vi（Vietnamese）` ; `nl（Dutch）` ; `no（Norwegian）` ; `pt（Portuguese）` \n\nHexo 默认语言为英语（en），请参照上表修改 Hexo 博客目录下的 `_config.yml` 文件中 `language:` 的值（第 11 行）。\n\n# 支持\n\n根据 [Ayer 主题的开源许可证](https://github.com/Shen-Yu/hexo-theme-ayer/blob/master/LICENSE)，只要你进 [项目主页](https://github.com/Shen-Yu/hexo-theme-ayer) 给这个主题右上角点一个 Star 并且不抹掉页脚的主题仓库链接就可以任意修改使用该主题了。\n\n<!-- 此主题完全开源且免费，目前由我一个人维护，如果你觉得主题不错，可以选择适当打赏我，不在于金额多少，而是能让我更有动力去维护这个主题。打赏请备注说明，谢谢~\n\n<div style=\"width:100%;text-align:center;font-weight:bold\">\n<span style=\"width:30%;display:inline-block\">\n微信\n<img src=\"https://cdn.jsdelivr.net/gh/Shen-Yu/cdn/picgo/wechatpay.png\" alt=\"wechat\" style=\"width:100%\"></span>\n<span style=\"width:30%;;display:inline-block\">\n支付宝\n<img src=\"https://cdn.jsdelivr.net/gh/Shen-Yu/cdn/picgo/alipay.jpg\" alt=\"alipay\" style=\"width:100%\"></span>\n</div> -->\n\n如果你不懂技术，希望我帮忙从零搭建一个类似的网站或者有其他技术类需求，我也愿意提供有偿服务，我的QQ：448766534\n\n# 安装\n\n**方法一：**\n\n``` bash\n# 国内用户如果速度较慢，可以把github地址替换为：https://gitee.com/mirrors/ayer.git\ngit clone https://github.com/Shen-Yu/hexo-theme-ayer.git themes/ayer\n```\n\n**方法二（hexo >= 5.0）：**\n\n``` bash\nnpm i hexo-theme-ayer -S\n```\n\n- 如果是新安装本主题，安装完成后会在根目录生成一个`_config.ayer.yml`文件，直接编辑`_config.ayer.yml`文件进行配置即可。\n- 如果是主题升级，可以使用方法一，也可以将原来的配置文件移动到根目录，并重命名为`_config.ayer.yml`。\n\n# 修改\n\n将博客根目录下的 `_config.yml` 里的 `theme` 值修改成 `ayer`\n\n``` yml\ntheme: ayer\n```\n\n# 更新\n\n更新主题可能会覆盖你之前改动过的 config 文件，建议先把 `config.yml` 里的配置备份一下，然后删掉 ayer 目录后重新 `git clone` 下载主题，再把配置复制进去。\n\n``` bash\ncd themes/ayer\ngit pull\n```\n\n如果你是用方法二的 npm 安装本主题，那么在根目录执行以下命令就可更新。\n\n``` bash\nnpm update hexo-theme-ayer -S\n```\n\n# 主题配置\n\n以下是 ayer 主题目录下的 `_config.yml` 文件配置，如果你是用方法二的 npm 安装，那么在 Hexo 博客目录下的 `_config.ayer.yml` 配置就行，注意别把 Hexo 的配置文件和主题的配置文件搞混。另外，请先确保你已经读过 [Hexo 文档](https://hexo.io/zh-cn/docs/)。如果你在配置过程中有问题，请先擅用 [搜索引擎](https://cn.bing.com)。如果你搜不到解决方法，你可以参考：[我的博客源码](https://gitee.com/shen-yu/shen-yu/tree/dev/)，按照我的一模一样配肯定是不会有问题的。如果对部分字体或颜色等有定制需求，请自行在 css 文件进行修改，主题本身已经很符合审美，自定义配置项也很多，不建议改得花里胡哨，过大的字体和库都会影响博客加载速度。如果还有问题或者建议，那么请在评论区给我留言~\n\n``` yml\n# 侧边栏菜单\nmenu:\n  主页: /\n  归档: /archives\n  分类: /categories\n  标签: /tags\n  摄影: http://shenyu-vip.lofter.com\n  旅行: /tags/旅行/\n  关于我: /2019/about\n\n# 站点次标题和打字动效\n# https://github.com/mattboldt/typed.js\nsubtitle:\n  enable: true  # 是否开启动效\n  text: 面朝大海，春暖花开  # 显示的文字\n  text2: 愿你一生努力，一生被爱   # 滚动播放，如果不需要可以留空\n  text3: 想要的都拥有，得不到的都释怀  # 最多支持三段文字\n  startDelay: 0   # 延迟时间\n  typeSpeed: 200  # 打字速度\n  loop: true  # 是否循环\n  backSpeed: 100  # 回退速度\n  showCursor: true  # 是否显示光标\n\n# 网站图标和侧边栏logo\nfavicon: /favicon.ico\nlogo: /images/ayer-side.svg\n\n# 封面配置\n# enable-是否启用封面；path-封面背景图；logo-封面logo\ncover:\n  enable: true\n  path: /images/cover1.jpg  # /source/images目录下附送多张精美壁纸，可任意更换\n  logo: /images/ayer.svg  # 如果不要直接设置成false\n\n# 页面顶部进度条  \nprogressBar: true\n\n# 告示板模块\nbroadcast:\n  enable: true # true开启，false关闭\n  type: 2 # 1：自定义输入，2：一言api(https://hitokoto.cn/)\n  text: 一个安静优雅的hexo主题，快速且响应式。 # type为1时有效\n\n# 文章配置\n# 文章太长，截断按钮文字(在需要截断的行增加此标记：<!--more-->)\nexcerpt_link: 阅读更多...\n# 如果你嫌每篇文章手动加more标记比较麻烦，又不想在首页全文显示，可以把excerpt_all设置成true，这样首页只会显示文章归档\nexcerpt_all: false\n\n# 是否开启代码复制按钮\ncopy_btn: true\n# 是否开启文章分享按钮\nshare_enable: true\n# 国内的社交平台(If you are not in China, maybe you prefer to set:false)\nshare_china: true\n# 文章分享文字\nshare_text: 分享\n\n# 分页文字\nnav_text:\n  page_prev: 上一页\n  page_next: 下一页\n  post_prev: 上一篇\n  post_next: 下一篇\n\n# 文章页是否显示目录\ntoc: true\n\n# 文章中的图片是否支持点击放大\nimage_viewer: true\n\n# https://github.com/willin/hexo-wordcount\n# 是否开启字数统计(关闭请设置enable为false)\n# 也可以单独在md文件里Front-matter设置`no_word_count: true`属性，来自定义关闭字数统计\nword_count:\n  enable: true\n  # 只在文章详情显示(不在首页显示)\n  only_article_visit: true\n\n# 打赏\n# 打赏type设定：0-关闭打赏； 1-文章对应的md文件里有reward:true属性，才有打赏； 2-默认开启所有文章均有打赏，如果有些文章你不需要，请在文章对应的md文件里设置no_reward:true\nreward_type: 2\n# 打赏wording\nreward_wording: '请我喝杯咖啡吧~'\n# 支付宝二维码图片地址，跟你设置logo的方式一样。比如：/images/alipay.jpg\nalipay: /images/alipay.jpg\n# 微信二维码图片地址\nweixin: /images/wechat.jpg\n\n# 版权声明\n# 版权声明type设定：0-关闭版权声明； 1-文章对应的md文件里有copyright: true属性，才有版权声明； 2-所有文章均有版权声明\ncopyright_type: 2\n\n# 是否启用搜索\nsearch: true\n\n# RSS订阅(先安装hexo-generator-feed插件，再去博客根目录config进行配置)\n# 不想显示可以直接留空\nrss: /atom.xml\n\n# 是否启用黑夜模式开关\ndarkmode: true\n\n# 动态背景效果: 0-关闭，1-动态线条(跟随鼠标)\ncanvas_bg: 0\n\n# 自定义鼠标样式，直接替换/images/mouse.cur文件\nmouse:\n  enable: false\n  path: /images/mouse.cur\n\n# 鼠标点击效果：0-关闭，1-爱心，2-爆炸烟花，3-粒子烟花\nclick_effect: 0\n\n# 页面宽度自定义（不建议修改，可能造成布局混乱），article_width文章宽度，sidebar_width侧边栏宽度\nlayout:\n  article_width: 80rem\n  sidebar_width: 8rem\n  \n# GitHub Ribbons-封面右上角的forkme，换样式直接在source/images目录下替换forkme图片\ngithub: \n  # (关闭请设置为false)\n  enable: true\n  url: https://github.com/Shen-Yu/hexo-theme-ayer\n\n# 网易云音乐插件\nmusic:\n  enable: false\n  # 播放器尺寸类型(1：小尺寸、2：大尺寸)\n  type: 1\n  id: 22707008  # 网易云分享的音乐ID(更换音乐请更改此配置项)\n  autoPlay: true  # 是否开启自动播放\n\n# 访问量统计(不蒜子)\nbusuanzi:\n  enable: true\n\n# 友盟cnzz统计(url填js代码src链接)\ncnzz:\n  enable: true\n  url: #\n\n# Google Analytics\ngoogle_analytics: ''\n# 百度统计\nbaidu_analytics: ''\n\n# Mathjax数学公式\nmathjax: true\n\n# Katex数学公式(allpost设置为false时只有头部设置math:true的文章才开启)\n# 需要更换hexo渲染器，npm un hexo-renderer-marked -S && npm i hexo-renderer-markdown-it-katex -S\nkatex:\n  enable: false # true\n  allpost: true\n  copy_tex: false\n\n# 网站成立年份(默认为 2019，若填入年份小于当前年份，则显示为 2018-2019 类似的格式)\nsince: 2019\n\n# 是否显示页脚信息(建议保留，有助于本主题的推广)\npageFooter: true\n\n# ICP备案信息尾部显示\nicp:\n  enable: false\n  url: 'http://www.beian.miit.gov.cn/' # 备案链接\n  text: '浙ICP备88888888' # 备案信息\n# 公安备案信息尾部显示\ngongan:\n  enable: true\n  img: /images/beian.png #公安备案图片\n  url: \"http://www.beian.gov.cn/portal/registerSystemInfo?recordcode=01234567890123\" #公安备案链接\n  text: \"浙公网安备01234567890123号\" #公安备案信息\n\n# 友情链接\nfriends_link:\n  Ayer主题: #网站名称\n    #网站地址\n    url: https://github.com/Shen-Yu/hexo-theme-ayer\n    #网站图片(可忽略不写)\n    img: /images/ayer.png\n  GitHub:\n    url: https://github.com/Shen-Yu\n    img: https://i.loli.net/2020/09/07/indb4PRYDA98EkN.png\n  码云:\n    url: https://gitee.com/shen-yu\n    img: https://i.loli.net/2020/09/07/K3AqO7h6krQFlRX.png\n  Hexo官网:\n    url: https://hexo.io\n    img: https://i.loli.net/2020/09/07/UYGzjo7h68CRWny.png\n  Hexo图表插件:\n    url: https://github.com/Shen-Yu/hexo-tag-chart\n    img: https://i.loli.net/2020/09/07/GIXBYE5SoylhR1r.png\n\n# 评论：1、Valine(推荐)；2、Gitalk；3、Twikoo; 4.MiniValine\n\n# 1、Valine[一款快速、简洁且高效的无后端评论系统](https://github.com/xCss/Valine)\n# 启用Valine必须先创建leancloud应用， 获取 id|key 填入即可\nleancloud:\n  enable: true\n  app_id: #\n  app_key: #\n# Valine配置\nvaline:\n  enable: true # 是否启用\n  avatar: monsterid # 头像样式(https://valine.js.org/avatar.html)\n  placeholder: 给我的文章加点评论吧~ # placeholder\n\n# 2、Gitalk(https://github.com/gitalk/gitalk)\ngitalk:\n  enable: false # true\n  clientID: # GitHub Application Client ID\n  clientSecret: # Client Secret\n  repo: # Repository name\n  owner: # GitHub ID\n  admin: # GitHub ID\n\n# 3、Twikoo(https://github.com/imaegoo/twikoo)\ntwikoo:\n  enable: false\n  envId: #\n\n# 4、MiniValine\n# See: https://github.com/MiniValine/MiniValine\nminivaline:\n  enable: false\n  md: true\n  # 更多选项 https://minivaline.js.org/docs/cn/#/Options 按照yml格式继续填写即可 （除了 [el] 选项）  \n  # emoticonUrl 等列表选项 可参考 https://github.com/MiniValine/hexo-next-minivaline\n  # 下面是一个例子：\n  backend: waline\n  serverURL: https://waline.vercel.app\n\n# 首页广告配置\n# 可以根据需要自行增加ad_3，ad_4...，留空则不显示\nads:\n  ad_1:\n    title: 腾讯云限时秒杀\n    img: https://cdn.jsdelivr.net/gh/Shen-Yu/cdn/img/ad_1.jpg\n    url: https://curl.qcloud.com/ezctH6FU\n    width: 300\n  ad_2:\n    title: 云服务器全球购低至2折\n    img: https://cdn.jsdelivr.net/gh/Shen-Yu/cdn/img/ad_2.jpg\n    url: https://curl.qcloud.com/kvO7hb43\n    width: 300\n```\n\n\n## 插件(必需)\n\n+ [hexo-generator-searchdb](https://github.com/theme-next/hexo-generator-searchdb) 用于搜索\n\t\n  ```yml\n  npm install hexo-generator-searchdb --save\n  ```\n  然后将以下配置复制到你博客根目录下的 `_config.yml` 里（注意不是ayer目录下的）:\n  \n  ```yml\n  # hexo-generator-searchdb\n  search:\n    path: search.xml\n    field: post\n    format: html\n  ```\n\n+ [hexo-generator-feed](https://github.com/hexojs/hexo-generator-feed) 用于生成RSS订阅\n\n  ```yml\n  npm install hexo-generator-feed --save\n  ```\n  \n    然后将以下配置复制到你博客根目录下的 `_config.yml` 里（注意不是ayer目录下的）:\n  \n  ```yml\n  feed:\n      type: atom\n      path: atom.xml\n      limit: 20\n      hub:\n      content:\n      content_limit: 140\n      content_limit_delim: ' '\n      order_by: -date\t\n  ```\n\n## 插件(可选)\n\n+ [hexo-generator-index-pin-top](https://github.com/netcan/hexo-generator-index-pin-top) 用于文章置顶\n\n+ [hexo-blog-encrypt](https://github.com/MikeCoder/hexo-blog-encrypt/blob/master/ReadMe.zh.md) 用于文章加密\n\n+ [hexo-tag-aplayer](https://github.com/MoePlayer/hexo-tag-aplayer/blob/master/docs/README-zh_cn.md) 用于播放音乐\n\n+ [hexo-tag-dplayer](https://github.com/MoePlayer/hexo-tag-dplayer) 用于播放视频\n\n+ [hexo-helper-live2d](https://github.com/EYHN/hexo-helper-live2d/blob/master/README.zh-CN.md) 二次元看板娘\n\n更多插件请见 [hexo插件市场](https://hexo.io/plugins/)\n\n## 分类\n``` bash\n  hexo new page categories\n```\n然后将以下复制到 /source/categories/index.md 文件\n``` md\n---\ntitle: categories\ntype: \"categories\"\nlayout: \"categories\"\n---\n```\n\n## 标签\n``` bash\n  hexo new page tags\n```\n配置同分类一样\n\n## 友情链接\n``` bash\nhexo new page friends\n```\n然后将以下复制到 /source/friends/index.md 文件\n``` md\n---\ntitle: friends\ntype: friends\nlayout: \"friends\"\n---\n```\n然后在 ayer 主题目录下的 `_config.yml` 中自定义 `friends_link` 配置项即可\n\n## 相册\n``` bash\n  hexo new page photos\n```\n然后将以下复制到 /source/photos/index.md 文件，`img_url` 替换成图片路径，`caption` 替换成图片名称\n\n``` md\n---\ntitle: Gallery\n\nalbums: [\n        [\"img_url\",\"img_caption\"],\n        [\"img_url\",\"img_caption\"]\n        ]\n---\n```\n\n## 文章目录\n\n用 Tocbot 解析文章标题并生成目录\n\n+ 将以下配置复制到你 ayer 主题目录下的 `_config.yml` 里：\n\n``` bash\n# Toc\ntoc: true\n```\n+ 当然你可能并不想所有文章都生成悬浮目录，你可以在文章顶部的配置中加一行来进行关闭：\n\n``` md\n---\nno_toc: true\n---\n```\n\n---\n\n# 常见问题\n\n## 一.本地图片引用了却无法显示\n\n> 插入图片的两种方法：\n1. 引用图床\n2. 引用本地图片。为了防止路径出错，建议使用图床。\n\n### 1.图床\n推荐使用：[SM.MS](https://sm.ms/)，[聚合图床](https://www.superbed.cn/)\n\n### 2.本地图片\n参照 [Hexo文档](https://hexo.io/zh-cn/docs/asset-folders)，然后用这种方式引用图片：\n``` md\n{% asset_img image.jpg [title] %}\n```\n\n*html引用图片*\n根据width and height来调整图片的大小\n```\n<img src=\"https://img.imgdb.cn/item/60431c61360785be54872edf\" width=256 height=256 />\n```\n\n\n如果还是无法显示，请尝试在文章里用 html 的 img 标签来引用本地图片。\n\n\n## 二.可以启动但是样式变形了\n\n这很可能是因为你把博客部署到了服务器子目录，导致静态资源加载的路径不对，在此强烈建议你部署到根目录，github和码云都支持根目录部署，只要你把仓库名搞成和用户名一样就行了。\n\n## 三.点击侧边栏页面无法显示\n\n原因：ayer 主题目录下的 `config.yml` 里 menu 属性的路径不对，这需要你根据页面路径手动配置。\n\n\n以我的博客为例：\n\n```yaml\nmenu:\n  主页: /\n  归档: /archives\n  分类: /categories\n  标签: /tags\n  旅行: /tags/旅行/\n  摄影: http://shenyu-vip.lofter.com\n  关于我: /2019/about\n```\n\n上面的 `归档/archives` 是固定的，你不需要修改，`标签`和`分类`都需要手动创建目录，`旅行`实际上就是一个标签页，当你在文章头部设置tags属性后就会自动生成，`摄影`是一个站外的绝对路径，`关于我`实际上就是一个正常的文章页。好了，现在一个侧边栏导航就已经配置好了。\n\n## 四.为什么修改了配置却没有效果\n\n建议每次生成站点或部署之前都用 `hexo clean` 命令清理一下缓存，请使用 Ctrl + F5 清除缓存并刷新页面。\n\n## 五.怎么修改大标题和站点信息\n\n参考 [Hexo 文档](https://hexo.io/zh-cn/docs/configuration)\n\n站点配置文件 `_config.yml` 是 Hexo 站点根目录下的主配置文件（还不知道是哪里的，自己搜索），注意：别和 `ayer` 主题目录下的 `_config.yml` 搞混了。\n\n修改网站各种资料，例如标题、副标题和邮箱等个人资料，请修改 Hexo 博客目录下的 `_config.yml`\n\n以我的博客为例：\n![](https://pic.downk.cc/item/5e75c69c9d7d586a54cf119d.jpg)\n\n## 六.怎么添加百度或谷歌统计\n\n### 百度统计\n\n参考这里：[百度统计代码介绍](https://tongji.baidu.com/web/help/article?id=174&type=0&castk=LTE%3D)\n\n在 ayer 的 config 配置里的 `baidu_analytics` 填上百度统计代码中的 `hm.js?` 后面那一串东西\n\n### 谷歌统计\n\n参考这里：[Get started with Google Analytics](https://support.google.com/analytics/answer/1008015?hl=en)\n\n在 ayer 的 config 配置里的 `google_analytics` 填上谷歌统计代码的跟踪 ID，即 UA 值(包含 UA)\n\n## 七.怎么查看文章的访问量\n\n在 ayer 的 config 配置里有 `busuanzi` 选项，默认设置为 `enable:true`，就开启了站点访问量的统计，站点尾部左下角的 `PV` 代表了当前页的访问次数，`UV` 代表了当前站点的访问人数。注意：不蒜子统计是根据当前域名来统计的，你在本地启动的时候由于是 localhost，所以数字会很大，部署到线上之后就会根据域名重新统计。\n\n## 八.网易云音乐无法播放\n\n这是由于网易云音乐对部分歌曲做了版权限制，你可以多换几首试试，配置文件里的默认歌曲 `潮鳴り` 是可以播放的。如果你动手能力强，也可以试试音乐播放插件 [hexo-tag-aplayer](https://github.com/MoePlayer/hexo-tag-aplayer/blob/master/docs/README-zh_cn.md)，配合`MetingJS`可以支持对于 QQ音乐、网易云、虾米、酷狗、百度等平台的音乐播放。\n\n## 九.分享链接无法打开\n\n你需要在 Hexo 博客目录下的 `_config.yml` 文件中把 url 配置成部署后的域名。\n\n## 十.怎么让搜索引擎收录站点\n\n参考：[Hexo站点SEO优化技巧](/2020/hexo-seo)","slug":"Ayer中文说明","published":1,"updated":"2022-06-28T05:30:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4z9v5oc00030s7e7w3m0wpn","content":"<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><blockquote>\n<p><a href=\"https://github.com/Shen-Yu/hexo-theme-ayer\">Ayer</a> 是一个干净且优雅的 Hexo 主题，自带响应式，加载速度很快，该有的功能都有，可配置项很多，非常适合作为你的博客主题，主题内还附送了6张精美的高清壁纸。欢迎使用和 Star 支持，如果你在使用过程中有任何疑问或者建议，欢迎联系我！如果你的博客采用了本主题，欢迎在下面评论区留下地址~</p>\n</blockquote>\n<p><a href=\"https://github.com/Shen-Yu/hexo-theme-ayer\">Ayer</a> 在马来语中是“水”的意思，在西班牙语中是“昨天”的意思。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Shen-Yu/cdn/picgo/ayer.jpg\" alt=\"hexo-theme-ayer\"></p>\n<p><a href=\"https://github.com/Shen-Yu/hexo-theme-ayer\">GitHub地址</a></p>\n<p><a href=\"https://gitee.com/shen-yu/hexo-theme-ayer\">国内镜像</a></p>\n<p><a href=\"https://shen-yu.gitee.io/\">效果预览</a></p>\n<p><a href=\"https://shen-yu.gitee.io/2019/ayer/\">中文说明</a></p>\n<span id=\"more\"></span>\n\n<h1 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h1><ol>\n<li>干净且优雅，文章内容美观易读</li>\n<li>首页封面全屏平铺，扁平化设计，简洁又不失高大上</li>\n<li>响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现</li>\n<li>首页封面和文案可以任意更换，主题内附送 6 张精美高清壁纸</li>\n<li>时间轴式的归档页</li>\n<li>支持 <code>黑夜阅读</code> 模式</li>\n<li>侧边栏可以点击显示或隐藏</li>\n<li>支持文章置顶和文章打赏</li>\n<li>支持文章字数和阅读时长统计</li>\n<li>支持网易云音乐播放</li>\n<li>支持 <code>MathJax</code> 和 <code>Katex</code> 数学公式</li>\n<li><code>TOC</code> 目录在文章页悬浮，跳转更方便</li>\n<li>可设置阅读文章时做密码验证<a href=\"https://github.com/MikeCoder/hexo-blog-encrypt/blob/master/ReadMe.zh.md\">hexo-blog-encrypt</a></li>\n<li><a href=\"https://valine.js.org/\">Valine</a>和<a href=\"https://gitalk.github.io/\">Gitalk</a>评论模块（推荐配合<code>leancloud</code>使用 <code>Valine</code>）</li>\n<li>集成了<a href=\"http://busuanzi.ibruce.info/\">不蒜子</a>、百度统计、Google Analytics、CNZZ等统计功能</li>\n<li>支持 Github Ribbons</li>\n</ol>\n<p>如果想体验手机端浏览效果，可以扫一下二维码：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Shen-Yu/cdn/picgo/mobile_ayer.jpg\" alt=\"手机端效果\"></p>\n<h1 id=\"多语言支持\"><a href=\"#多语言支持\" class=\"headerlink\" title=\"多语言支持\"></a>多语言支持</h1><p><code>zh-CN（简体中文）</code> ; <code>en（English）</code> ; <code>zh-TW（繁體中文）</code> ; <code>ja（Japanese）</code> ; <code>es（Spanish）</code> ; <code>de（German）</code> ; <code>fr（French）</code> ; <code>ru（Russian）</code> ; <code>ko（Korean）</code> ; <code>vi（Vietnamese）</code> ; <code>nl（Dutch）</code> ; <code>no（Norwegian）</code> ; <code>pt（Portuguese）</code> </p>\n<p>Hexo 默认语言为英语（en），请参照上表修改 Hexo 博客目录下的 <code>_config.yml</code> 文件中 <code>language:</code> 的值（第 11 行）。</p>\n<h1 id=\"支持\"><a href=\"#支持\" class=\"headerlink\" title=\"支持\"></a>支持</h1><p>根据 <a href=\"https://github.com/Shen-Yu/hexo-theme-ayer/blob/master/LICENSE\">Ayer 主题的开源许可证</a>，只要你进 <a href=\"https://github.com/Shen-Yu/hexo-theme-ayer\">项目主页</a> 给这个主题右上角点一个 Star 并且不抹掉页脚的主题仓库链接就可以任意修改使用该主题了。</p>\n<!-- 此主题完全开源且免费，目前由我一个人维护，如果你觉得主题不错，可以选择适当打赏我，不在于金额多少，而是能让我更有动力去维护这个主题。打赏请备注说明，谢谢~\n\n<div style=\"width:100%;text-align:center;font-weight:bold\">\n<span style=\"width:30%;display:inline-block\">\n微信\n<img src=\"https://cdn.jsdelivr.net/gh/Shen-Yu/cdn/picgo/wechatpay.png\" alt=\"wechat\" style=\"width:100%\"></span>\n<span style=\"width:30%;;display:inline-block\">\n支付宝\n<img src=\"https://cdn.jsdelivr.net/gh/Shen-Yu/cdn/picgo/alipay.jpg\" alt=\"alipay\" style=\"width:100%\"></span>\n</div> -->\n\n<p>如果你不懂技术，希望我帮忙从零搭建一个类似的网站或者有其他技术类需求，我也愿意提供有偿服务，我的QQ：448766534</p>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p><strong>方法一：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 国内用户如果速度较慢，可以把github地址替换为：https://gitee.com/mirrors/ayer.git</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/Shen-Yu/hexo-theme-ayer.git themes/ayer</span><br></pre></td></tr></table></figure>\n\n<p><strong>方法二（hexo &gt;= 5.0）：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i hexo-theme-ayer -S</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>如果是新安装本主题，安装完成后会在根目录生成一个<code>_config.ayer.yml</code>文件，直接编辑<code>_config.ayer.yml</code>文件进行配置即可。</li>\n<li>如果是主题升级，可以使用方法一，也可以将原来的配置文件移动到根目录，并重命名为<code>_config.ayer.yml</code>。</li>\n</ul>\n<h1 id=\"修改\"><a href=\"#修改\" class=\"headerlink\" title=\"修改\"></a>修改</h1><p>将博客根目录下的 <code>_config.yml</code> 里的 <code>theme</code> 值修改成 <code>ayer</code></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">ayer</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a>更新</h1><p>更新主题可能会覆盖你之前改动过的 config 文件，建议先把 <code>config.yml</code> 里的配置备份一下，然后删掉 ayer 目录后重新 <code>git clone</code> 下载主题，再把配置复制进去。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> themes/ayer</span><br><span class=\"line\">git pull</span><br></pre></td></tr></table></figure>\n\n<p>如果你是用方法二的 npm 安装本主题，那么在根目录执行以下命令就可更新。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm update hexo-theme-ayer -S</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"主题配置\"><a href=\"#主题配置\" class=\"headerlink\" title=\"主题配置\"></a>主题配置</h1><p>以下是 ayer 主题目录下的 <code>_config.yml</code> 文件配置，如果你是用方法二的 npm 安装，那么在 Hexo 博客目录下的 <code>_config.ayer.yml</code> 配置就行，注意别把 Hexo 的配置文件和主题的配置文件搞混。另外，请先确保你已经读过 <a href=\"https://hexo.io/zh-cn/docs/\">Hexo 文档</a>。如果你在配置过程中有问题，请先擅用 <a href=\"https://cn.bing.com/\">搜索引擎</a>。如果你搜不到解决方法，你可以参考：<a href=\"https://gitee.com/shen-yu/shen-yu/tree/dev/\">我的博客源码</a>，按照我的一模一样配肯定是不会有问题的。如果对部分字体或颜色等有定制需求，请自行在 css 文件进行修改，主题本身已经很符合审美，自定义配置项也很多，不建议改得花里胡哨，过大的字体和库都会影响博客加载速度。如果还有问题或者建议，那么请在评论区给我留言~</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 侧边栏菜单</span></span><br><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\">  <span class=\"string\">主页:</span> <span class=\"string\">/</span></span><br><span class=\"line\">  <span class=\"string\">归档:</span> <span class=\"string\">/archives</span></span><br><span class=\"line\">  <span class=\"string\">分类:</span> <span class=\"string\">/categories</span></span><br><span class=\"line\">  <span class=\"string\">标签:</span> <span class=\"string\">/tags</span></span><br><span class=\"line\">  <span class=\"string\">摄影:</span> <span class=\"string\">http://shenyu-vip.lofter.com</span></span><br><span class=\"line\">  <span class=\"string\">旅行:</span> <span class=\"string\">/tags/旅行/</span></span><br><span class=\"line\">  <span class=\"string\">关于我:</span> <span class=\"string\">/2019/about</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 站点次标题和打字动效</span></span><br><span class=\"line\"><span class=\"comment\"># https://github.com/mattboldt/typed.js</span></span><br><span class=\"line\"><span class=\"attr\">subtitle:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span>  <span class=\"comment\"># 是否开启动效</span></span><br><span class=\"line\">  <span class=\"attr\">text:</span> <span class=\"string\">面朝大海，春暖花开</span>  <span class=\"comment\"># 显示的文字</span></span><br><span class=\"line\">  <span class=\"attr\">text2:</span> <span class=\"string\">愿你一生努力，一生被爱</span>   <span class=\"comment\"># 滚动播放，如果不需要可以留空</span></span><br><span class=\"line\">  <span class=\"attr\">text3:</span> <span class=\"string\">想要的都拥有，得不到的都释怀</span>  <span class=\"comment\"># 最多支持三段文字</span></span><br><span class=\"line\">  <span class=\"attr\">startDelay:</span> <span class=\"number\">0</span>   <span class=\"comment\"># 延迟时间</span></span><br><span class=\"line\">  <span class=\"attr\">typeSpeed:</span> <span class=\"number\">200</span>  <span class=\"comment\"># 打字速度</span></span><br><span class=\"line\">  <span class=\"attr\">loop:</span> <span class=\"literal\">true</span>  <span class=\"comment\"># 是否循环</span></span><br><span class=\"line\">  <span class=\"attr\">backSpeed:</span> <span class=\"number\">100</span>  <span class=\"comment\"># 回退速度</span></span><br><span class=\"line\">  <span class=\"attr\">showCursor:</span> <span class=\"literal\">true</span>  <span class=\"comment\"># 是否显示光标</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 网站图标和侧边栏logo</span></span><br><span class=\"line\"><span class=\"attr\">favicon:</span> <span class=\"string\">/favicon.ico</span></span><br><span class=\"line\"><span class=\"attr\">logo:</span> <span class=\"string\">/images/ayer-side.svg</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 封面配置</span></span><br><span class=\"line\"><span class=\"comment\"># enable-是否启用封面；path-封面背景图；logo-封面logo</span></span><br><span class=\"line\"><span class=\"attr\">cover:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">/images/cover1.jpg</span>  <span class=\"comment\"># /source/images目录下附送多张精美壁纸，可任意更换</span></span><br><span class=\"line\">  <span class=\"attr\">logo:</span> <span class=\"string\">/images/ayer.svg</span>  <span class=\"comment\"># 如果不要直接设置成false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 页面顶部进度条  </span></span><br><span class=\"line\"><span class=\"attr\">progressBar:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 告示板模块</span></span><br><span class=\"line\"><span class=\"attr\">broadcast:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span> <span class=\"comment\"># true开启，false关闭</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"number\">2</span> <span class=\"comment\"># 1：自定义输入，2：一言api(https://hitokoto.cn/)</span></span><br><span class=\"line\">  <span class=\"attr\">text:</span> <span class=\"string\">一个安静优雅的hexo主题，快速且响应式。</span> <span class=\"comment\"># type为1时有效</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 文章配置</span></span><br><span class=\"line\"><span class=\"comment\"># 文章太长，截断按钮文字(在需要截断的行增加此标记：&lt;!--more--&gt;)</span></span><br><span class=\"line\"><span class=\"attr\">excerpt_link:</span> <span class=\"string\">阅读更多...</span></span><br><span class=\"line\"><span class=\"comment\"># 如果你嫌每篇文章手动加more标记比较麻烦，又不想在首页全文显示，可以把excerpt_all设置成true，这样首页只会显示文章归档</span></span><br><span class=\"line\"><span class=\"attr\">excerpt_all:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 是否开启代码复制按钮</span></span><br><span class=\"line\"><span class=\"attr\">copy_btn:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 是否开启文章分享按钮</span></span><br><span class=\"line\"><span class=\"attr\">share_enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 国内的社交平台(If you are not in China, maybe you prefer to set:false)</span></span><br><span class=\"line\"><span class=\"attr\">share_china:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 文章分享文字</span></span><br><span class=\"line\"><span class=\"attr\">share_text:</span> <span class=\"string\">分享</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 分页文字</span></span><br><span class=\"line\"><span class=\"attr\">nav_text:</span></span><br><span class=\"line\">  <span class=\"attr\">page_prev:</span> <span class=\"string\">上一页</span></span><br><span class=\"line\">  <span class=\"attr\">page_next:</span> <span class=\"string\">下一页</span></span><br><span class=\"line\">  <span class=\"attr\">post_prev:</span> <span class=\"string\">上一篇</span></span><br><span class=\"line\">  <span class=\"attr\">post_next:</span> <span class=\"string\">下一篇</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 文章页是否显示目录</span></span><br><span class=\"line\"><span class=\"attr\">toc:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 文章中的图片是否支持点击放大</span></span><br><span class=\"line\"><span class=\"attr\">image_viewer:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># https://github.com/willin/hexo-wordcount</span></span><br><span class=\"line\"><span class=\"comment\"># 是否开启字数统计(关闭请设置enable为false)</span></span><br><span class=\"line\"><span class=\"comment\"># 也可以单独在md文件里Front-matter设置`no_word_count: true`属性，来自定义关闭字数统计</span></span><br><span class=\"line\"><span class=\"attr\">word_count:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\"># 只在文章详情显示(不在首页显示)</span></span><br><span class=\"line\">  <span class=\"attr\">only_article_visit:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打赏</span></span><br><span class=\"line\"><span class=\"comment\"># 打赏type设定：0-关闭打赏； 1-文章对应的md文件里有reward:true属性，才有打赏； 2-默认开启所有文章均有打赏，如果有些文章你不需要，请在文章对应的md文件里设置no_reward:true</span></span><br><span class=\"line\"><span class=\"attr\">reward_type:</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"comment\"># 打赏wording</span></span><br><span class=\"line\"><span class=\"attr\">reward_wording:</span> <span class=\"string\">&#x27;请我喝杯咖啡吧~&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 支付宝二维码图片地址，跟你设置logo的方式一样。比如：/images/alipay.jpg</span></span><br><span class=\"line\"><span class=\"attr\">alipay:</span> <span class=\"string\">/images/alipay.jpg</span></span><br><span class=\"line\"><span class=\"comment\"># 微信二维码图片地址</span></span><br><span class=\"line\"><span class=\"attr\">weixin:</span> <span class=\"string\">/images/wechat.jpg</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 版权声明</span></span><br><span class=\"line\"><span class=\"comment\"># 版权声明type设定：0-关闭版权声明； 1-文章对应的md文件里有copyright: true属性，才有版权声明； 2-所有文章均有版权声明</span></span><br><span class=\"line\"><span class=\"attr\">copyright_type:</span> <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 是否启用搜索</span></span><br><span class=\"line\"><span class=\"attr\">search:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># RSS订阅(先安装hexo-generator-feed插件，再去博客根目录config进行配置)</span></span><br><span class=\"line\"><span class=\"comment\"># 不想显示可以直接留空</span></span><br><span class=\"line\"><span class=\"attr\">rss:</span> <span class=\"string\">/atom.xml</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 是否启用黑夜模式开关</span></span><br><span class=\"line\"><span class=\"attr\">darkmode:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 动态背景效果: 0-关闭，1-动态线条(跟随鼠标)</span></span><br><span class=\"line\"><span class=\"attr\">canvas_bg:</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 自定义鼠标样式，直接替换/images/mouse.cur文件</span></span><br><span class=\"line\"><span class=\"attr\">mouse:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">/images/mouse.cur</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 鼠标点击效果：0-关闭，1-爱心，2-爆炸烟花，3-粒子烟花</span></span><br><span class=\"line\"><span class=\"attr\">click_effect:</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 页面宽度自定义（不建议修改，可能造成布局混乱），article_width文章宽度，sidebar_width侧边栏宽度</span></span><br><span class=\"line\"><span class=\"attr\">layout:</span></span><br><span class=\"line\">  <span class=\"attr\">article_width:</span> <span class=\"string\">80rem</span></span><br><span class=\"line\">  <span class=\"attr\">sidebar_width:</span> <span class=\"string\">8rem</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\"># GitHub Ribbons-封面右上角的forkme，换样式直接在source/images目录下替换forkme图片</span></span><br><span class=\"line\"><span class=\"attr\">github:</span> </span><br><span class=\"line\">  <span class=\"comment\"># (关闭请设置为false)</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">url:</span> <span class=\"string\">https://github.com/Shen-Yu/hexo-theme-ayer</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 网易云音乐插件</span></span><br><span class=\"line\"><span class=\"attr\">music:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"comment\"># 播放器尺寸类型(1：小尺寸、2：大尺寸)</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">id:</span> <span class=\"number\">22707008</span>  <span class=\"comment\"># 网易云分享的音乐ID(更换音乐请更改此配置项)</span></span><br><span class=\"line\">  <span class=\"attr\">autoPlay:</span> <span class=\"literal\">true</span>  <span class=\"comment\"># 是否开启自动播放</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 访问量统计(不蒜子)</span></span><br><span class=\"line\"><span class=\"attr\">busuanzi:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 友盟cnzz统计(url填js代码src链接)</span></span><br><span class=\"line\"><span class=\"attr\">cnzz:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">url:</span> <span class=\"comment\">#</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Google Analytics</span></span><br><span class=\"line\"><span class=\"attr\">google_analytics:</span> <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 百度统计</span></span><br><span class=\"line\"><span class=\"attr\">baidu_analytics:</span> <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Mathjax数学公式</span></span><br><span class=\"line\"><span class=\"attr\">mathjax:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Katex数学公式(allpost设置为false时只有头部设置math:true的文章才开启)</span></span><br><span class=\"line\"><span class=\"comment\"># 需要更换hexo渲染器，npm un hexo-renderer-marked -S &amp;&amp; npm i hexo-renderer-markdown-it-katex -S</span></span><br><span class=\"line\"><span class=\"attr\">katex:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">false</span> <span class=\"comment\"># true</span></span><br><span class=\"line\">  <span class=\"attr\">allpost:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">copy_tex:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 网站成立年份(默认为 2019，若填入年份小于当前年份，则显示为 2018-2019 类似的格式)</span></span><br><span class=\"line\"><span class=\"attr\">since:</span> <span class=\"number\">2019</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 是否显示页脚信息(建议保留，有助于本主题的推广)</span></span><br><span class=\"line\"><span class=\"attr\">pageFooter:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ICP备案信息尾部显示</span></span><br><span class=\"line\"><span class=\"attr\">icp:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">url:</span> <span class=\"string\">&#x27;http://www.beian.miit.gov.cn/&#x27;</span> <span class=\"comment\"># 备案链接</span></span><br><span class=\"line\">  <span class=\"attr\">text:</span> <span class=\"string\">&#x27;浙ICP备88888888&#x27;</span> <span class=\"comment\"># 备案信息</span></span><br><span class=\"line\"><span class=\"comment\"># 公安备案信息尾部显示</span></span><br><span class=\"line\"><span class=\"attr\">gongan:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">img:</span> <span class=\"string\">/images/beian.png</span> <span class=\"comment\">#公安备案图片</span></span><br><span class=\"line\">  <span class=\"attr\">url:</span> <span class=\"string\">&quot;http://www.beian.gov.cn/portal/registerSystemInfo?recordcode=01234567890123&quot;</span> <span class=\"comment\">#公安备案链接</span></span><br><span class=\"line\">  <span class=\"attr\">text:</span> <span class=\"string\">&quot;浙公网安备01234567890123号&quot;</span> <span class=\"comment\">#公安备案信息</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 友情链接</span></span><br><span class=\"line\"><span class=\"attr\">friends_link:</span></span><br><span class=\"line\">  <span class=\"string\">Ayer主题:</span> <span class=\"comment\">#网站名称</span></span><br><span class=\"line\">    <span class=\"comment\">#网站地址</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">https://github.com/Shen-Yu/hexo-theme-ayer</span></span><br><span class=\"line\">    <span class=\"comment\">#网站图片(可忽略不写)</span></span><br><span class=\"line\">    <span class=\"attr\">img:</span> <span class=\"string\">/images/ayer.png</span></span><br><span class=\"line\">  <span class=\"attr\">GitHub:</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">https://github.com/Shen-Yu</span></span><br><span class=\"line\">    <span class=\"attr\">img:</span> <span class=\"string\">https://i.loli.net/2020/09/07/indb4PRYDA98EkN.png</span></span><br><span class=\"line\">  <span class=\"string\">码云:</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">https://gitee.com/shen-yu</span></span><br><span class=\"line\">    <span class=\"attr\">img:</span> <span class=\"string\">https://i.loli.net/2020/09/07/K3AqO7h6krQFlRX.png</span></span><br><span class=\"line\">  <span class=\"string\">Hexo官网:</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">https://hexo.io</span></span><br><span class=\"line\">    <span class=\"attr\">img:</span> <span class=\"string\">https://i.loli.net/2020/09/07/UYGzjo7h68CRWny.png</span></span><br><span class=\"line\">  <span class=\"string\">Hexo图表插件:</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">https://github.com/Shen-Yu/hexo-tag-chart</span></span><br><span class=\"line\">    <span class=\"attr\">img:</span> <span class=\"string\">https://i.loli.net/2020/09/07/GIXBYE5SoylhR1r.png</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 评论：1、Valine(推荐)；2、Gitalk；3、Twikoo; 4.MiniValine</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1、Valine[一款快速、简洁且高效的无后端评论系统](https://github.com/xCss/Valine)</span></span><br><span class=\"line\"><span class=\"comment\"># 启用Valine必须先创建leancloud应用， 获取 id|key 填入即可</span></span><br><span class=\"line\"><span class=\"attr\">leancloud:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">app_id:</span> <span class=\"comment\">#</span></span><br><span class=\"line\">  <span class=\"attr\">app_key:</span> <span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Valine配置</span></span><br><span class=\"line\"><span class=\"attr\">valine:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span> <span class=\"comment\"># 是否启用</span></span><br><span class=\"line\">  <span class=\"attr\">avatar:</span> <span class=\"string\">monsterid</span> <span class=\"comment\"># 头像样式(https://valine.js.org/avatar.html)</span></span><br><span class=\"line\">  <span class=\"attr\">placeholder:</span> <span class=\"string\">给我的文章加点评论吧~</span> <span class=\"comment\"># placeholder</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2、Gitalk(https://github.com/gitalk/gitalk)</span></span><br><span class=\"line\"><span class=\"attr\">gitalk:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">false</span> <span class=\"comment\"># true</span></span><br><span class=\"line\">  <span class=\"attr\">clientID:</span> <span class=\"comment\"># GitHub Application Client ID</span></span><br><span class=\"line\">  <span class=\"attr\">clientSecret:</span> <span class=\"comment\"># Client Secret</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span> <span class=\"comment\"># Repository name</span></span><br><span class=\"line\">  <span class=\"attr\">owner:</span> <span class=\"comment\"># GitHub ID</span></span><br><span class=\"line\">  <span class=\"attr\">admin:</span> <span class=\"comment\"># GitHub ID</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3、Twikoo(https://github.com/imaegoo/twikoo)</span></span><br><span class=\"line\"><span class=\"attr\">twikoo:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">envId:</span> <span class=\"comment\">#</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4、MiniValine</span></span><br><span class=\"line\"><span class=\"comment\"># See: https://github.com/MiniValine/MiniValine</span></span><br><span class=\"line\"><span class=\"attr\">minivaline:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">md:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\"># 更多选项 https://minivaline.js.org/docs/cn/#/Options 按照yml格式继续填写即可 （除了 [el] 选项）  </span></span><br><span class=\"line\">  <span class=\"comment\"># emoticonUrl 等列表选项 可参考 https://github.com/MiniValine/hexo-next-minivaline</span></span><br><span class=\"line\">  <span class=\"comment\"># 下面是一个例子：</span></span><br><span class=\"line\">  <span class=\"attr\">backend:</span> <span class=\"string\">waline</span></span><br><span class=\"line\">  <span class=\"attr\">serverURL:</span> <span class=\"string\">https://waline.vercel.app</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 首页广告配置</span></span><br><span class=\"line\"><span class=\"comment\"># 可以根据需要自行增加ad_3，ad_4...，留空则不显示</span></span><br><span class=\"line\"><span class=\"attr\">ads:</span></span><br><span class=\"line\">  <span class=\"attr\">ad_1:</span></span><br><span class=\"line\">    <span class=\"attr\">title:</span> <span class=\"string\">腾讯云限时秒杀</span></span><br><span class=\"line\">    <span class=\"attr\">img:</span> <span class=\"string\">https://cdn.jsdelivr.net/gh/Shen-Yu/cdn/img/ad_1.jpg</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">https://curl.qcloud.com/ezctH6FU</span></span><br><span class=\"line\">    <span class=\"attr\">width:</span> <span class=\"number\">300</span></span><br><span class=\"line\">  <span class=\"attr\">ad_2:</span></span><br><span class=\"line\">    <span class=\"attr\">title:</span> <span class=\"string\">云服务器全球购低至2折</span></span><br><span class=\"line\">    <span class=\"attr\">img:</span> <span class=\"string\">https://cdn.jsdelivr.net/gh/Shen-Yu/cdn/img/ad_2.jpg</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">https://curl.qcloud.com/kvO7hb43</span></span><br><span class=\"line\">    <span class=\"attr\">width:</span> <span class=\"number\">300</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"插件-必需\"><a href=\"#插件-必需\" class=\"headerlink\" title=\"插件(必需)\"></a>插件(必需)</h2><ul>\n<li><p><a href=\"https://github.com/theme-next/hexo-generator-searchdb\">hexo-generator-searchdb</a> 用于搜索</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">hexo-generator-searchdb</span> <span class=\"string\">--save</span></span><br></pre></td></tr></table></figure>\n<p>然后将以下配置复制到你博客根目录下的 <code>_config.yml</code> 里（注意不是ayer目录下的）:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># hexo-generator-searchdb</span></span><br><span class=\"line\"><span class=\"attr\">search:</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">search.xml</span></span><br><span class=\"line\">  <span class=\"attr\">field:</span> <span class=\"string\">post</span></span><br><span class=\"line\">  <span class=\"attr\">format:</span> <span class=\"string\">html</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><a href=\"https://github.com/hexojs/hexo-generator-feed\">hexo-generator-feed</a> 用于生成RSS订阅</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">hexo-generator-feed</span> <span class=\"string\">--save</span></span><br></pre></td></tr></table></figure>\n\n<p>  然后将以下配置复制到你博客根目录下的 <code>_config.yml</code> 里（注意不是ayer目录下的）:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">feed:</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">atom</span></span><br><span class=\"line\">    <span class=\"attr\">path:</span> <span class=\"string\">atom.xml</span></span><br><span class=\"line\">    <span class=\"attr\">limit:</span> <span class=\"number\">20</span></span><br><span class=\"line\">    <span class=\"attr\">hub:</span></span><br><span class=\"line\">    <span class=\"attr\">content:</span></span><br><span class=\"line\">    <span class=\"attr\">content_limit:</span> <span class=\"number\">140</span></span><br><span class=\"line\">    <span class=\"attr\">content_limit_delim:</span> <span class=\"string\">&#x27; &#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">order_by:</span> <span class=\"string\">-date</span>\t</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"插件-可选\"><a href=\"#插件-可选\" class=\"headerlink\" title=\"插件(可选)\"></a>插件(可选)</h2><ul>\n<li><p><a href=\"https://github.com/netcan/hexo-generator-index-pin-top\">hexo-generator-index-pin-top</a> 用于文章置顶</p>\n</li>\n<li><p><a href=\"https://github.com/MikeCoder/hexo-blog-encrypt/blob/master/ReadMe.zh.md\">hexo-blog-encrypt</a> 用于文章加密</p>\n</li>\n<li><p><a href=\"https://github.com/MoePlayer/hexo-tag-aplayer/blob/master/docs/README-zh_cn.md\">hexo-tag-aplayer</a> 用于播放音乐</p>\n</li>\n<li><p><a href=\"https://github.com/MoePlayer/hexo-tag-dplayer\">hexo-tag-dplayer</a> 用于播放视频</p>\n</li>\n<li><p><a href=\"https://github.com/EYHN/hexo-helper-live2d/blob/master/README.zh-CN.md\">hexo-helper-live2d</a> 二次元看板娘</p>\n</li>\n</ul>\n<p>更多插件请见 <a href=\"https://hexo.io/plugins/\">hexo插件市场</a></p>\n<h2 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page categories</span><br></pre></td></tr></table></figure>\n<p>然后将以下复制到 /source/categories/index.md 文件</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: categories</span><br><span class=\"line\">type: &quot;categories&quot;</span><br><span class=\"line\">layout: &quot;categories&quot;</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page tags</span><br></pre></td></tr></table></figure>\n<p>配置同分类一样</p>\n<h2 id=\"友情链接\"><a href=\"#友情链接\" class=\"headerlink\" title=\"友情链接\"></a>友情链接</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page friends</span><br></pre></td></tr></table></figure>\n<p>然后将以下复制到 /source/friends/index.md 文件</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: friends</span><br><span class=\"line\">type: friends</span><br><span class=\"line\">layout: &quot;friends&quot;</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>然后在 ayer 主题目录下的 <code>_config.yml</code> 中自定义 <code>friends_link</code> 配置项即可</p>\n<h2 id=\"相册\"><a href=\"#相册\" class=\"headerlink\" title=\"相册\"></a>相册</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page photos</span><br></pre></td></tr></table></figure>\n<p>然后将以下复制到 /source/photos/index.md 文件，<code>img_url</code> 替换成图片路径，<code>caption</code> 替换成图片名称</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: Gallery</span><br><span class=\"line\"></span><br><span class=\"line\">albums: [</span><br><span class=\"line\"><span class=\"code\">        [&quot;img_url&quot;,&quot;img_caption&quot;],</span></span><br><span class=\"line\"><span class=\"code\">        [&quot;img_url&quot;,&quot;img_caption&quot;]</span></span><br><span class=\"line\"><span class=\"code\">        ]</span></span><br><span class=\"line\"><span class=\"code\">---</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"文章目录\"><a href=\"#文章目录\" class=\"headerlink\" title=\"文章目录\"></a>文章目录</h2><p>用 Tocbot 解析文章标题并生成目录</p>\n<ul>\n<li>将以下配置复制到你 ayer 主题目录下的 <code>_config.yml</code> 里：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Toc</span></span><br><span class=\"line\">toc: <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>当然你可能并不想所有文章都生成悬浮目录，你可以在文章顶部的配置中加一行来进行关闭：</li>\n</ul>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">no<span class=\"emphasis\">_toc: true</span></span><br><span class=\"line\"><span class=\"emphasis\">---</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h1><h2 id=\"一-本地图片引用了却无法显示\"><a href=\"#一-本地图片引用了却无法显示\" class=\"headerlink\" title=\"一.本地图片引用了却无法显示\"></a>一.本地图片引用了却无法显示</h2><blockquote>\n<p>插入图片的两种方法：</p>\n</blockquote>\n<ol>\n<li>引用图床</li>\n<li>引用本地图片。为了防止路径出错，建议使用图床。</li>\n</ol>\n<h3 id=\"1-图床\"><a href=\"#1-图床\" class=\"headerlink\" title=\"1.图床\"></a>1.图床</h3><p>推荐使用：<a href=\"https://sm.ms/\">SM.MS</a>，<a href=\"https://www.superbed.cn/\">聚合图床</a></p>\n<h3 id=\"2-本地图片\"><a href=\"#2-本地图片\" class=\"headerlink\" title=\"2.本地图片\"></a>2.本地图片</h3><p>参照 <a href=\"https://hexo.io/zh-cn/docs/asset-folders\">Hexo文档</a>，然后用这种方式引用图片：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% asset<span class=\"emphasis\">_img image.jpg [title] %&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><em>html引用图片</em><br>根据width and height来调整图片的大小</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;img src&#x3D;&quot;https:&#x2F;&#x2F;img.imgdb.cn&#x2F;item&#x2F;60431c61360785be54872edf&quot; width&#x3D;256 height&#x3D;256 &#x2F;&gt;</span><br></pre></td></tr></table></figure>\n\n\n<p>如果还是无法显示，请尝试在文章里用 html 的 img 标签来引用本地图片。</p>\n<h2 id=\"二-可以启动但是样式变形了\"><a href=\"#二-可以启动但是样式变形了\" class=\"headerlink\" title=\"二.可以启动但是样式变形了\"></a>二.可以启动但是样式变形了</h2><p>这很可能是因为你把博客部署到了服务器子目录，导致静态资源加载的路径不对，在此强烈建议你部署到根目录，github和码云都支持根目录部署，只要你把仓库名搞成和用户名一样就行了。</p>\n<h2 id=\"三-点击侧边栏页面无法显示\"><a href=\"#三-点击侧边栏页面无法显示\" class=\"headerlink\" title=\"三.点击侧边栏页面无法显示\"></a>三.点击侧边栏页面无法显示</h2><p>原因：ayer 主题目录下的 <code>config.yml</code> 里 menu 属性的路径不对，这需要你根据页面路径手动配置。</p>\n<p>以我的博客为例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\">  <span class=\"string\">主页:</span> <span class=\"string\">/</span></span><br><span class=\"line\">  <span class=\"string\">归档:</span> <span class=\"string\">/archives</span></span><br><span class=\"line\">  <span class=\"string\">分类:</span> <span class=\"string\">/categories</span></span><br><span class=\"line\">  <span class=\"string\">标签:</span> <span class=\"string\">/tags</span></span><br><span class=\"line\">  <span class=\"string\">旅行:</span> <span class=\"string\">/tags/旅行/</span></span><br><span class=\"line\">  <span class=\"string\">摄影:</span> <span class=\"string\">http://shenyu-vip.lofter.com</span></span><br><span class=\"line\">  <span class=\"string\">关于我:</span> <span class=\"string\">/2019/about</span></span><br></pre></td></tr></table></figure>\n\n<p>上面的 <code>归档/archives</code> 是固定的，你不需要修改，<code>标签</code>和<code>分类</code>都需要手动创建目录，<code>旅行</code>实际上就是一个标签页，当你在文章头部设置tags属性后就会自动生成，<code>摄影</code>是一个站外的绝对路径，<code>关于我</code>实际上就是一个正常的文章页。好了，现在一个侧边栏导航就已经配置好了。</p>\n<h2 id=\"四-为什么修改了配置却没有效果\"><a href=\"#四-为什么修改了配置却没有效果\" class=\"headerlink\" title=\"四.为什么修改了配置却没有效果\"></a>四.为什么修改了配置却没有效果</h2><p>建议每次生成站点或部署之前都用 <code>hexo clean</code> 命令清理一下缓存，请使用 Ctrl + F5 清除缓存并刷新页面。</p>\n<h2 id=\"五-怎么修改大标题和站点信息\"><a href=\"#五-怎么修改大标题和站点信息\" class=\"headerlink\" title=\"五.怎么修改大标题和站点信息\"></a>五.怎么修改大标题和站点信息</h2><p>参考 <a href=\"https://hexo.io/zh-cn/docs/configuration\">Hexo 文档</a></p>\n<p>站点配置文件 <code>_config.yml</code> 是 Hexo 站点根目录下的主配置文件（还不知道是哪里的，自己搜索），注意：别和 <code>ayer</code> 主题目录下的 <code>_config.yml</code> 搞混了。</p>\n<p>修改网站各种资料，例如标题、副标题和邮箱等个人资料，请修改 Hexo 博客目录下的 <code>_config.yml</code></p>\n<p>以我的博客为例：<br><img src=\"https://pic.downk.cc/item/5e75c69c9d7d586a54cf119d.jpg\"></p>\n<h2 id=\"六-怎么添加百度或谷歌统计\"><a href=\"#六-怎么添加百度或谷歌统计\" class=\"headerlink\" title=\"六.怎么添加百度或谷歌统计\"></a>六.怎么添加百度或谷歌统计</h2><h3 id=\"百度统计\"><a href=\"#百度统计\" class=\"headerlink\" title=\"百度统计\"></a>百度统计</h3><p>参考这里：<a href=\"https://tongji.baidu.com/web/help/article?id=174&type=0&castk=LTE=\">百度统计代码介绍</a></p>\n<p>在 ayer 的 config 配置里的 <code>baidu_analytics</code> 填上百度统计代码中的 <code>hm.js?</code> 后面那一串东西</p>\n<h3 id=\"谷歌统计\"><a href=\"#谷歌统计\" class=\"headerlink\" title=\"谷歌统计\"></a>谷歌统计</h3><p>参考这里：<a href=\"https://support.google.com/analytics/answer/1008015?hl=en\">Get started with Google Analytics</a></p>\n<p>在 ayer 的 config 配置里的 <code>google_analytics</code> 填上谷歌统计代码的跟踪 ID，即 UA 值(包含 UA)</p>\n<h2 id=\"七-怎么查看文章的访问量\"><a href=\"#七-怎么查看文章的访问量\" class=\"headerlink\" title=\"七.怎么查看文章的访问量\"></a>七.怎么查看文章的访问量</h2><p>在 ayer 的 config 配置里有 <code>busuanzi</code> 选项，默认设置为 <code>enable:true</code>，就开启了站点访问量的统计，站点尾部左下角的 <code>PV</code> 代表了当前页的访问次数，<code>UV</code> 代表了当前站点的访问人数。注意：不蒜子统计是根据当前域名来统计的，你在本地启动的时候由于是 localhost，所以数字会很大，部署到线上之后就会根据域名重新统计。</p>\n<h2 id=\"八-网易云音乐无法播放\"><a href=\"#八-网易云音乐无法播放\" class=\"headerlink\" title=\"八.网易云音乐无法播放\"></a>八.网易云音乐无法播放</h2><p>这是由于网易云音乐对部分歌曲做了版权限制，你可以多换几首试试，配置文件里的默认歌曲 <code>潮鳴り</code> 是可以播放的。如果你动手能力强，也可以试试音乐播放插件 <a href=\"https://github.com/MoePlayer/hexo-tag-aplayer/blob/master/docs/README-zh_cn.md\">hexo-tag-aplayer</a>，配合<code>MetingJS</code>可以支持对于 QQ音乐、网易云、虾米、酷狗、百度等平台的音乐播放。</p>\n<h2 id=\"九-分享链接无法打开\"><a href=\"#九-分享链接无法打开\" class=\"headerlink\" title=\"九.分享链接无法打开\"></a>九.分享链接无法打开</h2><p>你需要在 Hexo 博客目录下的 <code>_config.yml</code> 文件中把 url 配置成部署后的域名。</p>\n<h2 id=\"十-怎么让搜索引擎收录站点\"><a href=\"#十-怎么让搜索引擎收录站点\" class=\"headerlink\" title=\"十.怎么让搜索引擎收录站点\"></a>十.怎么让搜索引擎收录站点</h2><p>参考：<a href=\"/2020/hexo-seo\">Hexo站点SEO优化技巧</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><blockquote>\n<p><a href=\"https://github.com/Shen-Yu/hexo-theme-ayer\">Ayer</a> 是一个干净且优雅的 Hexo 主题，自带响应式，加载速度很快，该有的功能都有，可配置项很多，非常适合作为你的博客主题，主题内还附送了6张精美的高清壁纸。欢迎使用和 Star 支持，如果你在使用过程中有任何疑问或者建议，欢迎联系我！如果你的博客采用了本主题，欢迎在下面评论区留下地址~</p>\n</blockquote>\n<p><a href=\"https://github.com/Shen-Yu/hexo-theme-ayer\">Ayer</a> 在马来语中是“水”的意思，在西班牙语中是“昨天”的意思。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Shen-Yu/cdn/picgo/ayer.jpg\" alt=\"hexo-theme-ayer\"></p>\n<p><a href=\"https://github.com/Shen-Yu/hexo-theme-ayer\">GitHub地址</a></p>\n<p><a href=\"https://gitee.com/shen-yu/hexo-theme-ayer\">国内镜像</a></p>\n<p><a href=\"https://shen-yu.gitee.io/\">效果预览</a></p>\n<p><a href=\"https://shen-yu.gitee.io/2019/ayer/\">中文说明</a></p>","more":"<h1 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h1><ol>\n<li>干净且优雅，文章内容美观易读</li>\n<li>首页封面全屏平铺，扁平化设计，简洁又不失高大上</li>\n<li>响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现</li>\n<li>首页封面和文案可以任意更换，主题内附送 6 张精美高清壁纸</li>\n<li>时间轴式的归档页</li>\n<li>支持 <code>黑夜阅读</code> 模式</li>\n<li>侧边栏可以点击显示或隐藏</li>\n<li>支持文章置顶和文章打赏</li>\n<li>支持文章字数和阅读时长统计</li>\n<li>支持网易云音乐播放</li>\n<li>支持 <code>MathJax</code> 和 <code>Katex</code> 数学公式</li>\n<li><code>TOC</code> 目录在文章页悬浮，跳转更方便</li>\n<li>可设置阅读文章时做密码验证<a href=\"https://github.com/MikeCoder/hexo-blog-encrypt/blob/master/ReadMe.zh.md\">hexo-blog-encrypt</a></li>\n<li><a href=\"https://valine.js.org/\">Valine</a>和<a href=\"https://gitalk.github.io/\">Gitalk</a>评论模块（推荐配合<code>leancloud</code>使用 <code>Valine</code>）</li>\n<li>集成了<a href=\"http://busuanzi.ibruce.info/\">不蒜子</a>、百度统计、Google Analytics、CNZZ等统计功能</li>\n<li>支持 Github Ribbons</li>\n</ol>\n<p>如果想体验手机端浏览效果，可以扫一下二维码：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Shen-Yu/cdn/picgo/mobile_ayer.jpg\" alt=\"手机端效果\"></p>\n<h1 id=\"多语言支持\"><a href=\"#多语言支持\" class=\"headerlink\" title=\"多语言支持\"></a>多语言支持</h1><p><code>zh-CN（简体中文）</code> ; <code>en（English）</code> ; <code>zh-TW（繁體中文）</code> ; <code>ja（Japanese）</code> ; <code>es（Spanish）</code> ; <code>de（German）</code> ; <code>fr（French）</code> ; <code>ru（Russian）</code> ; <code>ko（Korean）</code> ; <code>vi（Vietnamese）</code> ; <code>nl（Dutch）</code> ; <code>no（Norwegian）</code> ; <code>pt（Portuguese）</code> </p>\n<p>Hexo 默认语言为英语（en），请参照上表修改 Hexo 博客目录下的 <code>_config.yml</code> 文件中 <code>language:</code> 的值（第 11 行）。</p>\n<h1 id=\"支持\"><a href=\"#支持\" class=\"headerlink\" title=\"支持\"></a>支持</h1><p>根据 <a href=\"https://github.com/Shen-Yu/hexo-theme-ayer/blob/master/LICENSE\">Ayer 主题的开源许可证</a>，只要你进 <a href=\"https://github.com/Shen-Yu/hexo-theme-ayer\">项目主页</a> 给这个主题右上角点一个 Star 并且不抹掉页脚的主题仓库链接就可以任意修改使用该主题了。</p>\n<!-- 此主题完全开源且免费，目前由我一个人维护，如果你觉得主题不错，可以选择适当打赏我，不在于金额多少，而是能让我更有动力去维护这个主题。打赏请备注说明，谢谢~\n\n<div style=\"width:100%;text-align:center;font-weight:bold\">\n<span style=\"width:30%;display:inline-block\">\n微信\n<img src=\"https://cdn.jsdelivr.net/gh/Shen-Yu/cdn/picgo/wechatpay.png\" alt=\"wechat\" style=\"width:100%\"></span>\n<span style=\"width:30%;;display:inline-block\">\n支付宝\n<img src=\"https://cdn.jsdelivr.net/gh/Shen-Yu/cdn/picgo/alipay.jpg\" alt=\"alipay\" style=\"width:100%\"></span>\n</div> -->\n\n<p>如果你不懂技术，希望我帮忙从零搭建一个类似的网站或者有其他技术类需求，我也愿意提供有偿服务，我的QQ：448766534</p>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p><strong>方法一：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 国内用户如果速度较慢，可以把github地址替换为：https://gitee.com/mirrors/ayer.git</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/Shen-Yu/hexo-theme-ayer.git themes/ayer</span><br></pre></td></tr></table></figure>\n\n<p><strong>方法二（hexo &gt;= 5.0）：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i hexo-theme-ayer -S</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>如果是新安装本主题，安装完成后会在根目录生成一个<code>_config.ayer.yml</code>文件，直接编辑<code>_config.ayer.yml</code>文件进行配置即可。</li>\n<li>如果是主题升级，可以使用方法一，也可以将原来的配置文件移动到根目录，并重命名为<code>_config.ayer.yml</code>。</li>\n</ul>\n<h1 id=\"修改\"><a href=\"#修改\" class=\"headerlink\" title=\"修改\"></a>修改</h1><p>将博客根目录下的 <code>_config.yml</code> 里的 <code>theme</code> 值修改成 <code>ayer</code></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">ayer</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a>更新</h1><p>更新主题可能会覆盖你之前改动过的 config 文件，建议先把 <code>config.yml</code> 里的配置备份一下，然后删掉 ayer 目录后重新 <code>git clone</code> 下载主题，再把配置复制进去。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> themes/ayer</span><br><span class=\"line\">git pull</span><br></pre></td></tr></table></figure>\n\n<p>如果你是用方法二的 npm 安装本主题，那么在根目录执行以下命令就可更新。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm update hexo-theme-ayer -S</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"主题配置\"><a href=\"#主题配置\" class=\"headerlink\" title=\"主题配置\"></a>主题配置</h1><p>以下是 ayer 主题目录下的 <code>_config.yml</code> 文件配置，如果你是用方法二的 npm 安装，那么在 Hexo 博客目录下的 <code>_config.ayer.yml</code> 配置就行，注意别把 Hexo 的配置文件和主题的配置文件搞混。另外，请先确保你已经读过 <a href=\"https://hexo.io/zh-cn/docs/\">Hexo 文档</a>。如果你在配置过程中有问题，请先擅用 <a href=\"https://cn.bing.com/\">搜索引擎</a>。如果你搜不到解决方法，你可以参考：<a href=\"https://gitee.com/shen-yu/shen-yu/tree/dev/\">我的博客源码</a>，按照我的一模一样配肯定是不会有问题的。如果对部分字体或颜色等有定制需求，请自行在 css 文件进行修改，主题本身已经很符合审美，自定义配置项也很多，不建议改得花里胡哨，过大的字体和库都会影响博客加载速度。如果还有问题或者建议，那么请在评论区给我留言~</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 侧边栏菜单</span></span><br><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\">  <span class=\"string\">主页:</span> <span class=\"string\">/</span></span><br><span class=\"line\">  <span class=\"string\">归档:</span> <span class=\"string\">/archives</span></span><br><span class=\"line\">  <span class=\"string\">分类:</span> <span class=\"string\">/categories</span></span><br><span class=\"line\">  <span class=\"string\">标签:</span> <span class=\"string\">/tags</span></span><br><span class=\"line\">  <span class=\"string\">摄影:</span> <span class=\"string\">http://shenyu-vip.lofter.com</span></span><br><span class=\"line\">  <span class=\"string\">旅行:</span> <span class=\"string\">/tags/旅行/</span></span><br><span class=\"line\">  <span class=\"string\">关于我:</span> <span class=\"string\">/2019/about</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 站点次标题和打字动效</span></span><br><span class=\"line\"><span class=\"comment\"># https://github.com/mattboldt/typed.js</span></span><br><span class=\"line\"><span class=\"attr\">subtitle:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span>  <span class=\"comment\"># 是否开启动效</span></span><br><span class=\"line\">  <span class=\"attr\">text:</span> <span class=\"string\">面朝大海，春暖花开</span>  <span class=\"comment\"># 显示的文字</span></span><br><span class=\"line\">  <span class=\"attr\">text2:</span> <span class=\"string\">愿你一生努力，一生被爱</span>   <span class=\"comment\"># 滚动播放，如果不需要可以留空</span></span><br><span class=\"line\">  <span class=\"attr\">text3:</span> <span class=\"string\">想要的都拥有，得不到的都释怀</span>  <span class=\"comment\"># 最多支持三段文字</span></span><br><span class=\"line\">  <span class=\"attr\">startDelay:</span> <span class=\"number\">0</span>   <span class=\"comment\"># 延迟时间</span></span><br><span class=\"line\">  <span class=\"attr\">typeSpeed:</span> <span class=\"number\">200</span>  <span class=\"comment\"># 打字速度</span></span><br><span class=\"line\">  <span class=\"attr\">loop:</span> <span class=\"literal\">true</span>  <span class=\"comment\"># 是否循环</span></span><br><span class=\"line\">  <span class=\"attr\">backSpeed:</span> <span class=\"number\">100</span>  <span class=\"comment\"># 回退速度</span></span><br><span class=\"line\">  <span class=\"attr\">showCursor:</span> <span class=\"literal\">true</span>  <span class=\"comment\"># 是否显示光标</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 网站图标和侧边栏logo</span></span><br><span class=\"line\"><span class=\"attr\">favicon:</span> <span class=\"string\">/favicon.ico</span></span><br><span class=\"line\"><span class=\"attr\">logo:</span> <span class=\"string\">/images/ayer-side.svg</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 封面配置</span></span><br><span class=\"line\"><span class=\"comment\"># enable-是否启用封面；path-封面背景图；logo-封面logo</span></span><br><span class=\"line\"><span class=\"attr\">cover:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">/images/cover1.jpg</span>  <span class=\"comment\"># /source/images目录下附送多张精美壁纸，可任意更换</span></span><br><span class=\"line\">  <span class=\"attr\">logo:</span> <span class=\"string\">/images/ayer.svg</span>  <span class=\"comment\"># 如果不要直接设置成false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 页面顶部进度条  </span></span><br><span class=\"line\"><span class=\"attr\">progressBar:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 告示板模块</span></span><br><span class=\"line\"><span class=\"attr\">broadcast:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span> <span class=\"comment\"># true开启，false关闭</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"number\">2</span> <span class=\"comment\"># 1：自定义输入，2：一言api(https://hitokoto.cn/)</span></span><br><span class=\"line\">  <span class=\"attr\">text:</span> <span class=\"string\">一个安静优雅的hexo主题，快速且响应式。</span> <span class=\"comment\"># type为1时有效</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 文章配置</span></span><br><span class=\"line\"><span class=\"comment\"># 文章太长，截断按钮文字(在需要截断的行增加此标记：&lt;!--more--&gt;)</span></span><br><span class=\"line\"><span class=\"attr\">excerpt_link:</span> <span class=\"string\">阅读更多...</span></span><br><span class=\"line\"><span class=\"comment\"># 如果你嫌每篇文章手动加more标记比较麻烦，又不想在首页全文显示，可以把excerpt_all设置成true，这样首页只会显示文章归档</span></span><br><span class=\"line\"><span class=\"attr\">excerpt_all:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 是否开启代码复制按钮</span></span><br><span class=\"line\"><span class=\"attr\">copy_btn:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 是否开启文章分享按钮</span></span><br><span class=\"line\"><span class=\"attr\">share_enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 国内的社交平台(If you are not in China, maybe you prefer to set:false)</span></span><br><span class=\"line\"><span class=\"attr\">share_china:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 文章分享文字</span></span><br><span class=\"line\"><span class=\"attr\">share_text:</span> <span class=\"string\">分享</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 分页文字</span></span><br><span class=\"line\"><span class=\"attr\">nav_text:</span></span><br><span class=\"line\">  <span class=\"attr\">page_prev:</span> <span class=\"string\">上一页</span></span><br><span class=\"line\">  <span class=\"attr\">page_next:</span> <span class=\"string\">下一页</span></span><br><span class=\"line\">  <span class=\"attr\">post_prev:</span> <span class=\"string\">上一篇</span></span><br><span class=\"line\">  <span class=\"attr\">post_next:</span> <span class=\"string\">下一篇</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 文章页是否显示目录</span></span><br><span class=\"line\"><span class=\"attr\">toc:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 文章中的图片是否支持点击放大</span></span><br><span class=\"line\"><span class=\"attr\">image_viewer:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># https://github.com/willin/hexo-wordcount</span></span><br><span class=\"line\"><span class=\"comment\"># 是否开启字数统计(关闭请设置enable为false)</span></span><br><span class=\"line\"><span class=\"comment\"># 也可以单独在md文件里Front-matter设置`no_word_count: true`属性，来自定义关闭字数统计</span></span><br><span class=\"line\"><span class=\"attr\">word_count:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\"># 只在文章详情显示(不在首页显示)</span></span><br><span class=\"line\">  <span class=\"attr\">only_article_visit:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打赏</span></span><br><span class=\"line\"><span class=\"comment\"># 打赏type设定：0-关闭打赏； 1-文章对应的md文件里有reward:true属性，才有打赏； 2-默认开启所有文章均有打赏，如果有些文章你不需要，请在文章对应的md文件里设置no_reward:true</span></span><br><span class=\"line\"><span class=\"attr\">reward_type:</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"comment\"># 打赏wording</span></span><br><span class=\"line\"><span class=\"attr\">reward_wording:</span> <span class=\"string\">&#x27;请我喝杯咖啡吧~&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 支付宝二维码图片地址，跟你设置logo的方式一样。比如：/images/alipay.jpg</span></span><br><span class=\"line\"><span class=\"attr\">alipay:</span> <span class=\"string\">/images/alipay.jpg</span></span><br><span class=\"line\"><span class=\"comment\"># 微信二维码图片地址</span></span><br><span class=\"line\"><span class=\"attr\">weixin:</span> <span class=\"string\">/images/wechat.jpg</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 版权声明</span></span><br><span class=\"line\"><span class=\"comment\"># 版权声明type设定：0-关闭版权声明； 1-文章对应的md文件里有copyright: true属性，才有版权声明； 2-所有文章均有版权声明</span></span><br><span class=\"line\"><span class=\"attr\">copyright_type:</span> <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 是否启用搜索</span></span><br><span class=\"line\"><span class=\"attr\">search:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># RSS订阅(先安装hexo-generator-feed插件，再去博客根目录config进行配置)</span></span><br><span class=\"line\"><span class=\"comment\"># 不想显示可以直接留空</span></span><br><span class=\"line\"><span class=\"attr\">rss:</span> <span class=\"string\">/atom.xml</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 是否启用黑夜模式开关</span></span><br><span class=\"line\"><span class=\"attr\">darkmode:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 动态背景效果: 0-关闭，1-动态线条(跟随鼠标)</span></span><br><span class=\"line\"><span class=\"attr\">canvas_bg:</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 自定义鼠标样式，直接替换/images/mouse.cur文件</span></span><br><span class=\"line\"><span class=\"attr\">mouse:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">/images/mouse.cur</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 鼠标点击效果：0-关闭，1-爱心，2-爆炸烟花，3-粒子烟花</span></span><br><span class=\"line\"><span class=\"attr\">click_effect:</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 页面宽度自定义（不建议修改，可能造成布局混乱），article_width文章宽度，sidebar_width侧边栏宽度</span></span><br><span class=\"line\"><span class=\"attr\">layout:</span></span><br><span class=\"line\">  <span class=\"attr\">article_width:</span> <span class=\"string\">80rem</span></span><br><span class=\"line\">  <span class=\"attr\">sidebar_width:</span> <span class=\"string\">8rem</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\"># GitHub Ribbons-封面右上角的forkme，换样式直接在source/images目录下替换forkme图片</span></span><br><span class=\"line\"><span class=\"attr\">github:</span> </span><br><span class=\"line\">  <span class=\"comment\"># (关闭请设置为false)</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">url:</span> <span class=\"string\">https://github.com/Shen-Yu/hexo-theme-ayer</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 网易云音乐插件</span></span><br><span class=\"line\"><span class=\"attr\">music:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"comment\"># 播放器尺寸类型(1：小尺寸、2：大尺寸)</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">id:</span> <span class=\"number\">22707008</span>  <span class=\"comment\"># 网易云分享的音乐ID(更换音乐请更改此配置项)</span></span><br><span class=\"line\">  <span class=\"attr\">autoPlay:</span> <span class=\"literal\">true</span>  <span class=\"comment\"># 是否开启自动播放</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 访问量统计(不蒜子)</span></span><br><span class=\"line\"><span class=\"attr\">busuanzi:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 友盟cnzz统计(url填js代码src链接)</span></span><br><span class=\"line\"><span class=\"attr\">cnzz:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">url:</span> <span class=\"comment\">#</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Google Analytics</span></span><br><span class=\"line\"><span class=\"attr\">google_analytics:</span> <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 百度统计</span></span><br><span class=\"line\"><span class=\"attr\">baidu_analytics:</span> <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Mathjax数学公式</span></span><br><span class=\"line\"><span class=\"attr\">mathjax:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Katex数学公式(allpost设置为false时只有头部设置math:true的文章才开启)</span></span><br><span class=\"line\"><span class=\"comment\"># 需要更换hexo渲染器，npm un hexo-renderer-marked -S &amp;&amp; npm i hexo-renderer-markdown-it-katex -S</span></span><br><span class=\"line\"><span class=\"attr\">katex:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">false</span> <span class=\"comment\"># true</span></span><br><span class=\"line\">  <span class=\"attr\">allpost:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">copy_tex:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 网站成立年份(默认为 2019，若填入年份小于当前年份，则显示为 2018-2019 类似的格式)</span></span><br><span class=\"line\"><span class=\"attr\">since:</span> <span class=\"number\">2019</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 是否显示页脚信息(建议保留，有助于本主题的推广)</span></span><br><span class=\"line\"><span class=\"attr\">pageFooter:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ICP备案信息尾部显示</span></span><br><span class=\"line\"><span class=\"attr\">icp:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">url:</span> <span class=\"string\">&#x27;http://www.beian.miit.gov.cn/&#x27;</span> <span class=\"comment\"># 备案链接</span></span><br><span class=\"line\">  <span class=\"attr\">text:</span> <span class=\"string\">&#x27;浙ICP备88888888&#x27;</span> <span class=\"comment\"># 备案信息</span></span><br><span class=\"line\"><span class=\"comment\"># 公安备案信息尾部显示</span></span><br><span class=\"line\"><span class=\"attr\">gongan:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">img:</span> <span class=\"string\">/images/beian.png</span> <span class=\"comment\">#公安备案图片</span></span><br><span class=\"line\">  <span class=\"attr\">url:</span> <span class=\"string\">&quot;http://www.beian.gov.cn/portal/registerSystemInfo?recordcode=01234567890123&quot;</span> <span class=\"comment\">#公安备案链接</span></span><br><span class=\"line\">  <span class=\"attr\">text:</span> <span class=\"string\">&quot;浙公网安备01234567890123号&quot;</span> <span class=\"comment\">#公安备案信息</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 友情链接</span></span><br><span class=\"line\"><span class=\"attr\">friends_link:</span></span><br><span class=\"line\">  <span class=\"string\">Ayer主题:</span> <span class=\"comment\">#网站名称</span></span><br><span class=\"line\">    <span class=\"comment\">#网站地址</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">https://github.com/Shen-Yu/hexo-theme-ayer</span></span><br><span class=\"line\">    <span class=\"comment\">#网站图片(可忽略不写)</span></span><br><span class=\"line\">    <span class=\"attr\">img:</span> <span class=\"string\">/images/ayer.png</span></span><br><span class=\"line\">  <span class=\"attr\">GitHub:</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">https://github.com/Shen-Yu</span></span><br><span class=\"line\">    <span class=\"attr\">img:</span> <span class=\"string\">https://i.loli.net/2020/09/07/indb4PRYDA98EkN.png</span></span><br><span class=\"line\">  <span class=\"string\">码云:</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">https://gitee.com/shen-yu</span></span><br><span class=\"line\">    <span class=\"attr\">img:</span> <span class=\"string\">https://i.loli.net/2020/09/07/K3AqO7h6krQFlRX.png</span></span><br><span class=\"line\">  <span class=\"string\">Hexo官网:</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">https://hexo.io</span></span><br><span class=\"line\">    <span class=\"attr\">img:</span> <span class=\"string\">https://i.loli.net/2020/09/07/UYGzjo7h68CRWny.png</span></span><br><span class=\"line\">  <span class=\"string\">Hexo图表插件:</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">https://github.com/Shen-Yu/hexo-tag-chart</span></span><br><span class=\"line\">    <span class=\"attr\">img:</span> <span class=\"string\">https://i.loli.net/2020/09/07/GIXBYE5SoylhR1r.png</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 评论：1、Valine(推荐)；2、Gitalk；3、Twikoo; 4.MiniValine</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1、Valine[一款快速、简洁且高效的无后端评论系统](https://github.com/xCss/Valine)</span></span><br><span class=\"line\"><span class=\"comment\"># 启用Valine必须先创建leancloud应用， 获取 id|key 填入即可</span></span><br><span class=\"line\"><span class=\"attr\">leancloud:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">app_id:</span> <span class=\"comment\">#</span></span><br><span class=\"line\">  <span class=\"attr\">app_key:</span> <span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Valine配置</span></span><br><span class=\"line\"><span class=\"attr\">valine:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span> <span class=\"comment\"># 是否启用</span></span><br><span class=\"line\">  <span class=\"attr\">avatar:</span> <span class=\"string\">monsterid</span> <span class=\"comment\"># 头像样式(https://valine.js.org/avatar.html)</span></span><br><span class=\"line\">  <span class=\"attr\">placeholder:</span> <span class=\"string\">给我的文章加点评论吧~</span> <span class=\"comment\"># placeholder</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2、Gitalk(https://github.com/gitalk/gitalk)</span></span><br><span class=\"line\"><span class=\"attr\">gitalk:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">false</span> <span class=\"comment\"># true</span></span><br><span class=\"line\">  <span class=\"attr\">clientID:</span> <span class=\"comment\"># GitHub Application Client ID</span></span><br><span class=\"line\">  <span class=\"attr\">clientSecret:</span> <span class=\"comment\"># Client Secret</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span> <span class=\"comment\"># Repository name</span></span><br><span class=\"line\">  <span class=\"attr\">owner:</span> <span class=\"comment\"># GitHub ID</span></span><br><span class=\"line\">  <span class=\"attr\">admin:</span> <span class=\"comment\"># GitHub ID</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3、Twikoo(https://github.com/imaegoo/twikoo)</span></span><br><span class=\"line\"><span class=\"attr\">twikoo:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">envId:</span> <span class=\"comment\">#</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4、MiniValine</span></span><br><span class=\"line\"><span class=\"comment\"># See: https://github.com/MiniValine/MiniValine</span></span><br><span class=\"line\"><span class=\"attr\">minivaline:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">md:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\"># 更多选项 https://minivaline.js.org/docs/cn/#/Options 按照yml格式继续填写即可 （除了 [el] 选项）  </span></span><br><span class=\"line\">  <span class=\"comment\"># emoticonUrl 等列表选项 可参考 https://github.com/MiniValine/hexo-next-minivaline</span></span><br><span class=\"line\">  <span class=\"comment\"># 下面是一个例子：</span></span><br><span class=\"line\">  <span class=\"attr\">backend:</span> <span class=\"string\">waline</span></span><br><span class=\"line\">  <span class=\"attr\">serverURL:</span> <span class=\"string\">https://waline.vercel.app</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 首页广告配置</span></span><br><span class=\"line\"><span class=\"comment\"># 可以根据需要自行增加ad_3，ad_4...，留空则不显示</span></span><br><span class=\"line\"><span class=\"attr\">ads:</span></span><br><span class=\"line\">  <span class=\"attr\">ad_1:</span></span><br><span class=\"line\">    <span class=\"attr\">title:</span> <span class=\"string\">腾讯云限时秒杀</span></span><br><span class=\"line\">    <span class=\"attr\">img:</span> <span class=\"string\">https://cdn.jsdelivr.net/gh/Shen-Yu/cdn/img/ad_1.jpg</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">https://curl.qcloud.com/ezctH6FU</span></span><br><span class=\"line\">    <span class=\"attr\">width:</span> <span class=\"number\">300</span></span><br><span class=\"line\">  <span class=\"attr\">ad_2:</span></span><br><span class=\"line\">    <span class=\"attr\">title:</span> <span class=\"string\">云服务器全球购低至2折</span></span><br><span class=\"line\">    <span class=\"attr\">img:</span> <span class=\"string\">https://cdn.jsdelivr.net/gh/Shen-Yu/cdn/img/ad_2.jpg</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">https://curl.qcloud.com/kvO7hb43</span></span><br><span class=\"line\">    <span class=\"attr\">width:</span> <span class=\"number\">300</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"插件-必需\"><a href=\"#插件-必需\" class=\"headerlink\" title=\"插件(必需)\"></a>插件(必需)</h2><ul>\n<li><p><a href=\"https://github.com/theme-next/hexo-generator-searchdb\">hexo-generator-searchdb</a> 用于搜索</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">hexo-generator-searchdb</span> <span class=\"string\">--save</span></span><br></pre></td></tr></table></figure>\n<p>然后将以下配置复制到你博客根目录下的 <code>_config.yml</code> 里（注意不是ayer目录下的）:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># hexo-generator-searchdb</span></span><br><span class=\"line\"><span class=\"attr\">search:</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">search.xml</span></span><br><span class=\"line\">  <span class=\"attr\">field:</span> <span class=\"string\">post</span></span><br><span class=\"line\">  <span class=\"attr\">format:</span> <span class=\"string\">html</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><a href=\"https://github.com/hexojs/hexo-generator-feed\">hexo-generator-feed</a> 用于生成RSS订阅</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">hexo-generator-feed</span> <span class=\"string\">--save</span></span><br></pre></td></tr></table></figure>\n\n<p>  然后将以下配置复制到你博客根目录下的 <code>_config.yml</code> 里（注意不是ayer目录下的）:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">feed:</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">atom</span></span><br><span class=\"line\">    <span class=\"attr\">path:</span> <span class=\"string\">atom.xml</span></span><br><span class=\"line\">    <span class=\"attr\">limit:</span> <span class=\"number\">20</span></span><br><span class=\"line\">    <span class=\"attr\">hub:</span></span><br><span class=\"line\">    <span class=\"attr\">content:</span></span><br><span class=\"line\">    <span class=\"attr\">content_limit:</span> <span class=\"number\">140</span></span><br><span class=\"line\">    <span class=\"attr\">content_limit_delim:</span> <span class=\"string\">&#x27; &#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">order_by:</span> <span class=\"string\">-date</span>\t</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"插件-可选\"><a href=\"#插件-可选\" class=\"headerlink\" title=\"插件(可选)\"></a>插件(可选)</h2><ul>\n<li><p><a href=\"https://github.com/netcan/hexo-generator-index-pin-top\">hexo-generator-index-pin-top</a> 用于文章置顶</p>\n</li>\n<li><p><a href=\"https://github.com/MikeCoder/hexo-blog-encrypt/blob/master/ReadMe.zh.md\">hexo-blog-encrypt</a> 用于文章加密</p>\n</li>\n<li><p><a href=\"https://github.com/MoePlayer/hexo-tag-aplayer/blob/master/docs/README-zh_cn.md\">hexo-tag-aplayer</a> 用于播放音乐</p>\n</li>\n<li><p><a href=\"https://github.com/MoePlayer/hexo-tag-dplayer\">hexo-tag-dplayer</a> 用于播放视频</p>\n</li>\n<li><p><a href=\"https://github.com/EYHN/hexo-helper-live2d/blob/master/README.zh-CN.md\">hexo-helper-live2d</a> 二次元看板娘</p>\n</li>\n</ul>\n<p>更多插件请见 <a href=\"https://hexo.io/plugins/\">hexo插件市场</a></p>\n<h2 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page categories</span><br></pre></td></tr></table></figure>\n<p>然后将以下复制到 /source/categories/index.md 文件</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: categories</span><br><span class=\"line\">type: &quot;categories&quot;</span><br><span class=\"line\">layout: &quot;categories&quot;</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page tags</span><br></pre></td></tr></table></figure>\n<p>配置同分类一样</p>\n<h2 id=\"友情链接\"><a href=\"#友情链接\" class=\"headerlink\" title=\"友情链接\"></a>友情链接</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page friends</span><br></pre></td></tr></table></figure>\n<p>然后将以下复制到 /source/friends/index.md 文件</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: friends</span><br><span class=\"line\">type: friends</span><br><span class=\"line\">layout: &quot;friends&quot;</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>然后在 ayer 主题目录下的 <code>_config.yml</code> 中自定义 <code>friends_link</code> 配置项即可</p>\n<h2 id=\"相册\"><a href=\"#相册\" class=\"headerlink\" title=\"相册\"></a>相册</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page photos</span><br></pre></td></tr></table></figure>\n<p>然后将以下复制到 /source/photos/index.md 文件，<code>img_url</code> 替换成图片路径，<code>caption</code> 替换成图片名称</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: Gallery</span><br><span class=\"line\"></span><br><span class=\"line\">albums: [</span><br><span class=\"line\"><span class=\"code\">        [&quot;img_url&quot;,&quot;img_caption&quot;],</span></span><br><span class=\"line\"><span class=\"code\">        [&quot;img_url&quot;,&quot;img_caption&quot;]</span></span><br><span class=\"line\"><span class=\"code\">        ]</span></span><br><span class=\"line\"><span class=\"code\">---</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"文章目录\"><a href=\"#文章目录\" class=\"headerlink\" title=\"文章目录\"></a>文章目录</h2><p>用 Tocbot 解析文章标题并生成目录</p>\n<ul>\n<li>将以下配置复制到你 ayer 主题目录下的 <code>_config.yml</code> 里：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Toc</span></span><br><span class=\"line\">toc: <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>当然你可能并不想所有文章都生成悬浮目录，你可以在文章顶部的配置中加一行来进行关闭：</li>\n</ul>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">no<span class=\"emphasis\">_toc: true</span></span><br><span class=\"line\"><span class=\"emphasis\">---</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h1><h2 id=\"一-本地图片引用了却无法显示\"><a href=\"#一-本地图片引用了却无法显示\" class=\"headerlink\" title=\"一.本地图片引用了却无法显示\"></a>一.本地图片引用了却无法显示</h2><blockquote>\n<p>插入图片的两种方法：</p>\n</blockquote>\n<ol>\n<li>引用图床</li>\n<li>引用本地图片。为了防止路径出错，建议使用图床。</li>\n</ol>\n<h3 id=\"1-图床\"><a href=\"#1-图床\" class=\"headerlink\" title=\"1.图床\"></a>1.图床</h3><p>推荐使用：<a href=\"https://sm.ms/\">SM.MS</a>，<a href=\"https://www.superbed.cn/\">聚合图床</a></p>\n<h3 id=\"2-本地图片\"><a href=\"#2-本地图片\" class=\"headerlink\" title=\"2.本地图片\"></a>2.本地图片</h3><p>参照 <a href=\"https://hexo.io/zh-cn/docs/asset-folders\">Hexo文档</a>，然后用这种方式引用图片：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% asset<span class=\"emphasis\">_img image.jpg [title] %&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><em>html引用图片</em><br>根据width and height来调整图片的大小</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;img src&#x3D;&quot;https:&#x2F;&#x2F;img.imgdb.cn&#x2F;item&#x2F;60431c61360785be54872edf&quot; width&#x3D;256 height&#x3D;256 &#x2F;&gt;</span><br></pre></td></tr></table></figure>\n\n\n<p>如果还是无法显示，请尝试在文章里用 html 的 img 标签来引用本地图片。</p>\n<h2 id=\"二-可以启动但是样式变形了\"><a href=\"#二-可以启动但是样式变形了\" class=\"headerlink\" title=\"二.可以启动但是样式变形了\"></a>二.可以启动但是样式变形了</h2><p>这很可能是因为你把博客部署到了服务器子目录，导致静态资源加载的路径不对，在此强烈建议你部署到根目录，github和码云都支持根目录部署，只要你把仓库名搞成和用户名一样就行了。</p>\n<h2 id=\"三-点击侧边栏页面无法显示\"><a href=\"#三-点击侧边栏页面无法显示\" class=\"headerlink\" title=\"三.点击侧边栏页面无法显示\"></a>三.点击侧边栏页面无法显示</h2><p>原因：ayer 主题目录下的 <code>config.yml</code> 里 menu 属性的路径不对，这需要你根据页面路径手动配置。</p>\n<p>以我的博客为例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\">  <span class=\"string\">主页:</span> <span class=\"string\">/</span></span><br><span class=\"line\">  <span class=\"string\">归档:</span> <span class=\"string\">/archives</span></span><br><span class=\"line\">  <span class=\"string\">分类:</span> <span class=\"string\">/categories</span></span><br><span class=\"line\">  <span class=\"string\">标签:</span> <span class=\"string\">/tags</span></span><br><span class=\"line\">  <span class=\"string\">旅行:</span> <span class=\"string\">/tags/旅行/</span></span><br><span class=\"line\">  <span class=\"string\">摄影:</span> <span class=\"string\">http://shenyu-vip.lofter.com</span></span><br><span class=\"line\">  <span class=\"string\">关于我:</span> <span class=\"string\">/2019/about</span></span><br></pre></td></tr></table></figure>\n\n<p>上面的 <code>归档/archives</code> 是固定的，你不需要修改，<code>标签</code>和<code>分类</code>都需要手动创建目录，<code>旅行</code>实际上就是一个标签页，当你在文章头部设置tags属性后就会自动生成，<code>摄影</code>是一个站外的绝对路径，<code>关于我</code>实际上就是一个正常的文章页。好了，现在一个侧边栏导航就已经配置好了。</p>\n<h2 id=\"四-为什么修改了配置却没有效果\"><a href=\"#四-为什么修改了配置却没有效果\" class=\"headerlink\" title=\"四.为什么修改了配置却没有效果\"></a>四.为什么修改了配置却没有效果</h2><p>建议每次生成站点或部署之前都用 <code>hexo clean</code> 命令清理一下缓存，请使用 Ctrl + F5 清除缓存并刷新页面。</p>\n<h2 id=\"五-怎么修改大标题和站点信息\"><a href=\"#五-怎么修改大标题和站点信息\" class=\"headerlink\" title=\"五.怎么修改大标题和站点信息\"></a>五.怎么修改大标题和站点信息</h2><p>参考 <a href=\"https://hexo.io/zh-cn/docs/configuration\">Hexo 文档</a></p>\n<p>站点配置文件 <code>_config.yml</code> 是 Hexo 站点根目录下的主配置文件（还不知道是哪里的，自己搜索），注意：别和 <code>ayer</code> 主题目录下的 <code>_config.yml</code> 搞混了。</p>\n<p>修改网站各种资料，例如标题、副标题和邮箱等个人资料，请修改 Hexo 博客目录下的 <code>_config.yml</code></p>\n<p>以我的博客为例：<br><img src=\"https://pic.downk.cc/item/5e75c69c9d7d586a54cf119d.jpg\"></p>\n<h2 id=\"六-怎么添加百度或谷歌统计\"><a href=\"#六-怎么添加百度或谷歌统计\" class=\"headerlink\" title=\"六.怎么添加百度或谷歌统计\"></a>六.怎么添加百度或谷歌统计</h2><h3 id=\"百度统计\"><a href=\"#百度统计\" class=\"headerlink\" title=\"百度统计\"></a>百度统计</h3><p>参考这里：<a href=\"https://tongji.baidu.com/web/help/article?id=174&type=0&castk=LTE=\">百度统计代码介绍</a></p>\n<p>在 ayer 的 config 配置里的 <code>baidu_analytics</code> 填上百度统计代码中的 <code>hm.js?</code> 后面那一串东西</p>\n<h3 id=\"谷歌统计\"><a href=\"#谷歌统计\" class=\"headerlink\" title=\"谷歌统计\"></a>谷歌统计</h3><p>参考这里：<a href=\"https://support.google.com/analytics/answer/1008015?hl=en\">Get started with Google Analytics</a></p>\n<p>在 ayer 的 config 配置里的 <code>google_analytics</code> 填上谷歌统计代码的跟踪 ID，即 UA 值(包含 UA)</p>\n<h2 id=\"七-怎么查看文章的访问量\"><a href=\"#七-怎么查看文章的访问量\" class=\"headerlink\" title=\"七.怎么查看文章的访问量\"></a>七.怎么查看文章的访问量</h2><p>在 ayer 的 config 配置里有 <code>busuanzi</code> 选项，默认设置为 <code>enable:true</code>，就开启了站点访问量的统计，站点尾部左下角的 <code>PV</code> 代表了当前页的访问次数，<code>UV</code> 代表了当前站点的访问人数。注意：不蒜子统计是根据当前域名来统计的，你在本地启动的时候由于是 localhost，所以数字会很大，部署到线上之后就会根据域名重新统计。</p>\n<h2 id=\"八-网易云音乐无法播放\"><a href=\"#八-网易云音乐无法播放\" class=\"headerlink\" title=\"八.网易云音乐无法播放\"></a>八.网易云音乐无法播放</h2><p>这是由于网易云音乐对部分歌曲做了版权限制，你可以多换几首试试，配置文件里的默认歌曲 <code>潮鳴り</code> 是可以播放的。如果你动手能力强，也可以试试音乐播放插件 <a href=\"https://github.com/MoePlayer/hexo-tag-aplayer/blob/master/docs/README-zh_cn.md\">hexo-tag-aplayer</a>，配合<code>MetingJS</code>可以支持对于 QQ音乐、网易云、虾米、酷狗、百度等平台的音乐播放。</p>\n<h2 id=\"九-分享链接无法打开\"><a href=\"#九-分享链接无法打开\" class=\"headerlink\" title=\"九.分享链接无法打开\"></a>九.分享链接无法打开</h2><p>你需要在 Hexo 博客目录下的 <code>_config.yml</code> 文件中把 url 配置成部署后的域名。</p>\n<h2 id=\"十-怎么让搜索引擎收录站点\"><a href=\"#十-怎么让搜索引擎收录站点\" class=\"headerlink\" title=\"十.怎么让搜索引擎收录站点\"></a>十.怎么让搜索引擎收录站点</h2><p>参考：<a href=\"/2020/hexo-seo\">Hexo站点SEO优化技巧</a></p>"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2022-06-29T05:20:45.833Z","updated":"2022-06-28T05:43:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4z9v5og00070s7efg9mhwax","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"多线程","date":"2022-06-29T09:07:11.000Z","_content":"\n### 1、 线程、进程、\n\n#### 1、进程\n\n**进程**(process)是程序的一次执行过程，或是正在运行的一个程序。是一个动态的过程：有它自身的产生、存在和消亡的过程。——生命周期\n\n##### 1.1 进程之间的通信方式\n\n1. 匿名管道通信\n2. 高级管道通信\n3. 有名管道通信\n4.  消息队列通信\n5. 信号量通信\n6.  信号\n7.  共享内存通信\n8.  套接字通信\n\n<!-- more -->\n\n#### 2、线程\n\n**线程**(thread)，进程可进一步细化为线程，是一个程序内部的一条执行路径。\n\n​\t一个Java应用程序java.exe，其实至少有三个线程：main()主线程，gc()垃圾回收线程，异常处理线程。当然如果发生异常，会影响主线程。\n\n**线程的状态：**创建(new)、就绪(runnable)、运行(running)、阻塞(blocked、time waiting、waiting）、消亡（dead）。\n\n​\t\t\ttime waiting（睡眠或等待一定的事件）、waiting（等待被唤醒）、blocked（阻塞）\n\n\n\n**使用多线程的优点**\n\n- 提高应用程序的响应。对图形化界面更有意义，可增强用户体验。\n- 提高计算机系统CPU的利用率\n- 改善程序结构。将既长又复杂的**进程**分为多个**线程**，独立运行，利于理解和修改\n\n\n\n### 2、Thread类\n\n> [Java并发编程：Thread类的使用 - Matrix海子 - 博客园 (cnblogs.com)](https://www.cnblogs.com/dolphin0520/p/3920357.html?msclkid=c130e6bbb70c11ec9db92ab38c68f94b)\n\n#### 2.1 创建一个新的线程\n\n##### **方法1**：继承线程\n\n```java\n/*\n    多线程创建的方法\n    1、创建一个继承Thread的类\n    2、重写Run方法---> 将此线程执行的操作写在run中\n    3、创建Thread 的对象\n    4、通过调用此方法的start()\n */\nclass PrimeThread extends Thread {\n    @Override\n    public void run() {\n        for (int i = 0; i < 20; i++) {\n            System.out.println(i + \",\");\n        }\n    }\n}\n\npublic class test01 {\n    // 主线程  main\n    public static void main(String[] args) throws IOException {\n        PrimeThread primeThread = new PrimeThread();   // 创建新的线程\n        primeThread.start(); // 启动新的线程，调用run方法\n\n        // 主线程的中执行\n        for (int i = 0; i < 20; i++) {\n            System.out.println( \"hello\");\n        }\n    }\n}\n```\n\n**注意点**\n\n1.如果自己手动调用**run()方法**，那么就只是普通方法，**没有启动多线程模式**。\n\n2.run()方法由JVM调用，什么时候调用，执行的过程控制都有操作系统的CPU调度决定。\n\n3.**想要启动多线程，必须调用start方法**。\n\n4.一个线程对象只能调用一次start()方法启动，如果重复调用了，则将抛出以上的异常IllegalThreadStateException。\n\n##### **方法2：继承Runable()**\n\n```java\nclass PrimeThread2 implements Runnable {\n    @Override\n    public void run() {\n        for (int i = 0; i < 20; i++) {\n            System.out.println(i + \",\");\n        }\n    }\n}\n\npublic class test01 {\n    // 主线程  main\n    public static void main(String[] args) throws IOException {\n        // 方法1：创建新线程的\n        PrimeThread primeThread = new PrimeThread();   // 创建新的线程\n        primeThread.start(); // 启动新的线程\n\n        // 方法2：创建新线程\n        PrimeThread2 primeThread2 = new PrimeThread2();\n        new Thread(primeThread2).start();   // 这里比较特殊了\n        \n        for (int i = 0; i < 20; i++) {\n            System.out.println( \"hello\");\n        }\n    }\n}\n```\n\n#### 2.2  Thread类常用方法\n\n1. **void** **start():** 启动线程，并执行对象的run()方法\n2. **run():** 线程在被调度时执行的操作\n3. **String** **getName():** 返回线程的名称\n4. **void** **setName(String** **name)**:设置该线程名称\n5. **static Thread currentThread():** 返回当前线程。在Thread子类中就是this，**通常用于主线程和Runnable实现类** （给主线程命名）\n6. **static** **void** **yield()**线程让步\n   1. 暂停当前正在执行的线程，把执行机会让给优先级相同或更高的线程\n   2. 若队列中没有同优先级的线程，忽略此方法\n7. **join()** **：**当某个程序执行流中调用其他线程的 join() 方法时，调用线程将被阻塞，直到 join() 方法加入的 join 线程执行完为止\n   1. 低优先级的线程也可以获得执行\n8. **static** **void** **sleep(long** **millis)****：**(指定时间:毫秒)\n   1. 令当前活动线程在指定时间段内放弃对CPU控制,使其他线程有机会被执行,时间到后重排队。\n   2.  抛出InterruptedException异常\n9. **stop():** 强制线程生命期结束，不推荐使用\n10. **boolean** **isAlive()**：返回boolean，判断线程是否还活着\n\n##### wait()和sleep()的区别\n\n- wait()方法会释放占有的对象锁，当前线程进入等待池，释放cpu,而其他正在等待的线程即可抢占此锁，获得锁的线程即可运行程序；\n- 线程的sleep()方法则表示，当前线程会休眠一段时间，休眠期间，会暂时释放cpu，但并不释放对象锁，也就是说，在休眠期间，其他线程依然无法进入被同步保护的代码内部，当前线程休眠结束时，会重新获得cpu执行权,从而执行被同步保护的代码。\n- **wait()和sleep()最大的不同在于wait()会释放对象锁，而sleep()不会释放对象锁。**\n\n#### 2.3 线程的调度\n\n1. 同优先级线程组成先进先出队列（先到先服务），使用时间片策略\n2. 对高优先级，使用优先调度的抢占式策略\n\njava中采用的是抢占式的策略，对于优先级高的会有更高的概率能够抢到cpu的使用权。\n\n**线程的优先级等级**\n\n​\tMAX_PRIORITY：10\n\n​\tMIN _PRIORITY：1\n\n​\tNORM_PRIORITY：5\n\n**涉及的方法**\n\n​\t**getPriority()** **：**返回线程优先值\n\n​\t**setPriority(int** **newPriority)** **：**改变线程的优先级\n\n**说明**\n\n   \t线程创建时继承父线程的优先级\n\n​\t\t**低优先级只是获得调度的概率低，并非一定是在高优先级线程之后才被调用**\n\n优先级的设定：\n\n​\t默认为  5\n\n```java\nMyThread myThread = new MyThread();\nmyThread.setPriority(10);\n```\n\n#### 2.4 线程的安全问题\n\nJVM避免线程安全的问题主要从：**原子性、可见性、有序性** 三个方面展开。\n\n原子性：操作**不能被线程调度机制中断**，要么**全部执行完毕**，**要么不执行**。\n\n可见性：一个线程对共享变量做了修改之后，**其他的线程立即能够看到修改后的值**。\n\n 有序性：即程序执行的顺序按照代码的先后顺序执行。\n\n##### **2.4.1 方法1 同步代码块  同步机制 synchronized**\n\n```java\nsynchronized (对象){\n// 需要被同步的代码；\n}\n```\n\n**注意： synchronized 的锁（对象）必须是唯一的，才能够实现线程安全**\n\n示例1 ：**继承的线程实现** extends Thread\n\n```java\n//书写售票的示例\nclass Demo extends Thread{\n    //定义变量记录剩余的票数\n    int num = 100;\n\n    //创建一个对象，用作同步中的锁对象\n    Object obj = new Object();    //****** 这里的锁必须是唯一的\n\n    //实现run方法\n    @Override\n    public void run()    {\n\n        //实现售票的过程\n        while( true )        {\n            //   t1  t2  t3\n            //判断当前有没有线程正在if中操作num，如果有当前线程就在这里临时等待\n            //这种思想称为线程的同步\n            //当票数小等于0的时候，就不再售票了\n            //使用同步代码块把线程要执行的任务代码可以同步起来\n            synchronized( obj )  //t1   在进入同步之前线程要先获取锁     ***** obj 锁唯一，不能是多个锁\n            /*\n                当某个线程执行到synchronized关键字之后，这时JVM会判断当前\n                同步上的这个对象有没有已经被其他线程获取走了，如果这时没有其他\n                线程获取这个对象，这时就会把当前同步上的这个对象交给当前正要进入\n                同步的这个线程。\n            */\n            {\n                if( num > 0 )\n                {\n                    //t0\n                    try{Thread.sleep(2);}catch( InterruptedException e ){}\n                    System.out.println(Thread.currentThread().getName()+\".....\"+num);\n                    num--;\n                }\n            }//线程执行完同步之后，那么这时当前这个线程就会把锁释放掉\n        }\n    }\n}\nclass ThreadDemo {\n    public static void main(String[] args)     {\n        //创建线程任务\n        Demo d = new Demo();\n        //创建线程对象\n        Thread t = new Thread( d );\n        Thread t2 = new Thread(d);\n        Thread t3 = new Thread(d);\n        Thread t4 = new Thread(d);\n        //开启线程\n        t.start();\n        t2.start();\n        t3.start();\n        t4.start();\n    }\n}\n```\n\n##### **2.4.2 使用同步方法来实现**  \n\n**继承的线程方法 **extends Thread \n\n```java\n//书写售票的示例\nclass Demo extends Thread{\n    //定义变量记录剩余的票数\n    int num = 100;\n\n    //实现run方法\n    @Override\n    public void run()    {\n        while( true )        {\n            show();  // 同步方法\n        }\n    }\n\n    public synchronized void show() {\n            if( num > 0 )\n            {\n                //t0\n                try{Thread.sleep(2);}catch( InterruptedException e ){}\n                System.out.println(Thread.currentThread().getName()+\".....\"+num);\n                num--;\n            }\n    }\n}\nclass ThreadDemo {\n    public static void main(String[] args)     {\n        //创建线程任务\n        Demo d = new Demo();\n        //创建线程对象\n        Thread t = new Thread( d );\n        Thread t2 = new Thread(d);\n        Thread t3 = new Thread(d);\n        Thread t4 = new Thread(d);\n        //开启线程\n        t.start();\n        t2.start();\n        t3.start();\n        t4.start();\n    }\n}\n```\n\n**实现Runable的线程方法 **implements Runnable \n\n```java\n//书写售票的示例\nclass Demo implements Runnable{\n    //定义变量记录剩余的票数\n    int num = 100;\n    //实现run方法\n    @Override\n    public void run()    {\n        while( true )        {\n            show();  // 同步方法\n        }\n    }\n    public static synchronized void show() {\n            if( num > 0 )\n            {\n                //t0\n                try{Thread.sleep(2);}catch( InterruptedException e ){}\n                System.out.println(Thread.currentThread().getName()+\".....\"+num);\n                num--;\n            }\n    }\n}\nclass ThreadDemo {\n    public static void main(String[] args)     {\n        //创建线程任务\n        Demo d = new Demo();\n        //创建线程对象\n        Thread t = new Thread( d );\n        Thread t2 = new Thread(d);\n        Thread t3 = new Thread(d);\n        Thread t4 = new Thread(d);\n        //开启线程\n        t.start();\n        t2.start();\n        t3.start();\n        t4.start();\n    }\n}\n```\n\n#### 2.5 懒汉式 的线程安全\n\n```java\nclass Single\n{\n    private static Object obj = new Object();\n    private Single() {}\n    private static  Single s = null;\n    public static Single getInstance()\n    {\n        // 方法1 \n        /*synchronized (obj) {\n            //先判断有没有对象\n            if( s == null )   //判断最后线程进入同步之后到底有没有对象，只有在没有对象的情况下才能创建对象\n            {\n                s = new Single();\n            }\n            return s;\n        }*/\n        // 方法2 // 这种方法为什么效率高\n        if( s == null )// 这里加判断的目的是保证后续来的线程不用在进入同步代码块中，这个可以提高后续程序效率\n        {\n            synchronized( obj )\n            {\n                //先判断有没有对象\n                if( s == null )   //判断最后线程进入同步之后到底有没有对象，只有在没有对象的情况下才能创建对象\n                {\n                    s = new Single();\n                }\n            }\n        }\n        return s;\n    }\n}\n\n```\n\n#### 2.6 死锁\n\n线程死锁是指两个或两个以上的线程互相持有对方所需要的资源，由于synchronized的特性，一个线程持有一个资源，或者说获得一个锁，在该线程释放这个锁之前，其它线程是获取不到这个锁的，而且会一直死等下去，因此这便造成了死锁。\n\n演示：\n\n```java\npublic class DeadLock {\n    private  Object lock1 = new Object();\n    private  Object lock2 = new Object();\n\n    public  void method1() throws InterruptedException {\n        synchronized(lock1){\n            System.out.println(Thread.currentThread().getName() + \"获取到lock1,请求获取lock2....\");\n            Thread.sleep(1000);\n            synchronized (lock2){\n                System.out.println(\"获取到lock2....\");\n            }\n        }\n    }\n    public  void method2() throws InterruptedException {\n        synchronized(lock2){\n            System.out.println(Thread.currentThread().getName() + \"获取到lock2,请求获取lock1....\");\n            Thread.sleep(1000);\n            synchronized (lock1){\n                System.out.println(\"获取到lock1....\");\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        DeadLock deadLock = new DeadLock();\n\n        new Thread(()-> {\n            try {\n                deadLock.method1();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }).start();\n        new Thread(()-> {\n            try {\n                deadLock.method2();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }).start();\n\n    }\n}\n```\n\n##### **如何避免死锁**\n\n- 加锁顺序：线程按照相同的顺序加锁。\n\n- 加锁时限，线程获取锁的过程中限制一定的时间，如果给定时间内获取不到，就算了，别勉强自己。\n\n  ```\n  lock2.tryLock(3, TimeUnit.SECONDS); // 等3s获取锁，获取不到也会继续向下走  lock表示线程\n  ```\n\n##### **如何来检查死锁**？\n\n使用 jstack或者pstack 和 gdb 工具进行分析，输出栈堆信息\n\n[Java如何查看死锁？_ZK_小姜的博客-CSDN博客_查看死锁](https://blog.csdn.net/u014039577/article/details/52351626)\n\n1. **Jconsole查看死锁**\n\n   进入java安装的位置，输入Jconsole，然后弹出界面（或者进入安装目录/java/jdk1.70_80/bin/，点击Jconsole.exe）：\n\n#### 2.8 线程池\n\n**线程池的种类**：lExecutors：工具类、线程池的工厂类，用于创建并返回不同类型的线程池\n\n- Executors.newCachedThreadPool()：创建一个可根据需要创建新线程的线程池\n- Executors.newFixedThreadPool(n); 创建一个可重用固定线程数的线程池\n- Executors.newSingleThreadExecutor() ：创建一个只有一个线程的线程池\n- Executors.newScheduledThreadPool(n)：创建一个线程池，它可安排在给定延迟后运行命令或者定期地执行。\n\n```java\nimport java.util.concurrent.ArrayBlockingQueue;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.TimeUnit;\npublic class ThreadPoolExecutorDemo {\n    // 设置各个参数\n    private static final int CORE_POOL_SIZE = 5;\n    private static final int MAX_POOL_SIZE = 10;\n    private static final int QUEUE_CAPACITY = 100;\n    private static final Long KEEP_ALIVE_TIME = 1L;\n\n    public static void main(String[] args) {\n        ThreadPoolExecutor executor = new ThreadPoolExecutor(\n                CORE_POOL_SIZE,\n                MAX_POOL_SIZE,\n                KEEP_ALIVE_TIME,\n                TimeUnit.SECONDS,\n                new ArrayBlockingQueue<>(QUEUE_CAPACITY),\n                new ThreadPoolExecutor.CallerRunsPolicy()\n        );\n        for (int i = 0; i < 10; i++) {\n            // 创建WorkerThread对象（该类实现了Runnable接口）\n            Runnable worker = new MyRunnable(\"\" + i);\n            // 执行Runnable\n            executor.execute(worker);\n        }\n        // 终止线程池\n        executor.shutdown();\n        while (!executor.isTerminated()) {\n        }\n        System.out.println(\"Finished all threads\");\n    }\n}\n```\n\n线程池的属性：\n\n1. **int corePoolSize** => 该线程池中**核心线程数最大值**\n2. **int maximumPoolSize** **线程总数最大值**\n3. **long keepAliveTime** **非核心线程闲置超时时长**\n4. `threadFactory`（线程工厂）：用于创建工作线程的工厂。\n5. `corePoolSize`（核心线程数）：当线程池运行的线程少于 corePoolSize 时，将创建一个新线程来处理请求，即使其他工作线程处于空闲状态。\n6. `workQueue`（队列）：用于保留任务并移交给工作线程的阻塞队列。\n7. `maximumPoolSize`（最大线程数）：线程池允许开启的最大线程数。\n8. `handler`（拒绝策略）：往线程池添加任务时，将在下面两种情况触发拒绝策略：1）线程池运行状态不是 RUNNING；2）线程池已经达到最大线程数，并且阻塞队列已满时。\n9. `keepAliveTime`（保持存活时间）：如果线程池当前线程数超过 corePoolSize，则多余的线程空闲时间超过 keepAliveTime 时会被终止。\n\n```java\npublic class ThreadDemo {\n    public static void main(String[] args) {\n        ExecutorService executorService = Executors.newCachedThreadPool();  // 线程池的创建\n        executorService.execute(new MyThread()); // 执行线程池\n        executorService.shutdown(); // 关闭线程池\n        \n    }\n}\nclass MyThread implements Runnable {\n    @Override\n    public void run() {\n        for (int i = 0; i < 50; i++) {\n            System.out.println(Thread.currentThread().getName() +\":\"+ i);\n        }\n    }\n}\n```\n\n#### 2.9 线程的生命周期\n\n​\t![img](线程、多线程.assets/0cd26da3d92bb6aff1bab9555826e8e4.png)\n\n**新建状态**（New）：当线程对象创建后就是进入到了新建状态，如：Thread t = new MyThread();\n\n**就绪状态**（Runnable）：当调用线程对象的start()方法，线程即进入到了就绪状态。处于就绪状态的线程，只是说明此线程已经做好了准备，随时等待CPU调度执行，并不\n\n是执行了start()此线程就会执行。\n\n**运行状态**（Running）：当CPU调度处于就绪状态的线程的时候，此时线程才会得以真正的执行，即进入运行状态。\n\n注：就绪状态是进入运行状态的唯一入口，也就是说线程进入运行状态的前提是已经进入到了就绪状态。\n\n**阻塞状态**（Blocked）：处于运行状态的线程由于某种原因，暂时放弃对CPU的使用权，停止执行，此时进入阻塞状态，知道进入到就绪状态，才有机会再次被CPU调用以进\n\n入到运行状态，根据产生阻塞状态的三原因，阻塞状态可以分为三种：\n\n- 等待阻塞--》运行状态的线程执行wait()方法，使线程进入到阻塞状态\n- 同步阻塞--》线程获取同步锁失败，因为同步锁被其他线程所占用，这时线程就会进入同步阻塞状态；\n- 其他阻塞--》通过调用线程的sleep()或join()或发出了I/O请求的时候线程会进入阻塞状态，当sleep()状态超时，join()等待线程终止或者超时，或者I/O处理完毕，线程就会重新转入就绪状态。\n\n**死亡状态**（Dead）：线程执行完了或者因一场退出了run()方法，该线程就结束了生命周期。\n\n##### 多个线程之间的通信：\n\n**wait()、notify()和 notifyAll()**\n\n [线程间的通信方式_LallanaLee的博客-CSDN博客_线程间的通信方式](https://blog.csdn.net/weixin_46217160/article/details/108743389)\n\n- 使用wait()、notify()和notifyAll()需要先调用对象加锁\n- 调用wait()方法后，线程状态由Running变成Waiting，并将当前线程放置到对象的等待队列\n- notify()和notifyAll()方法调用后，等待线程依旧不会从wait()返回，需要调用notify()和notifyAll()的线程释放锁之后等待线程才有机会从wait()返回\n- notify()方法将等待队列中的一个等待线程从等待队列中移到同步队列中，而notifyAll()方法则是将等待队列中所有的线程全部转移到同步队列，被移到的线程状态由Waiting变为Blocked。\n- 从wait()方法返回的前提是获得调用对象的锁\n\n#### 2.10 线程上下文切换\n\n多个线程可以执行在单核或多核CPU上，单核CPU也支持多线程执行代码，CPU通过给每个线程分配CPU时间片(机会)来实现这个机制。CPU为了执行多个线程，就需要不停的切换执行的线程，这样才能保证所有的线程在一段时间内都有被执行的机会。\n\n此时，CPU分配给每个线程的执行时间段，称作它的时间片。CPU时间片一般为几十毫秒。CPU通过时间片分配算法来循环执行任务，当前任务执行一个时间片后切换到下一个任务。\n\n但是，在切换前会保存上一个任务的状态，以便下次切换回这个任务时，可以再加载这个任务的状态。所以`任务从保存到再加载的过程就是一次上下文切换。`\n\n**根据多线程的运行状态来说明**：多线程环境中，当一个线程的状态由Runnable转换为非Runnable(Blocked、Waiting、Timed_Waiting)时，相应线程的上下文信息(包括CPU的寄存器和程序计数器在某一时间点的内容等)需要被保存，以便相应线程稍后再次进入Runnable状态时能够在之前的执行进度的基础上继续前进。而一个线程从非Runnable状态进入Runnable状态可能涉及恢复之前保存的上下文信息。这个对线程的上下文进行保存和恢复的过程就被称为上下文切换。\n\n###  3、并行和并发\n\n**并行：**多个CPU同时执行多个任务。比如：多个人同时做不同的事。\n\n**并发：**一个CPU(采用时间片)同时执行多个任务。比如：秒杀、多个人做同一件事。\n\n- 并发(concurrency)：指在同一时刻只能有一条指令执行，但多个进程指令被快速的轮换执行，使得在宏观上具有多个进程同时执行的效果，但在微观上并不是同时执行的，只是把时间分成若干段，使多个进程快速交替的执行。\n- 并行(parallel)：指在同一时刻，有多条指令在多个处理器上同时执行。所以无论从微观还是从宏观来看，二者都是一起执行的。\n\n\n\n","source":"_posts/多线程.md","raw":"---\ntitle: 多线程\ndate: 2022-06-29 17:07:11\ntags: ['技术']\ncategories: 技术\n---\n\n### 1、 线程、进程、\n\n#### 1、进程\n\n**进程**(process)是程序的一次执行过程，或是正在运行的一个程序。是一个动态的过程：有它自身的产生、存在和消亡的过程。——生命周期\n\n##### 1.1 进程之间的通信方式\n\n1. 匿名管道通信\n2. 高级管道通信\n3. 有名管道通信\n4.  消息队列通信\n5. 信号量通信\n6.  信号\n7.  共享内存通信\n8.  套接字通信\n\n<!-- more -->\n\n#### 2、线程\n\n**线程**(thread)，进程可进一步细化为线程，是一个程序内部的一条执行路径。\n\n​\t一个Java应用程序java.exe，其实至少有三个线程：main()主线程，gc()垃圾回收线程，异常处理线程。当然如果发生异常，会影响主线程。\n\n**线程的状态：**创建(new)、就绪(runnable)、运行(running)、阻塞(blocked、time waiting、waiting）、消亡（dead）。\n\n​\t\t\ttime waiting（睡眠或等待一定的事件）、waiting（等待被唤醒）、blocked（阻塞）\n\n\n\n**使用多线程的优点**\n\n- 提高应用程序的响应。对图形化界面更有意义，可增强用户体验。\n- 提高计算机系统CPU的利用率\n- 改善程序结构。将既长又复杂的**进程**分为多个**线程**，独立运行，利于理解和修改\n\n\n\n### 2、Thread类\n\n> [Java并发编程：Thread类的使用 - Matrix海子 - 博客园 (cnblogs.com)](https://www.cnblogs.com/dolphin0520/p/3920357.html?msclkid=c130e6bbb70c11ec9db92ab38c68f94b)\n\n#### 2.1 创建一个新的线程\n\n##### **方法1**：继承线程\n\n```java\n/*\n    多线程创建的方法\n    1、创建一个继承Thread的类\n    2、重写Run方法---> 将此线程执行的操作写在run中\n    3、创建Thread 的对象\n    4、通过调用此方法的start()\n */\nclass PrimeThread extends Thread {\n    @Override\n    public void run() {\n        for (int i = 0; i < 20; i++) {\n            System.out.println(i + \",\");\n        }\n    }\n}\n\npublic class test01 {\n    // 主线程  main\n    public static void main(String[] args) throws IOException {\n        PrimeThread primeThread = new PrimeThread();   // 创建新的线程\n        primeThread.start(); // 启动新的线程，调用run方法\n\n        // 主线程的中执行\n        for (int i = 0; i < 20; i++) {\n            System.out.println( \"hello\");\n        }\n    }\n}\n```\n\n**注意点**\n\n1.如果自己手动调用**run()方法**，那么就只是普通方法，**没有启动多线程模式**。\n\n2.run()方法由JVM调用，什么时候调用，执行的过程控制都有操作系统的CPU调度决定。\n\n3.**想要启动多线程，必须调用start方法**。\n\n4.一个线程对象只能调用一次start()方法启动，如果重复调用了，则将抛出以上的异常IllegalThreadStateException。\n\n##### **方法2：继承Runable()**\n\n```java\nclass PrimeThread2 implements Runnable {\n    @Override\n    public void run() {\n        for (int i = 0; i < 20; i++) {\n            System.out.println(i + \",\");\n        }\n    }\n}\n\npublic class test01 {\n    // 主线程  main\n    public static void main(String[] args) throws IOException {\n        // 方法1：创建新线程的\n        PrimeThread primeThread = new PrimeThread();   // 创建新的线程\n        primeThread.start(); // 启动新的线程\n\n        // 方法2：创建新线程\n        PrimeThread2 primeThread2 = new PrimeThread2();\n        new Thread(primeThread2).start();   // 这里比较特殊了\n        \n        for (int i = 0; i < 20; i++) {\n            System.out.println( \"hello\");\n        }\n    }\n}\n```\n\n#### 2.2  Thread类常用方法\n\n1. **void** **start():** 启动线程，并执行对象的run()方法\n2. **run():** 线程在被调度时执行的操作\n3. **String** **getName():** 返回线程的名称\n4. **void** **setName(String** **name)**:设置该线程名称\n5. **static Thread currentThread():** 返回当前线程。在Thread子类中就是this，**通常用于主线程和Runnable实现类** （给主线程命名）\n6. **static** **void** **yield()**线程让步\n   1. 暂停当前正在执行的线程，把执行机会让给优先级相同或更高的线程\n   2. 若队列中没有同优先级的线程，忽略此方法\n7. **join()** **：**当某个程序执行流中调用其他线程的 join() 方法时，调用线程将被阻塞，直到 join() 方法加入的 join 线程执行完为止\n   1. 低优先级的线程也可以获得执行\n8. **static** **void** **sleep(long** **millis)****：**(指定时间:毫秒)\n   1. 令当前活动线程在指定时间段内放弃对CPU控制,使其他线程有机会被执行,时间到后重排队。\n   2.  抛出InterruptedException异常\n9. **stop():** 强制线程生命期结束，不推荐使用\n10. **boolean** **isAlive()**：返回boolean，判断线程是否还活着\n\n##### wait()和sleep()的区别\n\n- wait()方法会释放占有的对象锁，当前线程进入等待池，释放cpu,而其他正在等待的线程即可抢占此锁，获得锁的线程即可运行程序；\n- 线程的sleep()方法则表示，当前线程会休眠一段时间，休眠期间，会暂时释放cpu，但并不释放对象锁，也就是说，在休眠期间，其他线程依然无法进入被同步保护的代码内部，当前线程休眠结束时，会重新获得cpu执行权,从而执行被同步保护的代码。\n- **wait()和sleep()最大的不同在于wait()会释放对象锁，而sleep()不会释放对象锁。**\n\n#### 2.3 线程的调度\n\n1. 同优先级线程组成先进先出队列（先到先服务），使用时间片策略\n2. 对高优先级，使用优先调度的抢占式策略\n\njava中采用的是抢占式的策略，对于优先级高的会有更高的概率能够抢到cpu的使用权。\n\n**线程的优先级等级**\n\n​\tMAX_PRIORITY：10\n\n​\tMIN _PRIORITY：1\n\n​\tNORM_PRIORITY：5\n\n**涉及的方法**\n\n​\t**getPriority()** **：**返回线程优先值\n\n​\t**setPriority(int** **newPriority)** **：**改变线程的优先级\n\n**说明**\n\n   \t线程创建时继承父线程的优先级\n\n​\t\t**低优先级只是获得调度的概率低，并非一定是在高优先级线程之后才被调用**\n\n优先级的设定：\n\n​\t默认为  5\n\n```java\nMyThread myThread = new MyThread();\nmyThread.setPriority(10);\n```\n\n#### 2.4 线程的安全问题\n\nJVM避免线程安全的问题主要从：**原子性、可见性、有序性** 三个方面展开。\n\n原子性：操作**不能被线程调度机制中断**，要么**全部执行完毕**，**要么不执行**。\n\n可见性：一个线程对共享变量做了修改之后，**其他的线程立即能够看到修改后的值**。\n\n 有序性：即程序执行的顺序按照代码的先后顺序执行。\n\n##### **2.4.1 方法1 同步代码块  同步机制 synchronized**\n\n```java\nsynchronized (对象){\n// 需要被同步的代码；\n}\n```\n\n**注意： synchronized 的锁（对象）必须是唯一的，才能够实现线程安全**\n\n示例1 ：**继承的线程实现** extends Thread\n\n```java\n//书写售票的示例\nclass Demo extends Thread{\n    //定义变量记录剩余的票数\n    int num = 100;\n\n    //创建一个对象，用作同步中的锁对象\n    Object obj = new Object();    //****** 这里的锁必须是唯一的\n\n    //实现run方法\n    @Override\n    public void run()    {\n\n        //实现售票的过程\n        while( true )        {\n            //   t1  t2  t3\n            //判断当前有没有线程正在if中操作num，如果有当前线程就在这里临时等待\n            //这种思想称为线程的同步\n            //当票数小等于0的时候，就不再售票了\n            //使用同步代码块把线程要执行的任务代码可以同步起来\n            synchronized( obj )  //t1   在进入同步之前线程要先获取锁     ***** obj 锁唯一，不能是多个锁\n            /*\n                当某个线程执行到synchronized关键字之后，这时JVM会判断当前\n                同步上的这个对象有没有已经被其他线程获取走了，如果这时没有其他\n                线程获取这个对象，这时就会把当前同步上的这个对象交给当前正要进入\n                同步的这个线程。\n            */\n            {\n                if( num > 0 )\n                {\n                    //t0\n                    try{Thread.sleep(2);}catch( InterruptedException e ){}\n                    System.out.println(Thread.currentThread().getName()+\".....\"+num);\n                    num--;\n                }\n            }//线程执行完同步之后，那么这时当前这个线程就会把锁释放掉\n        }\n    }\n}\nclass ThreadDemo {\n    public static void main(String[] args)     {\n        //创建线程任务\n        Demo d = new Demo();\n        //创建线程对象\n        Thread t = new Thread( d );\n        Thread t2 = new Thread(d);\n        Thread t3 = new Thread(d);\n        Thread t4 = new Thread(d);\n        //开启线程\n        t.start();\n        t2.start();\n        t3.start();\n        t4.start();\n    }\n}\n```\n\n##### **2.4.2 使用同步方法来实现**  \n\n**继承的线程方法 **extends Thread \n\n```java\n//书写售票的示例\nclass Demo extends Thread{\n    //定义变量记录剩余的票数\n    int num = 100;\n\n    //实现run方法\n    @Override\n    public void run()    {\n        while( true )        {\n            show();  // 同步方法\n        }\n    }\n\n    public synchronized void show() {\n            if( num > 0 )\n            {\n                //t0\n                try{Thread.sleep(2);}catch( InterruptedException e ){}\n                System.out.println(Thread.currentThread().getName()+\".....\"+num);\n                num--;\n            }\n    }\n}\nclass ThreadDemo {\n    public static void main(String[] args)     {\n        //创建线程任务\n        Demo d = new Demo();\n        //创建线程对象\n        Thread t = new Thread( d );\n        Thread t2 = new Thread(d);\n        Thread t3 = new Thread(d);\n        Thread t4 = new Thread(d);\n        //开启线程\n        t.start();\n        t2.start();\n        t3.start();\n        t4.start();\n    }\n}\n```\n\n**实现Runable的线程方法 **implements Runnable \n\n```java\n//书写售票的示例\nclass Demo implements Runnable{\n    //定义变量记录剩余的票数\n    int num = 100;\n    //实现run方法\n    @Override\n    public void run()    {\n        while( true )        {\n            show();  // 同步方法\n        }\n    }\n    public static synchronized void show() {\n            if( num > 0 )\n            {\n                //t0\n                try{Thread.sleep(2);}catch( InterruptedException e ){}\n                System.out.println(Thread.currentThread().getName()+\".....\"+num);\n                num--;\n            }\n    }\n}\nclass ThreadDemo {\n    public static void main(String[] args)     {\n        //创建线程任务\n        Demo d = new Demo();\n        //创建线程对象\n        Thread t = new Thread( d );\n        Thread t2 = new Thread(d);\n        Thread t3 = new Thread(d);\n        Thread t4 = new Thread(d);\n        //开启线程\n        t.start();\n        t2.start();\n        t3.start();\n        t4.start();\n    }\n}\n```\n\n#### 2.5 懒汉式 的线程安全\n\n```java\nclass Single\n{\n    private static Object obj = new Object();\n    private Single() {}\n    private static  Single s = null;\n    public static Single getInstance()\n    {\n        // 方法1 \n        /*synchronized (obj) {\n            //先判断有没有对象\n            if( s == null )   //判断最后线程进入同步之后到底有没有对象，只有在没有对象的情况下才能创建对象\n            {\n                s = new Single();\n            }\n            return s;\n        }*/\n        // 方法2 // 这种方法为什么效率高\n        if( s == null )// 这里加判断的目的是保证后续来的线程不用在进入同步代码块中，这个可以提高后续程序效率\n        {\n            synchronized( obj )\n            {\n                //先判断有没有对象\n                if( s == null )   //判断最后线程进入同步之后到底有没有对象，只有在没有对象的情况下才能创建对象\n                {\n                    s = new Single();\n                }\n            }\n        }\n        return s;\n    }\n}\n\n```\n\n#### 2.6 死锁\n\n线程死锁是指两个或两个以上的线程互相持有对方所需要的资源，由于synchronized的特性，一个线程持有一个资源，或者说获得一个锁，在该线程释放这个锁之前，其它线程是获取不到这个锁的，而且会一直死等下去，因此这便造成了死锁。\n\n演示：\n\n```java\npublic class DeadLock {\n    private  Object lock1 = new Object();\n    private  Object lock2 = new Object();\n\n    public  void method1() throws InterruptedException {\n        synchronized(lock1){\n            System.out.println(Thread.currentThread().getName() + \"获取到lock1,请求获取lock2....\");\n            Thread.sleep(1000);\n            synchronized (lock2){\n                System.out.println(\"获取到lock2....\");\n            }\n        }\n    }\n    public  void method2() throws InterruptedException {\n        synchronized(lock2){\n            System.out.println(Thread.currentThread().getName() + \"获取到lock2,请求获取lock1....\");\n            Thread.sleep(1000);\n            synchronized (lock1){\n                System.out.println(\"获取到lock1....\");\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        DeadLock deadLock = new DeadLock();\n\n        new Thread(()-> {\n            try {\n                deadLock.method1();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }).start();\n        new Thread(()-> {\n            try {\n                deadLock.method2();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }).start();\n\n    }\n}\n```\n\n##### **如何避免死锁**\n\n- 加锁顺序：线程按照相同的顺序加锁。\n\n- 加锁时限，线程获取锁的过程中限制一定的时间，如果给定时间内获取不到，就算了，别勉强自己。\n\n  ```\n  lock2.tryLock(3, TimeUnit.SECONDS); // 等3s获取锁，获取不到也会继续向下走  lock表示线程\n  ```\n\n##### **如何来检查死锁**？\n\n使用 jstack或者pstack 和 gdb 工具进行分析，输出栈堆信息\n\n[Java如何查看死锁？_ZK_小姜的博客-CSDN博客_查看死锁](https://blog.csdn.net/u014039577/article/details/52351626)\n\n1. **Jconsole查看死锁**\n\n   进入java安装的位置，输入Jconsole，然后弹出界面（或者进入安装目录/java/jdk1.70_80/bin/，点击Jconsole.exe）：\n\n#### 2.8 线程池\n\n**线程池的种类**：lExecutors：工具类、线程池的工厂类，用于创建并返回不同类型的线程池\n\n- Executors.newCachedThreadPool()：创建一个可根据需要创建新线程的线程池\n- Executors.newFixedThreadPool(n); 创建一个可重用固定线程数的线程池\n- Executors.newSingleThreadExecutor() ：创建一个只有一个线程的线程池\n- Executors.newScheduledThreadPool(n)：创建一个线程池，它可安排在给定延迟后运行命令或者定期地执行。\n\n```java\nimport java.util.concurrent.ArrayBlockingQueue;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.TimeUnit;\npublic class ThreadPoolExecutorDemo {\n    // 设置各个参数\n    private static final int CORE_POOL_SIZE = 5;\n    private static final int MAX_POOL_SIZE = 10;\n    private static final int QUEUE_CAPACITY = 100;\n    private static final Long KEEP_ALIVE_TIME = 1L;\n\n    public static void main(String[] args) {\n        ThreadPoolExecutor executor = new ThreadPoolExecutor(\n                CORE_POOL_SIZE,\n                MAX_POOL_SIZE,\n                KEEP_ALIVE_TIME,\n                TimeUnit.SECONDS,\n                new ArrayBlockingQueue<>(QUEUE_CAPACITY),\n                new ThreadPoolExecutor.CallerRunsPolicy()\n        );\n        for (int i = 0; i < 10; i++) {\n            // 创建WorkerThread对象（该类实现了Runnable接口）\n            Runnable worker = new MyRunnable(\"\" + i);\n            // 执行Runnable\n            executor.execute(worker);\n        }\n        // 终止线程池\n        executor.shutdown();\n        while (!executor.isTerminated()) {\n        }\n        System.out.println(\"Finished all threads\");\n    }\n}\n```\n\n线程池的属性：\n\n1. **int corePoolSize** => 该线程池中**核心线程数最大值**\n2. **int maximumPoolSize** **线程总数最大值**\n3. **long keepAliveTime** **非核心线程闲置超时时长**\n4. `threadFactory`（线程工厂）：用于创建工作线程的工厂。\n5. `corePoolSize`（核心线程数）：当线程池运行的线程少于 corePoolSize 时，将创建一个新线程来处理请求，即使其他工作线程处于空闲状态。\n6. `workQueue`（队列）：用于保留任务并移交给工作线程的阻塞队列。\n7. `maximumPoolSize`（最大线程数）：线程池允许开启的最大线程数。\n8. `handler`（拒绝策略）：往线程池添加任务时，将在下面两种情况触发拒绝策略：1）线程池运行状态不是 RUNNING；2）线程池已经达到最大线程数，并且阻塞队列已满时。\n9. `keepAliveTime`（保持存活时间）：如果线程池当前线程数超过 corePoolSize，则多余的线程空闲时间超过 keepAliveTime 时会被终止。\n\n```java\npublic class ThreadDemo {\n    public static void main(String[] args) {\n        ExecutorService executorService = Executors.newCachedThreadPool();  // 线程池的创建\n        executorService.execute(new MyThread()); // 执行线程池\n        executorService.shutdown(); // 关闭线程池\n        \n    }\n}\nclass MyThread implements Runnable {\n    @Override\n    public void run() {\n        for (int i = 0; i < 50; i++) {\n            System.out.println(Thread.currentThread().getName() +\":\"+ i);\n        }\n    }\n}\n```\n\n#### 2.9 线程的生命周期\n\n​\t![img](线程、多线程.assets/0cd26da3d92bb6aff1bab9555826e8e4.png)\n\n**新建状态**（New）：当线程对象创建后就是进入到了新建状态，如：Thread t = new MyThread();\n\n**就绪状态**（Runnable）：当调用线程对象的start()方法，线程即进入到了就绪状态。处于就绪状态的线程，只是说明此线程已经做好了准备，随时等待CPU调度执行，并不\n\n是执行了start()此线程就会执行。\n\n**运行状态**（Running）：当CPU调度处于就绪状态的线程的时候，此时线程才会得以真正的执行，即进入运行状态。\n\n注：就绪状态是进入运行状态的唯一入口，也就是说线程进入运行状态的前提是已经进入到了就绪状态。\n\n**阻塞状态**（Blocked）：处于运行状态的线程由于某种原因，暂时放弃对CPU的使用权，停止执行，此时进入阻塞状态，知道进入到就绪状态，才有机会再次被CPU调用以进\n\n入到运行状态，根据产生阻塞状态的三原因，阻塞状态可以分为三种：\n\n- 等待阻塞--》运行状态的线程执行wait()方法，使线程进入到阻塞状态\n- 同步阻塞--》线程获取同步锁失败，因为同步锁被其他线程所占用，这时线程就会进入同步阻塞状态；\n- 其他阻塞--》通过调用线程的sleep()或join()或发出了I/O请求的时候线程会进入阻塞状态，当sleep()状态超时，join()等待线程终止或者超时，或者I/O处理完毕，线程就会重新转入就绪状态。\n\n**死亡状态**（Dead）：线程执行完了或者因一场退出了run()方法，该线程就结束了生命周期。\n\n##### 多个线程之间的通信：\n\n**wait()、notify()和 notifyAll()**\n\n [线程间的通信方式_LallanaLee的博客-CSDN博客_线程间的通信方式](https://blog.csdn.net/weixin_46217160/article/details/108743389)\n\n- 使用wait()、notify()和notifyAll()需要先调用对象加锁\n- 调用wait()方法后，线程状态由Running变成Waiting，并将当前线程放置到对象的等待队列\n- notify()和notifyAll()方法调用后，等待线程依旧不会从wait()返回，需要调用notify()和notifyAll()的线程释放锁之后等待线程才有机会从wait()返回\n- notify()方法将等待队列中的一个等待线程从等待队列中移到同步队列中，而notifyAll()方法则是将等待队列中所有的线程全部转移到同步队列，被移到的线程状态由Waiting变为Blocked。\n- 从wait()方法返回的前提是获得调用对象的锁\n\n#### 2.10 线程上下文切换\n\n多个线程可以执行在单核或多核CPU上，单核CPU也支持多线程执行代码，CPU通过给每个线程分配CPU时间片(机会)来实现这个机制。CPU为了执行多个线程，就需要不停的切换执行的线程，这样才能保证所有的线程在一段时间内都有被执行的机会。\n\n此时，CPU分配给每个线程的执行时间段，称作它的时间片。CPU时间片一般为几十毫秒。CPU通过时间片分配算法来循环执行任务，当前任务执行一个时间片后切换到下一个任务。\n\n但是，在切换前会保存上一个任务的状态，以便下次切换回这个任务时，可以再加载这个任务的状态。所以`任务从保存到再加载的过程就是一次上下文切换。`\n\n**根据多线程的运行状态来说明**：多线程环境中，当一个线程的状态由Runnable转换为非Runnable(Blocked、Waiting、Timed_Waiting)时，相应线程的上下文信息(包括CPU的寄存器和程序计数器在某一时间点的内容等)需要被保存，以便相应线程稍后再次进入Runnable状态时能够在之前的执行进度的基础上继续前进。而一个线程从非Runnable状态进入Runnable状态可能涉及恢复之前保存的上下文信息。这个对线程的上下文进行保存和恢复的过程就被称为上下文切换。\n\n###  3、并行和并发\n\n**并行：**多个CPU同时执行多个任务。比如：多个人同时做不同的事。\n\n**并发：**一个CPU(采用时间片)同时执行多个任务。比如：秒杀、多个人做同一件事。\n\n- 并发(concurrency)：指在同一时刻只能有一条指令执行，但多个进程指令被快速的轮换执行，使得在宏观上具有多个进程同时执行的效果，但在微观上并不是同时执行的，只是把时间分成若干段，使多个进程快速交替的执行。\n- 并行(parallel)：指在同一时刻，有多条指令在多个处理器上同时执行。所以无论从微观还是从宏观来看，二者都是一起执行的。\n\n\n\n","slug":"多线程","published":1,"updated":"2022-06-29T06:48:23.606Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4z9v5oi00090s7ea0433om4","content":"<h3 id=\"1、-线程、进程、\"><a href=\"#1、-线程、进程、\" class=\"headerlink\" title=\"1、 线程、进程、\"></a>1、 线程、进程、</h3><h4 id=\"1、进程\"><a href=\"#1、进程\" class=\"headerlink\" title=\"1、进程\"></a>1、进程</h4><p><strong>进程</strong>(process)是程序的一次执行过程，或是正在运行的一个程序。是一个动态的过程：有它自身的产生、存在和消亡的过程。——生命周期</p>\n<h5 id=\"1-1-进程之间的通信方式\"><a href=\"#1-1-进程之间的通信方式\" class=\"headerlink\" title=\"1.1 进程之间的通信方式\"></a>1.1 进程之间的通信方式</h5><ol>\n<li>匿名管道通信</li>\n<li>高级管道通信</li>\n<li>有名管道通信</li>\n<li> 消息队列通信</li>\n<li>信号量通信</li>\n<li> 信号</li>\n<li> 共享内存通信</li>\n<li> 套接字通信</li>\n</ol>\n<span id=\"more\"></span>\n\n<h4 id=\"2、线程\"><a href=\"#2、线程\" class=\"headerlink\" title=\"2、线程\"></a>2、线程</h4><p><strong>线程</strong>(thread)，进程可进一步细化为线程，是一个程序内部的一条执行路径。</p>\n<p>​    一个Java应用程序java.exe，其实至少有三个线程：main()主线程，gc()垃圾回收线程，异常处理线程。当然如果发生异常，会影响主线程。</p>\n<p><strong>线程的状态：</strong>创建(new)、就绪(runnable)、运行(running)、阻塞(blocked、time waiting、waiting）、消亡（dead）。</p>\n<p>​            time waiting（睡眠或等待一定的事件）、waiting（等待被唤醒）、blocked（阻塞）</p>\n<p><strong>使用多线程的优点</strong></p>\n<ul>\n<li>提高应用程序的响应。对图形化界面更有意义，可增强用户体验。</li>\n<li>提高计算机系统CPU的利用率</li>\n<li>改善程序结构。将既长又复杂的<strong>进程</strong>分为多个<strong>线程</strong>，独立运行，利于理解和修改</li>\n</ul>\n<h3 id=\"2、Thread类\"><a href=\"#2、Thread类\" class=\"headerlink\" title=\"2、Thread类\"></a>2、Thread类</h3><blockquote>\n<p><a href=\"https://www.cnblogs.com/dolphin0520/p/3920357.html?msclkid=c130e6bbb70c11ec9db92ab38c68f94b\">Java并发编程：Thread类的使用 - Matrix海子 - 博客园 (cnblogs.com)</a></p>\n</blockquote>\n<h4 id=\"2-1-创建一个新的线程\"><a href=\"#2-1-创建一个新的线程\" class=\"headerlink\" title=\"2.1 创建一个新的线程\"></a>2.1 创建一个新的线程</h4><h5 id=\"方法1：继承线程\"><a href=\"#方法1：继承线程\" class=\"headerlink\" title=\"方法1：继承线程\"></a><strong>方法1</strong>：继承线程</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    多线程创建的方法</span></span><br><span class=\"line\"><span class=\"comment\">    1、创建一个继承Thread的类</span></span><br><span class=\"line\"><span class=\"comment\">    2、重写Run方法---&gt; 将此线程执行的操作写在run中</span></span><br><span class=\"line\"><span class=\"comment\">    3、创建Thread 的对象</span></span><br><span class=\"line\"><span class=\"comment\">    4、通过调用此方法的start()</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrimeThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; i++) &#123;</span><br><span class=\"line\">            System.out.println(i + <span class=\"string\">&quot;,&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test01</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 主线程  main</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        PrimeThread primeThread = <span class=\"keyword\">new</span> PrimeThread();   <span class=\"comment\">// 创建新的线程</span></span><br><span class=\"line\">        primeThread.start(); <span class=\"comment\">// 启动新的线程，调用run方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 主线程的中执行</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; i++) &#123;</span><br><span class=\"line\">            System.out.println( <span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意点</strong></p>\n<p>1.如果自己手动调用<strong>run()方法</strong>，那么就只是普通方法，<strong>没有启动多线程模式</strong>。</p>\n<p>2.run()方法由JVM调用，什么时候调用，执行的过程控制都有操作系统的CPU调度决定。</p>\n<p>3.<strong>想要启动多线程，必须调用start方法</strong>。</p>\n<p>4.一个线程对象只能调用一次start()方法启动，如果重复调用了，则将抛出以上的异常IllegalThreadStateException。</p>\n<h5 id=\"方法2：继承Runable\"><a href=\"#方法2：继承Runable\" class=\"headerlink\" title=\"方法2：继承Runable()\"></a><strong>方法2：继承Runable()</strong></h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrimeThread2</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; i++) &#123;</span><br><span class=\"line\">            System.out.println(i + <span class=\"string\">&quot;,&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test01</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 主线程  main</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 方法1：创建新线程的</span></span><br><span class=\"line\">        PrimeThread primeThread = <span class=\"keyword\">new</span> PrimeThread();   <span class=\"comment\">// 创建新的线程</span></span><br><span class=\"line\">        primeThread.start(); <span class=\"comment\">// 启动新的线程</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 方法2：创建新线程</span></span><br><span class=\"line\">        PrimeThread2 primeThread2 = <span class=\"keyword\">new</span> PrimeThread2();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(primeThread2).start();   <span class=\"comment\">// 这里比较特殊了</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; i++) &#123;</span><br><span class=\"line\">            System.out.println( <span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-Thread类常用方法\"><a href=\"#2-2-Thread类常用方法\" class=\"headerlink\" title=\"2.2  Thread类常用方法\"></a>2.2  Thread类常用方法</h4><ol>\n<li><strong>void</strong> <strong>start():</strong> 启动线程，并执行对象的run()方法</li>\n<li><strong>run():</strong> 线程在被调度时执行的操作</li>\n<li><strong>String</strong> <strong>getName():</strong> 返回线程的名称</li>\n<li><strong>void</strong> <strong>setName(String</strong> <strong>name)</strong>:设置该线程名称</li>\n<li><strong>static Thread currentThread():</strong> 返回当前线程。在Thread子类中就是this，<strong>通常用于主线程和Runnable实现类</strong> （给主线程命名）</li>\n<li><strong>static</strong> <strong>void</strong> **yield()**线程让步<ol>\n<li>暂停当前正在执行的线程，把执行机会让给优先级相同或更高的线程</li>\n<li>若队列中没有同优先级的线程，忽略此方法</li>\n</ol>\n</li>\n<li><strong>join()</strong> <strong>：</strong>当某个程序执行流中调用其他线程的 join() 方法时，调用线程将被阻塞，直到 join() 方法加入的 join 线程执行完为止<ol>\n<li>低优先级的线程也可以获得执行</li>\n</ol>\n</li>\n<li><strong>static</strong> <strong>void</strong> <strong>sleep(long</strong> <strong>millis)**</strong>：**(指定时间:毫秒)<ol>\n<li>令当前活动线程在指定时间段内放弃对CPU控制,使其他线程有机会被执行,时间到后重排队。</li>\n<li> 抛出InterruptedException异常</li>\n</ol>\n</li>\n<li><strong>stop():</strong> 强制线程生命期结束，不推荐使用</li>\n<li><strong>boolean</strong> **isAlive()**：返回boolean，判断线程是否还活着</li>\n</ol>\n<h5 id=\"wait-和sleep-的区别\"><a href=\"#wait-和sleep-的区别\" class=\"headerlink\" title=\"wait()和sleep()的区别\"></a>wait()和sleep()的区别</h5><ul>\n<li>wait()方法会释放占有的对象锁，当前线程进入等待池，释放cpu,而其他正在等待的线程即可抢占此锁，获得锁的线程即可运行程序；</li>\n<li>线程的sleep()方法则表示，当前线程会休眠一段时间，休眠期间，会暂时释放cpu，但并不释放对象锁，也就是说，在休眠期间，其他线程依然无法进入被同步保护的代码内部，当前线程休眠结束时，会重新获得cpu执行权,从而执行被同步保护的代码。</li>\n<li><strong>wait()和sleep()最大的不同在于wait()会释放对象锁，而sleep()不会释放对象锁。</strong></li>\n</ul>\n<h4 id=\"2-3-线程的调度\"><a href=\"#2-3-线程的调度\" class=\"headerlink\" title=\"2.3 线程的调度\"></a>2.3 线程的调度</h4><ol>\n<li>同优先级线程组成先进先出队列（先到先服务），使用时间片策略</li>\n<li>对高优先级，使用优先调度的抢占式策略</li>\n</ol>\n<p>java中采用的是抢占式的策略，对于优先级高的会有更高的概率能够抢到cpu的使用权。</p>\n<p><strong>线程的优先级等级</strong></p>\n<p>​    MAX_PRIORITY：10</p>\n<p>​    MIN _PRIORITY：1</p>\n<p>​    NORM_PRIORITY：5</p>\n<p><strong>涉及的方法</strong></p>\n<p>​    <strong>getPriority()</strong> <strong>：</strong>返回线程优先值</p>\n<p>​    <strong>setPriority(int</strong> <strong>newPriority)</strong> <strong>：</strong>改变线程的优先级</p>\n<p><strong>说明</strong></p>\n<pre><code>   线程创建时继承父线程的优先级\n</code></pre>\n<p>​        <strong>低优先级只是获得调度的概率低，并非一定是在高优先级线程之后才被调用</strong></p>\n<p>优先级的设定：</p>\n<p>​    默认为  5</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyThread myThread = <span class=\"keyword\">new</span> MyThread();</span><br><span class=\"line\">myThread.setPriority(<span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-4-线程的安全问题\"><a href=\"#2-4-线程的安全问题\" class=\"headerlink\" title=\"2.4 线程的安全问题\"></a>2.4 线程的安全问题</h4><p>JVM避免线程安全的问题主要从：<strong>原子性、可见性、有序性</strong> 三个方面展开。</p>\n<p>原子性：操作<strong>不能被线程调度机制中断</strong>，要么<strong>全部执行完毕</strong>，<strong>要么不执行</strong>。</p>\n<p>可见性：一个线程对共享变量做了修改之后，<strong>其他的线程立即能够看到修改后的值</strong>。</p>\n<p> 有序性：即程序执行的顺序按照代码的先后顺序执行。</p>\n<h5 id=\"2-4-1-方法1-同步代码块-同步机制-synchronized\"><a href=\"#2-4-1-方法1-同步代码块-同步机制-synchronized\" class=\"headerlink\" title=\"2.4.1 方法1 同步代码块  同步机制 synchronized\"></a><strong>2.4.1 方法1 同步代码块  同步机制 synchronized</strong></h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">synchronized</span> (对象)&#123;</span><br><span class=\"line\"><span class=\"comment\">// 需要被同步的代码；</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意： synchronized 的锁（对象）必须是唯一的，才能够实现线程安全</strong></p>\n<p>示例1 ：<strong>继承的线程实现</strong> extends Thread</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//书写售票的示例</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//定义变量记录剩余的票数</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> num = <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//创建一个对象，用作同步中的锁对象</span></span><br><span class=\"line\">    Object obj = <span class=\"keyword\">new</span> Object();    <span class=\"comment\">//****** 这里的锁必须是唯一的</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//实现run方法</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span>    </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//实现售票的过程</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>( <span class=\"keyword\">true</span> )        &#123;</span><br><span class=\"line\">            <span class=\"comment\">//   t1  t2  t3</span></span><br><span class=\"line\">            <span class=\"comment\">//判断当前有没有线程正在if中操作num，如果有当前线程就在这里临时等待</span></span><br><span class=\"line\">            <span class=\"comment\">//这种思想称为线程的同步</span></span><br><span class=\"line\">            <span class=\"comment\">//当票数小等于0的时候，就不再售票了</span></span><br><span class=\"line\">            <span class=\"comment\">//使用同步代码块把线程要执行的任务代码可以同步起来</span></span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span>( obj )  <span class=\"comment\">//t1   在进入同步之前线程要先获取锁     ***** obj 锁唯一，不能是多个锁</span></span><br><span class=\"line\">            <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">                当某个线程执行到synchronized关键字之后，这时JVM会判断当前</span></span><br><span class=\"line\"><span class=\"comment\">                同步上的这个对象有没有已经被其他线程获取走了，如果这时没有其他</span></span><br><span class=\"line\"><span class=\"comment\">                线程获取这个对象，这时就会把当前同步上的这个对象交给当前正要进入</span></span><br><span class=\"line\"><span class=\"comment\">                同步的这个线程。</span></span><br><span class=\"line\"><span class=\"comment\">            */</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>( num &gt; <span class=\"number\">0</span> )</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//t0</span></span><br><span class=\"line\">                    <span class=\"keyword\">try</span>&#123;Thread.sleep(<span class=\"number\">2</span>);&#125;<span class=\"keyword\">catch</span>( InterruptedException e )&#123;&#125;</span><br><span class=\"line\">                    System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot;.....&quot;</span>+num);</span><br><span class=\"line\">                    num--;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;<span class=\"comment\">//线程执行完同步之后，那么这时当前这个线程就会把锁释放掉</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span>     </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建线程任务</span></span><br><span class=\"line\">        Demo d = <span class=\"keyword\">new</span> Demo();</span><br><span class=\"line\">        <span class=\"comment\">//创建线程对象</span></span><br><span class=\"line\">        Thread t = <span class=\"keyword\">new</span> Thread( d );</span><br><span class=\"line\">        Thread t2 = <span class=\"keyword\">new</span> Thread(d);</span><br><span class=\"line\">        Thread t3 = <span class=\"keyword\">new</span> Thread(d);</span><br><span class=\"line\">        Thread t4 = <span class=\"keyword\">new</span> Thread(d);</span><br><span class=\"line\">        <span class=\"comment\">//开启线程</span></span><br><span class=\"line\">        t.start();</span><br><span class=\"line\">        t2.start();</span><br><span class=\"line\">        t3.start();</span><br><span class=\"line\">        t4.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-4-2-使用同步方法来实现\"><a href=\"#2-4-2-使用同步方法来实现\" class=\"headerlink\" title=\"2.4.2 使用同步方法来实现\"></a><strong>2.4.2 使用同步方法来实现</strong></h5><p>**继承的线程方法 **extends Thread </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//书写售票的示例</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//定义变量记录剩余的票数</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> num = <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//实现run方法</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span>    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>( <span class=\"keyword\">true</span> )        &#123;</span><br><span class=\"line\">            show();  <span class=\"comment\">// 同步方法</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>( num &gt; <span class=\"number\">0</span> )</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">//t0</span></span><br><span class=\"line\">                <span class=\"keyword\">try</span>&#123;Thread.sleep(<span class=\"number\">2</span>);&#125;<span class=\"keyword\">catch</span>( InterruptedException e )&#123;&#125;</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot;.....&quot;</span>+num);</span><br><span class=\"line\">                num--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span>     </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建线程任务</span></span><br><span class=\"line\">        Demo d = <span class=\"keyword\">new</span> Demo();</span><br><span class=\"line\">        <span class=\"comment\">//创建线程对象</span></span><br><span class=\"line\">        Thread t = <span class=\"keyword\">new</span> Thread( d );</span><br><span class=\"line\">        Thread t2 = <span class=\"keyword\">new</span> Thread(d);</span><br><span class=\"line\">        Thread t3 = <span class=\"keyword\">new</span> Thread(d);</span><br><span class=\"line\">        Thread t4 = <span class=\"keyword\">new</span> Thread(d);</span><br><span class=\"line\">        <span class=\"comment\">//开启线程</span></span><br><span class=\"line\">        t.start();</span><br><span class=\"line\">        t2.start();</span><br><span class=\"line\">        t3.start();</span><br><span class=\"line\">        t4.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>**实现Runable的线程方法 **implements Runnable </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//书写售票的示例</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//定义变量记录剩余的票数</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> num = <span class=\"number\">100</span>;</span><br><span class=\"line\">    <span class=\"comment\">//实现run方法</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span>    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>( <span class=\"keyword\">true</span> )        &#123;</span><br><span class=\"line\">            show();  <span class=\"comment\">// 同步方法</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>( num &gt; <span class=\"number\">0</span> )</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">//t0</span></span><br><span class=\"line\">                <span class=\"keyword\">try</span>&#123;Thread.sleep(<span class=\"number\">2</span>);&#125;<span class=\"keyword\">catch</span>( InterruptedException e )&#123;&#125;</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot;.....&quot;</span>+num);</span><br><span class=\"line\">                num--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span>     </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建线程任务</span></span><br><span class=\"line\">        Demo d = <span class=\"keyword\">new</span> Demo();</span><br><span class=\"line\">        <span class=\"comment\">//创建线程对象</span></span><br><span class=\"line\">        Thread t = <span class=\"keyword\">new</span> Thread( d );</span><br><span class=\"line\">        Thread t2 = <span class=\"keyword\">new</span> Thread(d);</span><br><span class=\"line\">        Thread t3 = <span class=\"keyword\">new</span> Thread(d);</span><br><span class=\"line\">        Thread t4 = <span class=\"keyword\">new</span> Thread(d);</span><br><span class=\"line\">        <span class=\"comment\">//开启线程</span></span><br><span class=\"line\">        t.start();</span><br><span class=\"line\">        t2.start();</span><br><span class=\"line\">        t3.start();</span><br><span class=\"line\">        t4.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-5-懒汉式-的线程安全\"><a href=\"#2-5-懒汉式-的线程安全\" class=\"headerlink\" title=\"2.5 懒汉式 的线程安全\"></a>2.5 懒汉式 的线程安全</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Single</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Object obj = <span class=\"keyword\">new</span> Object();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Single</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span>  Single s = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Single <span class=\"title\">getInstance</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 方法1 </span></span><br><span class=\"line\">        <span class=\"comment\">/*synchronized (obj) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            //先判断有没有对象</span></span><br><span class=\"line\"><span class=\"comment\">            if( s == null )   //判断最后线程进入同步之后到底有没有对象，只有在没有对象的情况下才能创建对象</span></span><br><span class=\"line\"><span class=\"comment\">            &#123;</span></span><br><span class=\"line\"><span class=\"comment\">                s = new Single();</span></span><br><span class=\"line\"><span class=\"comment\">            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">            return s;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;*/</span></span><br><span class=\"line\">        <span class=\"comment\">// 方法2 // 这种方法为什么效率高</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>( s == <span class=\"keyword\">null</span> )<span class=\"comment\">// 这里加判断的目的是保证后续来的线程不用在进入同步代码块中，这个可以提高后续程序效率</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span>( obj )</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">//先判断有没有对象</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>( s == <span class=\"keyword\">null</span> )   <span class=\"comment\">//判断最后线程进入同步之后到底有没有对象，只有在没有对象的情况下才能创建对象</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    s = <span class=\"keyword\">new</span> Single();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-6-死锁\"><a href=\"#2-6-死锁\" class=\"headerlink\" title=\"2.6 死锁\"></a>2.6 死锁</h4><p>线程死锁是指两个或两个以上的线程互相持有对方所需要的资源，由于synchronized的特性，一个线程持有一个资源，或者说获得一个锁，在该线程释放这个锁之前，其它线程是获取不到这个锁的，而且会一直死等下去，因此这便造成了死锁。</p>\n<p>演示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DeadLock</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span>  Object lock1 = <span class=\"keyword\">new</span> Object();</span><br><span class=\"line\">    <span class=\"keyword\">private</span>  Object lock2 = <span class=\"keyword\">new</span> Object();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span>  <span class=\"keyword\">void</span> <span class=\"title\">method1</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span>(lock1)&#123;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;获取到lock1,请求获取lock2....&quot;</span>);</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (lock2)&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;获取到lock2....&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span>  <span class=\"keyword\">void</span> <span class=\"title\">method2</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span>(lock2)&#123;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;获取到lock2,请求获取lock1....&quot;</span>);</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (lock1)&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;获取到lock1....&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        DeadLock deadLock = <span class=\"keyword\">new</span> DeadLock();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(()-&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                deadLock.method1();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(()-&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                deadLock.method2();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"如何避免死锁\"><a href=\"#如何避免死锁\" class=\"headerlink\" title=\"如何避免死锁\"></a><strong>如何避免死锁</strong></h5><ul>\n<li><p>加锁顺序：线程按照相同的顺序加锁。</p>\n</li>\n<li><p>加锁时限，线程获取锁的过程中限制一定的时间，如果给定时间内获取不到，就算了，别勉强自己。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lock2.tryLock(3, TimeUnit.SECONDS); &#x2F;&#x2F; 等3s获取锁，获取不到也会继续向下走  lock表示线程</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h5 id=\"如何来检查死锁？\"><a href=\"#如何来检查死锁？\" class=\"headerlink\" title=\"如何来检查死锁？\"></a><strong>如何来检查死锁</strong>？</h5><p>使用 jstack或者pstack 和 gdb 工具进行分析，输出栈堆信息</p>\n<p><a href=\"https://blog.csdn.net/u014039577/article/details/52351626\">Java如何查看死锁？_ZK_小姜的博客-CSDN博客_查看死锁</a></p>\n<ol>\n<li><p><strong>Jconsole查看死锁</strong></p>\n<p>进入java安装的位置，输入Jconsole，然后弹出界面（或者进入安装目录/java/jdk1.70_80/bin/，点击Jconsole.exe）：</p>\n</li>\n</ol>\n<h4 id=\"2-8-线程池\"><a href=\"#2-8-线程池\" class=\"headerlink\" title=\"2.8 线程池\"></a>2.8 线程池</h4><p><strong>线程池的种类</strong>：lExecutors：工具类、线程池的工厂类，用于创建并返回不同类型的线程池</p>\n<ul>\n<li>Executors.newCachedThreadPool()：创建一个可根据需要创建新线程的线程池</li>\n<li>Executors.newFixedThreadPool(n); 创建一个可重用固定线程数的线程池</li>\n<li>Executors.newSingleThreadExecutor() ：创建一个只有一个线程的线程池</li>\n<li>Executors.newScheduledThreadPool(n)：创建一个线程池，它可安排在给定延迟后运行命令或者定期地执行。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ArrayBlockingQueue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ThreadPoolExecutor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadPoolExecutorDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 设置各个参数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> CORE_POOL_SIZE = <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MAX_POOL_SIZE = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> QUEUE_CAPACITY = <span class=\"number\">100</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Long KEEP_ALIVE_TIME = <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ThreadPoolExecutor executor = <span class=\"keyword\">new</span> ThreadPoolExecutor(</span><br><span class=\"line\">                CORE_POOL_SIZE,</span><br><span class=\"line\">                MAX_POOL_SIZE,</span><br><span class=\"line\">                KEEP_ALIVE_TIME,</span><br><span class=\"line\">                TimeUnit.SECONDS,</span><br><span class=\"line\">                <span class=\"keyword\">new</span> ArrayBlockingQueue&lt;&gt;(QUEUE_CAPACITY),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> ThreadPoolExecutor.CallerRunsPolicy()</span><br><span class=\"line\">        );</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 创建WorkerThread对象（该类实现了Runnable接口）</span></span><br><span class=\"line\">            Runnable worker = <span class=\"keyword\">new</span> MyRunnable(<span class=\"string\">&quot;&quot;</span> + i);</span><br><span class=\"line\">            <span class=\"comment\">// 执行Runnable</span></span><br><span class=\"line\">            executor.execute(worker);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 终止线程池</span></span><br><span class=\"line\">        executor.shutdown();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!executor.isTerminated()) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Finished all threads&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>线程池的属性：</p>\n<ol>\n<li><strong>int corePoolSize</strong> =&gt; 该线程池中<strong>核心线程数最大值</strong></li>\n<li><strong>int maximumPoolSize</strong> <strong>线程总数最大值</strong></li>\n<li><strong>long keepAliveTime</strong> <strong>非核心线程闲置超时时长</strong></li>\n<li><code>threadFactory</code>（线程工厂）：用于创建工作线程的工厂。</li>\n<li><code>corePoolSize</code>（核心线程数）：当线程池运行的线程少于 corePoolSize 时，将创建一个新线程来处理请求，即使其他工作线程处于空闲状态。</li>\n<li><code>workQueue</code>（队列）：用于保留任务并移交给工作线程的阻塞队列。</li>\n<li><code>maximumPoolSize</code>（最大线程数）：线程池允许开启的最大线程数。</li>\n<li><code>handler</code>（拒绝策略）：往线程池添加任务时，将在下面两种情况触发拒绝策略：1）线程池运行状态不是 RUNNING；2）线程池已经达到最大线程数，并且阻塞队列已满时。</li>\n<li><code>keepAliveTime</code>（保持存活时间）：如果线程池当前线程数超过 corePoolSize，则多余的线程空闲时间超过 keepAliveTime 时会被终止。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ExecutorService executorService = Executors.newCachedThreadPool();  <span class=\"comment\">// 线程池的创建</span></span><br><span class=\"line\">        executorService.execute(<span class=\"keyword\">new</span> MyThread()); <span class=\"comment\">// 执行线程池</span></span><br><span class=\"line\">        executorService.shutdown(); <span class=\"comment\">// 关闭线程池</span></span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">50</span>; i++) &#123;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName() +<span class=\"string\">&quot;:&quot;</span>+ i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-9-线程的生命周期\"><a href=\"#2-9-线程的生命周期\" class=\"headerlink\" title=\"2.9 线程的生命周期\"></a>2.9 线程的生命周期</h4><p>​    <img src=\"%E7%BA%BF%E7%A8%8B%E3%80%81%E5%A4%9A%E7%BA%BF%E7%A8%8B.assets/0cd26da3d92bb6aff1bab9555826e8e4.png\" alt=\"img\"></p>\n<p><strong>新建状态</strong>（New）：当线程对象创建后就是进入到了新建状态，如：Thread t = new MyThread();</p>\n<p><strong>就绪状态</strong>（Runnable）：当调用线程对象的start()方法，线程即进入到了就绪状态。处于就绪状态的线程，只是说明此线程已经做好了准备，随时等待CPU调度执行，并不</p>\n<p>是执行了start()此线程就会执行。</p>\n<p><strong>运行状态</strong>（Running）：当CPU调度处于就绪状态的线程的时候，此时线程才会得以真正的执行，即进入运行状态。</p>\n<p>注：就绪状态是进入运行状态的唯一入口，也就是说线程进入运行状态的前提是已经进入到了就绪状态。</p>\n<p><strong>阻塞状态</strong>（Blocked）：处于运行状态的线程由于某种原因，暂时放弃对CPU的使用权，停止执行，此时进入阻塞状态，知道进入到就绪状态，才有机会再次被CPU调用以进</p>\n<p>入到运行状态，根据产生阻塞状态的三原因，阻塞状态可以分为三种：</p>\n<ul>\n<li>等待阻塞–》运行状态的线程执行wait()方法，使线程进入到阻塞状态</li>\n<li>同步阻塞–》线程获取同步锁失败，因为同步锁被其他线程所占用，这时线程就会进入同步阻塞状态；</li>\n<li>其他阻塞–》通过调用线程的sleep()或join()或发出了I/O请求的时候线程会进入阻塞状态，当sleep()状态超时，join()等待线程终止或者超时，或者I/O处理完毕，线程就会重新转入就绪状态。</li>\n</ul>\n<p><strong>死亡状态</strong>（Dead）：线程执行完了或者因一场退出了run()方法，该线程就结束了生命周期。</p>\n<h5 id=\"多个线程之间的通信：\"><a href=\"#多个线程之间的通信：\" class=\"headerlink\" title=\"多个线程之间的通信：\"></a>多个线程之间的通信：</h5><p><strong>wait()、notify()和 notifyAll()</strong></p>\n<p> <a href=\"https://blog.csdn.net/weixin_46217160/article/details/108743389\">线程间的通信方式_LallanaLee的博客-CSDN博客_线程间的通信方式</a></p>\n<ul>\n<li>使用wait()、notify()和notifyAll()需要先调用对象加锁</li>\n<li>调用wait()方法后，线程状态由Running变成Waiting，并将当前线程放置到对象的等待队列</li>\n<li>notify()和notifyAll()方法调用后，等待线程依旧不会从wait()返回，需要调用notify()和notifyAll()的线程释放锁之后等待线程才有机会从wait()返回</li>\n<li>notify()方法将等待队列中的一个等待线程从等待队列中移到同步队列中，而notifyAll()方法则是将等待队列中所有的线程全部转移到同步队列，被移到的线程状态由Waiting变为Blocked。</li>\n<li>从wait()方法返回的前提是获得调用对象的锁</li>\n</ul>\n<h4 id=\"2-10-线程上下文切换\"><a href=\"#2-10-线程上下文切换\" class=\"headerlink\" title=\"2.10 线程上下文切换\"></a>2.10 线程上下文切换</h4><p>多个线程可以执行在单核或多核CPU上，单核CPU也支持多线程执行代码，CPU通过给每个线程分配CPU时间片(机会)来实现这个机制。CPU为了执行多个线程，就需要不停的切换执行的线程，这样才能保证所有的线程在一段时间内都有被执行的机会。</p>\n<p>此时，CPU分配给每个线程的执行时间段，称作它的时间片。CPU时间片一般为几十毫秒。CPU通过时间片分配算法来循环执行任务，当前任务执行一个时间片后切换到下一个任务。</p>\n<p>但是，在切换前会保存上一个任务的状态，以便下次切换回这个任务时，可以再加载这个任务的状态。所以<code>任务从保存到再加载的过程就是一次上下文切换。</code></p>\n<p><strong>根据多线程的运行状态来说明</strong>：多线程环境中，当一个线程的状态由Runnable转换为非Runnable(Blocked、Waiting、Timed_Waiting)时，相应线程的上下文信息(包括CPU的寄存器和程序计数器在某一时间点的内容等)需要被保存，以便相应线程稍后再次进入Runnable状态时能够在之前的执行进度的基础上继续前进。而一个线程从非Runnable状态进入Runnable状态可能涉及恢复之前保存的上下文信息。这个对线程的上下文进行保存和恢复的过程就被称为上下文切换。</p>\n<h3 id=\"3、并行和并发\"><a href=\"#3、并行和并发\" class=\"headerlink\" title=\"3、并行和并发\"></a>3、并行和并发</h3><p><strong>并行：</strong>多个CPU同时执行多个任务。比如：多个人同时做不同的事。</p>\n<p><strong>并发：</strong>一个CPU(采用时间片)同时执行多个任务。比如：秒杀、多个人做同一件事。</p>\n<ul>\n<li>并发(concurrency)：指在同一时刻只能有一条指令执行，但多个进程指令被快速的轮换执行，使得在宏观上具有多个进程同时执行的效果，但在微观上并不是同时执行的，只是把时间分成若干段，使多个进程快速交替的执行。</li>\n<li>并行(parallel)：指在同一时刻，有多条指令在多个处理器上同时执行。所以无论从微观还是从宏观来看，二者都是一起执行的。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h3 id=\"1、-线程、进程、\"><a href=\"#1、-线程、进程、\" class=\"headerlink\" title=\"1、 线程、进程、\"></a>1、 线程、进程、</h3><h4 id=\"1、进程\"><a href=\"#1、进程\" class=\"headerlink\" title=\"1、进程\"></a>1、进程</h4><p><strong>进程</strong>(process)是程序的一次执行过程，或是正在运行的一个程序。是一个动态的过程：有它自身的产生、存在和消亡的过程。——生命周期</p>\n<h5 id=\"1-1-进程之间的通信方式\"><a href=\"#1-1-进程之间的通信方式\" class=\"headerlink\" title=\"1.1 进程之间的通信方式\"></a>1.1 进程之间的通信方式</h5><ol>\n<li>匿名管道通信</li>\n<li>高级管道通信</li>\n<li>有名管道通信</li>\n<li> 消息队列通信</li>\n<li>信号量通信</li>\n<li> 信号</li>\n<li> 共享内存通信</li>\n<li> 套接字通信</li>\n</ol>","more":"<h4 id=\"2、线程\"><a href=\"#2、线程\" class=\"headerlink\" title=\"2、线程\"></a>2、线程</h4><p><strong>线程</strong>(thread)，进程可进一步细化为线程，是一个程序内部的一条执行路径。</p>\n<p>​    一个Java应用程序java.exe，其实至少有三个线程：main()主线程，gc()垃圾回收线程，异常处理线程。当然如果发生异常，会影响主线程。</p>\n<p><strong>线程的状态：</strong>创建(new)、就绪(runnable)、运行(running)、阻塞(blocked、time waiting、waiting）、消亡（dead）。</p>\n<p>​            time waiting（睡眠或等待一定的事件）、waiting（等待被唤醒）、blocked（阻塞）</p>\n<p><strong>使用多线程的优点</strong></p>\n<ul>\n<li>提高应用程序的响应。对图形化界面更有意义，可增强用户体验。</li>\n<li>提高计算机系统CPU的利用率</li>\n<li>改善程序结构。将既长又复杂的<strong>进程</strong>分为多个<strong>线程</strong>，独立运行，利于理解和修改</li>\n</ul>\n<h3 id=\"2、Thread类\"><a href=\"#2、Thread类\" class=\"headerlink\" title=\"2、Thread类\"></a>2、Thread类</h3><blockquote>\n<p><a href=\"https://www.cnblogs.com/dolphin0520/p/3920357.html?msclkid=c130e6bbb70c11ec9db92ab38c68f94b\">Java并发编程：Thread类的使用 - Matrix海子 - 博客园 (cnblogs.com)</a></p>\n</blockquote>\n<h4 id=\"2-1-创建一个新的线程\"><a href=\"#2-1-创建一个新的线程\" class=\"headerlink\" title=\"2.1 创建一个新的线程\"></a>2.1 创建一个新的线程</h4><h5 id=\"方法1：继承线程\"><a href=\"#方法1：继承线程\" class=\"headerlink\" title=\"方法1：继承线程\"></a><strong>方法1</strong>：继承线程</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    多线程创建的方法</span></span><br><span class=\"line\"><span class=\"comment\">    1、创建一个继承Thread的类</span></span><br><span class=\"line\"><span class=\"comment\">    2、重写Run方法---&gt; 将此线程执行的操作写在run中</span></span><br><span class=\"line\"><span class=\"comment\">    3、创建Thread 的对象</span></span><br><span class=\"line\"><span class=\"comment\">    4、通过调用此方法的start()</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrimeThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; i++) &#123;</span><br><span class=\"line\">            System.out.println(i + <span class=\"string\">&quot;,&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test01</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 主线程  main</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        PrimeThread primeThread = <span class=\"keyword\">new</span> PrimeThread();   <span class=\"comment\">// 创建新的线程</span></span><br><span class=\"line\">        primeThread.start(); <span class=\"comment\">// 启动新的线程，调用run方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 主线程的中执行</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; i++) &#123;</span><br><span class=\"line\">            System.out.println( <span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意点</strong></p>\n<p>1.如果自己手动调用<strong>run()方法</strong>，那么就只是普通方法，<strong>没有启动多线程模式</strong>。</p>\n<p>2.run()方法由JVM调用，什么时候调用，执行的过程控制都有操作系统的CPU调度决定。</p>\n<p>3.<strong>想要启动多线程，必须调用start方法</strong>。</p>\n<p>4.一个线程对象只能调用一次start()方法启动，如果重复调用了，则将抛出以上的异常IllegalThreadStateException。</p>\n<h5 id=\"方法2：继承Runable\"><a href=\"#方法2：继承Runable\" class=\"headerlink\" title=\"方法2：继承Runable()\"></a><strong>方法2：继承Runable()</strong></h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrimeThread2</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; i++) &#123;</span><br><span class=\"line\">            System.out.println(i + <span class=\"string\">&quot;,&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test01</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 主线程  main</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 方法1：创建新线程的</span></span><br><span class=\"line\">        PrimeThread primeThread = <span class=\"keyword\">new</span> PrimeThread();   <span class=\"comment\">// 创建新的线程</span></span><br><span class=\"line\">        primeThread.start(); <span class=\"comment\">// 启动新的线程</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 方法2：创建新线程</span></span><br><span class=\"line\">        PrimeThread2 primeThread2 = <span class=\"keyword\">new</span> PrimeThread2();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(primeThread2).start();   <span class=\"comment\">// 这里比较特殊了</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; i++) &#123;</span><br><span class=\"line\">            System.out.println( <span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-Thread类常用方法\"><a href=\"#2-2-Thread类常用方法\" class=\"headerlink\" title=\"2.2  Thread类常用方法\"></a>2.2  Thread类常用方法</h4><ol>\n<li><strong>void</strong> <strong>start():</strong> 启动线程，并执行对象的run()方法</li>\n<li><strong>run():</strong> 线程在被调度时执行的操作</li>\n<li><strong>String</strong> <strong>getName():</strong> 返回线程的名称</li>\n<li><strong>void</strong> <strong>setName(String</strong> <strong>name)</strong>:设置该线程名称</li>\n<li><strong>static Thread currentThread():</strong> 返回当前线程。在Thread子类中就是this，<strong>通常用于主线程和Runnable实现类</strong> （给主线程命名）</li>\n<li><strong>static</strong> <strong>void</strong> **yield()**线程让步<ol>\n<li>暂停当前正在执行的线程，把执行机会让给优先级相同或更高的线程</li>\n<li>若队列中没有同优先级的线程，忽略此方法</li>\n</ol>\n</li>\n<li><strong>join()</strong> <strong>：</strong>当某个程序执行流中调用其他线程的 join() 方法时，调用线程将被阻塞，直到 join() 方法加入的 join 线程执行完为止<ol>\n<li>低优先级的线程也可以获得执行</li>\n</ol>\n</li>\n<li><strong>static</strong> <strong>void</strong> <strong>sleep(long</strong> <strong>millis)**</strong>：**(指定时间:毫秒)<ol>\n<li>令当前活动线程在指定时间段内放弃对CPU控制,使其他线程有机会被执行,时间到后重排队。</li>\n<li> 抛出InterruptedException异常</li>\n</ol>\n</li>\n<li><strong>stop():</strong> 强制线程生命期结束，不推荐使用</li>\n<li><strong>boolean</strong> **isAlive()**：返回boolean，判断线程是否还活着</li>\n</ol>\n<h5 id=\"wait-和sleep-的区别\"><a href=\"#wait-和sleep-的区别\" class=\"headerlink\" title=\"wait()和sleep()的区别\"></a>wait()和sleep()的区别</h5><ul>\n<li>wait()方法会释放占有的对象锁，当前线程进入等待池，释放cpu,而其他正在等待的线程即可抢占此锁，获得锁的线程即可运行程序；</li>\n<li>线程的sleep()方法则表示，当前线程会休眠一段时间，休眠期间，会暂时释放cpu，但并不释放对象锁，也就是说，在休眠期间，其他线程依然无法进入被同步保护的代码内部，当前线程休眠结束时，会重新获得cpu执行权,从而执行被同步保护的代码。</li>\n<li><strong>wait()和sleep()最大的不同在于wait()会释放对象锁，而sleep()不会释放对象锁。</strong></li>\n</ul>\n<h4 id=\"2-3-线程的调度\"><a href=\"#2-3-线程的调度\" class=\"headerlink\" title=\"2.3 线程的调度\"></a>2.3 线程的调度</h4><ol>\n<li>同优先级线程组成先进先出队列（先到先服务），使用时间片策略</li>\n<li>对高优先级，使用优先调度的抢占式策略</li>\n</ol>\n<p>java中采用的是抢占式的策略，对于优先级高的会有更高的概率能够抢到cpu的使用权。</p>\n<p><strong>线程的优先级等级</strong></p>\n<p>​    MAX_PRIORITY：10</p>\n<p>​    MIN _PRIORITY：1</p>\n<p>​    NORM_PRIORITY：5</p>\n<p><strong>涉及的方法</strong></p>\n<p>​    <strong>getPriority()</strong> <strong>：</strong>返回线程优先值</p>\n<p>​    <strong>setPriority(int</strong> <strong>newPriority)</strong> <strong>：</strong>改变线程的优先级</p>\n<p><strong>说明</strong></p>\n<pre><code>   线程创建时继承父线程的优先级\n</code></pre>\n<p>​        <strong>低优先级只是获得调度的概率低，并非一定是在高优先级线程之后才被调用</strong></p>\n<p>优先级的设定：</p>\n<p>​    默认为  5</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyThread myThread = <span class=\"keyword\">new</span> MyThread();</span><br><span class=\"line\">myThread.setPriority(<span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-4-线程的安全问题\"><a href=\"#2-4-线程的安全问题\" class=\"headerlink\" title=\"2.4 线程的安全问题\"></a>2.4 线程的安全问题</h4><p>JVM避免线程安全的问题主要从：<strong>原子性、可见性、有序性</strong> 三个方面展开。</p>\n<p>原子性：操作<strong>不能被线程调度机制中断</strong>，要么<strong>全部执行完毕</strong>，<strong>要么不执行</strong>。</p>\n<p>可见性：一个线程对共享变量做了修改之后，<strong>其他的线程立即能够看到修改后的值</strong>。</p>\n<p> 有序性：即程序执行的顺序按照代码的先后顺序执行。</p>\n<h5 id=\"2-4-1-方法1-同步代码块-同步机制-synchronized\"><a href=\"#2-4-1-方法1-同步代码块-同步机制-synchronized\" class=\"headerlink\" title=\"2.4.1 方法1 同步代码块  同步机制 synchronized\"></a><strong>2.4.1 方法1 同步代码块  同步机制 synchronized</strong></h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">synchronized</span> (对象)&#123;</span><br><span class=\"line\"><span class=\"comment\">// 需要被同步的代码；</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意： synchronized 的锁（对象）必须是唯一的，才能够实现线程安全</strong></p>\n<p>示例1 ：<strong>继承的线程实现</strong> extends Thread</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//书写售票的示例</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//定义变量记录剩余的票数</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> num = <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//创建一个对象，用作同步中的锁对象</span></span><br><span class=\"line\">    Object obj = <span class=\"keyword\">new</span> Object();    <span class=\"comment\">//****** 这里的锁必须是唯一的</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//实现run方法</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span>    </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//实现售票的过程</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>( <span class=\"keyword\">true</span> )        &#123;</span><br><span class=\"line\">            <span class=\"comment\">//   t1  t2  t3</span></span><br><span class=\"line\">            <span class=\"comment\">//判断当前有没有线程正在if中操作num，如果有当前线程就在这里临时等待</span></span><br><span class=\"line\">            <span class=\"comment\">//这种思想称为线程的同步</span></span><br><span class=\"line\">            <span class=\"comment\">//当票数小等于0的时候，就不再售票了</span></span><br><span class=\"line\">            <span class=\"comment\">//使用同步代码块把线程要执行的任务代码可以同步起来</span></span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span>( obj )  <span class=\"comment\">//t1   在进入同步之前线程要先获取锁     ***** obj 锁唯一，不能是多个锁</span></span><br><span class=\"line\">            <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">                当某个线程执行到synchronized关键字之后，这时JVM会判断当前</span></span><br><span class=\"line\"><span class=\"comment\">                同步上的这个对象有没有已经被其他线程获取走了，如果这时没有其他</span></span><br><span class=\"line\"><span class=\"comment\">                线程获取这个对象，这时就会把当前同步上的这个对象交给当前正要进入</span></span><br><span class=\"line\"><span class=\"comment\">                同步的这个线程。</span></span><br><span class=\"line\"><span class=\"comment\">            */</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>( num &gt; <span class=\"number\">0</span> )</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//t0</span></span><br><span class=\"line\">                    <span class=\"keyword\">try</span>&#123;Thread.sleep(<span class=\"number\">2</span>);&#125;<span class=\"keyword\">catch</span>( InterruptedException e )&#123;&#125;</span><br><span class=\"line\">                    System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot;.....&quot;</span>+num);</span><br><span class=\"line\">                    num--;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;<span class=\"comment\">//线程执行完同步之后，那么这时当前这个线程就会把锁释放掉</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span>     </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建线程任务</span></span><br><span class=\"line\">        Demo d = <span class=\"keyword\">new</span> Demo();</span><br><span class=\"line\">        <span class=\"comment\">//创建线程对象</span></span><br><span class=\"line\">        Thread t = <span class=\"keyword\">new</span> Thread( d );</span><br><span class=\"line\">        Thread t2 = <span class=\"keyword\">new</span> Thread(d);</span><br><span class=\"line\">        Thread t3 = <span class=\"keyword\">new</span> Thread(d);</span><br><span class=\"line\">        Thread t4 = <span class=\"keyword\">new</span> Thread(d);</span><br><span class=\"line\">        <span class=\"comment\">//开启线程</span></span><br><span class=\"line\">        t.start();</span><br><span class=\"line\">        t2.start();</span><br><span class=\"line\">        t3.start();</span><br><span class=\"line\">        t4.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-4-2-使用同步方法来实现\"><a href=\"#2-4-2-使用同步方法来实现\" class=\"headerlink\" title=\"2.4.2 使用同步方法来实现\"></a><strong>2.4.2 使用同步方法来实现</strong></h5><p>**继承的线程方法 **extends Thread </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//书写售票的示例</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//定义变量记录剩余的票数</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> num = <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//实现run方法</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span>    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>( <span class=\"keyword\">true</span> )        &#123;</span><br><span class=\"line\">            show();  <span class=\"comment\">// 同步方法</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>( num &gt; <span class=\"number\">0</span> )</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">//t0</span></span><br><span class=\"line\">                <span class=\"keyword\">try</span>&#123;Thread.sleep(<span class=\"number\">2</span>);&#125;<span class=\"keyword\">catch</span>( InterruptedException e )&#123;&#125;</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot;.....&quot;</span>+num);</span><br><span class=\"line\">                num--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span>     </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建线程任务</span></span><br><span class=\"line\">        Demo d = <span class=\"keyword\">new</span> Demo();</span><br><span class=\"line\">        <span class=\"comment\">//创建线程对象</span></span><br><span class=\"line\">        Thread t = <span class=\"keyword\">new</span> Thread( d );</span><br><span class=\"line\">        Thread t2 = <span class=\"keyword\">new</span> Thread(d);</span><br><span class=\"line\">        Thread t3 = <span class=\"keyword\">new</span> Thread(d);</span><br><span class=\"line\">        Thread t4 = <span class=\"keyword\">new</span> Thread(d);</span><br><span class=\"line\">        <span class=\"comment\">//开启线程</span></span><br><span class=\"line\">        t.start();</span><br><span class=\"line\">        t2.start();</span><br><span class=\"line\">        t3.start();</span><br><span class=\"line\">        t4.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>**实现Runable的线程方法 **implements Runnable </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//书写售票的示例</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//定义变量记录剩余的票数</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> num = <span class=\"number\">100</span>;</span><br><span class=\"line\">    <span class=\"comment\">//实现run方法</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span>    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>( <span class=\"keyword\">true</span> )        &#123;</span><br><span class=\"line\">            show();  <span class=\"comment\">// 同步方法</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>( num &gt; <span class=\"number\">0</span> )</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">//t0</span></span><br><span class=\"line\">                <span class=\"keyword\">try</span>&#123;Thread.sleep(<span class=\"number\">2</span>);&#125;<span class=\"keyword\">catch</span>( InterruptedException e )&#123;&#125;</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot;.....&quot;</span>+num);</span><br><span class=\"line\">                num--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span>     </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建线程任务</span></span><br><span class=\"line\">        Demo d = <span class=\"keyword\">new</span> Demo();</span><br><span class=\"line\">        <span class=\"comment\">//创建线程对象</span></span><br><span class=\"line\">        Thread t = <span class=\"keyword\">new</span> Thread( d );</span><br><span class=\"line\">        Thread t2 = <span class=\"keyword\">new</span> Thread(d);</span><br><span class=\"line\">        Thread t3 = <span class=\"keyword\">new</span> Thread(d);</span><br><span class=\"line\">        Thread t4 = <span class=\"keyword\">new</span> Thread(d);</span><br><span class=\"line\">        <span class=\"comment\">//开启线程</span></span><br><span class=\"line\">        t.start();</span><br><span class=\"line\">        t2.start();</span><br><span class=\"line\">        t3.start();</span><br><span class=\"line\">        t4.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-5-懒汉式-的线程安全\"><a href=\"#2-5-懒汉式-的线程安全\" class=\"headerlink\" title=\"2.5 懒汉式 的线程安全\"></a>2.5 懒汉式 的线程安全</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Single</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Object obj = <span class=\"keyword\">new</span> Object();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Single</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span>  Single s = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Single <span class=\"title\">getInstance</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 方法1 </span></span><br><span class=\"line\">        <span class=\"comment\">/*synchronized (obj) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            //先判断有没有对象</span></span><br><span class=\"line\"><span class=\"comment\">            if( s == null )   //判断最后线程进入同步之后到底有没有对象，只有在没有对象的情况下才能创建对象</span></span><br><span class=\"line\"><span class=\"comment\">            &#123;</span></span><br><span class=\"line\"><span class=\"comment\">                s = new Single();</span></span><br><span class=\"line\"><span class=\"comment\">            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">            return s;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;*/</span></span><br><span class=\"line\">        <span class=\"comment\">// 方法2 // 这种方法为什么效率高</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>( s == <span class=\"keyword\">null</span> )<span class=\"comment\">// 这里加判断的目的是保证后续来的线程不用在进入同步代码块中，这个可以提高后续程序效率</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span>( obj )</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">//先判断有没有对象</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>( s == <span class=\"keyword\">null</span> )   <span class=\"comment\">//判断最后线程进入同步之后到底有没有对象，只有在没有对象的情况下才能创建对象</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    s = <span class=\"keyword\">new</span> Single();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-6-死锁\"><a href=\"#2-6-死锁\" class=\"headerlink\" title=\"2.6 死锁\"></a>2.6 死锁</h4><p>线程死锁是指两个或两个以上的线程互相持有对方所需要的资源，由于synchronized的特性，一个线程持有一个资源，或者说获得一个锁，在该线程释放这个锁之前，其它线程是获取不到这个锁的，而且会一直死等下去，因此这便造成了死锁。</p>\n<p>演示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DeadLock</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span>  Object lock1 = <span class=\"keyword\">new</span> Object();</span><br><span class=\"line\">    <span class=\"keyword\">private</span>  Object lock2 = <span class=\"keyword\">new</span> Object();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span>  <span class=\"keyword\">void</span> <span class=\"title\">method1</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span>(lock1)&#123;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;获取到lock1,请求获取lock2....&quot;</span>);</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (lock2)&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;获取到lock2....&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span>  <span class=\"keyword\">void</span> <span class=\"title\">method2</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span>(lock2)&#123;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;获取到lock2,请求获取lock1....&quot;</span>);</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (lock1)&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;获取到lock1....&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        DeadLock deadLock = <span class=\"keyword\">new</span> DeadLock();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(()-&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                deadLock.method1();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(()-&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                deadLock.method2();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"如何避免死锁\"><a href=\"#如何避免死锁\" class=\"headerlink\" title=\"如何避免死锁\"></a><strong>如何避免死锁</strong></h5><ul>\n<li><p>加锁顺序：线程按照相同的顺序加锁。</p>\n</li>\n<li><p>加锁时限，线程获取锁的过程中限制一定的时间，如果给定时间内获取不到，就算了，别勉强自己。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lock2.tryLock(3, TimeUnit.SECONDS); &#x2F;&#x2F; 等3s获取锁，获取不到也会继续向下走  lock表示线程</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h5 id=\"如何来检查死锁？\"><a href=\"#如何来检查死锁？\" class=\"headerlink\" title=\"如何来检查死锁？\"></a><strong>如何来检查死锁</strong>？</h5><p>使用 jstack或者pstack 和 gdb 工具进行分析，输出栈堆信息</p>\n<p><a href=\"https://blog.csdn.net/u014039577/article/details/52351626\">Java如何查看死锁？_ZK_小姜的博客-CSDN博客_查看死锁</a></p>\n<ol>\n<li><p><strong>Jconsole查看死锁</strong></p>\n<p>进入java安装的位置，输入Jconsole，然后弹出界面（或者进入安装目录/java/jdk1.70_80/bin/，点击Jconsole.exe）：</p>\n</li>\n</ol>\n<h4 id=\"2-8-线程池\"><a href=\"#2-8-线程池\" class=\"headerlink\" title=\"2.8 线程池\"></a>2.8 线程池</h4><p><strong>线程池的种类</strong>：lExecutors：工具类、线程池的工厂类，用于创建并返回不同类型的线程池</p>\n<ul>\n<li>Executors.newCachedThreadPool()：创建一个可根据需要创建新线程的线程池</li>\n<li>Executors.newFixedThreadPool(n); 创建一个可重用固定线程数的线程池</li>\n<li>Executors.newSingleThreadExecutor() ：创建一个只有一个线程的线程池</li>\n<li>Executors.newScheduledThreadPool(n)：创建一个线程池，它可安排在给定延迟后运行命令或者定期地执行。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ArrayBlockingQueue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ThreadPoolExecutor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadPoolExecutorDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 设置各个参数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> CORE_POOL_SIZE = <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MAX_POOL_SIZE = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> QUEUE_CAPACITY = <span class=\"number\">100</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Long KEEP_ALIVE_TIME = <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ThreadPoolExecutor executor = <span class=\"keyword\">new</span> ThreadPoolExecutor(</span><br><span class=\"line\">                CORE_POOL_SIZE,</span><br><span class=\"line\">                MAX_POOL_SIZE,</span><br><span class=\"line\">                KEEP_ALIVE_TIME,</span><br><span class=\"line\">                TimeUnit.SECONDS,</span><br><span class=\"line\">                <span class=\"keyword\">new</span> ArrayBlockingQueue&lt;&gt;(QUEUE_CAPACITY),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> ThreadPoolExecutor.CallerRunsPolicy()</span><br><span class=\"line\">        );</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 创建WorkerThread对象（该类实现了Runnable接口）</span></span><br><span class=\"line\">            Runnable worker = <span class=\"keyword\">new</span> MyRunnable(<span class=\"string\">&quot;&quot;</span> + i);</span><br><span class=\"line\">            <span class=\"comment\">// 执行Runnable</span></span><br><span class=\"line\">            executor.execute(worker);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 终止线程池</span></span><br><span class=\"line\">        executor.shutdown();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!executor.isTerminated()) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Finished all threads&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>线程池的属性：</p>\n<ol>\n<li><strong>int corePoolSize</strong> =&gt; 该线程池中<strong>核心线程数最大值</strong></li>\n<li><strong>int maximumPoolSize</strong> <strong>线程总数最大值</strong></li>\n<li><strong>long keepAliveTime</strong> <strong>非核心线程闲置超时时长</strong></li>\n<li><code>threadFactory</code>（线程工厂）：用于创建工作线程的工厂。</li>\n<li><code>corePoolSize</code>（核心线程数）：当线程池运行的线程少于 corePoolSize 时，将创建一个新线程来处理请求，即使其他工作线程处于空闲状态。</li>\n<li><code>workQueue</code>（队列）：用于保留任务并移交给工作线程的阻塞队列。</li>\n<li><code>maximumPoolSize</code>（最大线程数）：线程池允许开启的最大线程数。</li>\n<li><code>handler</code>（拒绝策略）：往线程池添加任务时，将在下面两种情况触发拒绝策略：1）线程池运行状态不是 RUNNING；2）线程池已经达到最大线程数，并且阻塞队列已满时。</li>\n<li><code>keepAliveTime</code>（保持存活时间）：如果线程池当前线程数超过 corePoolSize，则多余的线程空闲时间超过 keepAliveTime 时会被终止。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ExecutorService executorService = Executors.newCachedThreadPool();  <span class=\"comment\">// 线程池的创建</span></span><br><span class=\"line\">        executorService.execute(<span class=\"keyword\">new</span> MyThread()); <span class=\"comment\">// 执行线程池</span></span><br><span class=\"line\">        executorService.shutdown(); <span class=\"comment\">// 关闭线程池</span></span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">50</span>; i++) &#123;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName() +<span class=\"string\">&quot;:&quot;</span>+ i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-9-线程的生命周期\"><a href=\"#2-9-线程的生命周期\" class=\"headerlink\" title=\"2.9 线程的生命周期\"></a>2.9 线程的生命周期</h4><p>​    <img src=\"%E7%BA%BF%E7%A8%8B%E3%80%81%E5%A4%9A%E7%BA%BF%E7%A8%8B.assets/0cd26da3d92bb6aff1bab9555826e8e4.png\" alt=\"img\"></p>\n<p><strong>新建状态</strong>（New）：当线程对象创建后就是进入到了新建状态，如：Thread t = new MyThread();</p>\n<p><strong>就绪状态</strong>（Runnable）：当调用线程对象的start()方法，线程即进入到了就绪状态。处于就绪状态的线程，只是说明此线程已经做好了准备，随时等待CPU调度执行，并不</p>\n<p>是执行了start()此线程就会执行。</p>\n<p><strong>运行状态</strong>（Running）：当CPU调度处于就绪状态的线程的时候，此时线程才会得以真正的执行，即进入运行状态。</p>\n<p>注：就绪状态是进入运行状态的唯一入口，也就是说线程进入运行状态的前提是已经进入到了就绪状态。</p>\n<p><strong>阻塞状态</strong>（Blocked）：处于运行状态的线程由于某种原因，暂时放弃对CPU的使用权，停止执行，此时进入阻塞状态，知道进入到就绪状态，才有机会再次被CPU调用以进</p>\n<p>入到运行状态，根据产生阻塞状态的三原因，阻塞状态可以分为三种：</p>\n<ul>\n<li>等待阻塞–》运行状态的线程执行wait()方法，使线程进入到阻塞状态</li>\n<li>同步阻塞–》线程获取同步锁失败，因为同步锁被其他线程所占用，这时线程就会进入同步阻塞状态；</li>\n<li>其他阻塞–》通过调用线程的sleep()或join()或发出了I/O请求的时候线程会进入阻塞状态，当sleep()状态超时，join()等待线程终止或者超时，或者I/O处理完毕，线程就会重新转入就绪状态。</li>\n</ul>\n<p><strong>死亡状态</strong>（Dead）：线程执行完了或者因一场退出了run()方法，该线程就结束了生命周期。</p>\n<h5 id=\"多个线程之间的通信：\"><a href=\"#多个线程之间的通信：\" class=\"headerlink\" title=\"多个线程之间的通信：\"></a>多个线程之间的通信：</h5><p><strong>wait()、notify()和 notifyAll()</strong></p>\n<p> <a href=\"https://blog.csdn.net/weixin_46217160/article/details/108743389\">线程间的通信方式_LallanaLee的博客-CSDN博客_线程间的通信方式</a></p>\n<ul>\n<li>使用wait()、notify()和notifyAll()需要先调用对象加锁</li>\n<li>调用wait()方法后，线程状态由Running变成Waiting，并将当前线程放置到对象的等待队列</li>\n<li>notify()和notifyAll()方法调用后，等待线程依旧不会从wait()返回，需要调用notify()和notifyAll()的线程释放锁之后等待线程才有机会从wait()返回</li>\n<li>notify()方法将等待队列中的一个等待线程从等待队列中移到同步队列中，而notifyAll()方法则是将等待队列中所有的线程全部转移到同步队列，被移到的线程状态由Waiting变为Blocked。</li>\n<li>从wait()方法返回的前提是获得调用对象的锁</li>\n</ul>\n<h4 id=\"2-10-线程上下文切换\"><a href=\"#2-10-线程上下文切换\" class=\"headerlink\" title=\"2.10 线程上下文切换\"></a>2.10 线程上下文切换</h4><p>多个线程可以执行在单核或多核CPU上，单核CPU也支持多线程执行代码，CPU通过给每个线程分配CPU时间片(机会)来实现这个机制。CPU为了执行多个线程，就需要不停的切换执行的线程，这样才能保证所有的线程在一段时间内都有被执行的机会。</p>\n<p>此时，CPU分配给每个线程的执行时间段，称作它的时间片。CPU时间片一般为几十毫秒。CPU通过时间片分配算法来循环执行任务，当前任务执行一个时间片后切换到下一个任务。</p>\n<p>但是，在切换前会保存上一个任务的状态，以便下次切换回这个任务时，可以再加载这个任务的状态。所以<code>任务从保存到再加载的过程就是一次上下文切换。</code></p>\n<p><strong>根据多线程的运行状态来说明</strong>：多线程环境中，当一个线程的状态由Runnable转换为非Runnable(Blocked、Waiting、Timed_Waiting)时，相应线程的上下文信息(包括CPU的寄存器和程序计数器在某一时间点的内容等)需要被保存，以便相应线程稍后再次进入Runnable状态时能够在之前的执行进度的基础上继续前进。而一个线程从非Runnable状态进入Runnable状态可能涉及恢复之前保存的上下文信息。这个对线程的上下文进行保存和恢复的过程就被称为上下文切换。</p>\n<h3 id=\"3、并行和并发\"><a href=\"#3、并行和并发\" class=\"headerlink\" title=\"3、并行和并发\"></a>3、并行和并发</h3><p><strong>并行：</strong>多个CPU同时执行多个任务。比如：多个人同时做不同的事。</p>\n<p><strong>并发：</strong>一个CPU(采用时间片)同时执行多个任务。比如：秒杀、多个人做同一件事。</p>\n<ul>\n<li>并发(concurrency)：指在同一时刻只能有一条指令执行，但多个进程指令被快速的轮换执行，使得在宏观上具有多个进程同时执行的效果，但在微观上并不是同时执行的，只是把时间分成若干段，使多个进程快速交替的执行。</li>\n<li>并行(parallel)：指在同一时刻，有多条指令在多个处理器上同时执行。所以无论从微观还是从宏观来看，二者都是一起执行的。</li>\n</ul>"},{"title":"智能车竞赛获得全国一等奖","date":"2019-09-01T09:07:11.000Z","_content":"\n\n# 引言\n## 智能车竞赛\n> 全国大学生“飞思卡尔杯”智能汽车竞赛是由教育部高等学校自动化专业教学指导委员会主办全国大学生智能汽车竞赛。该竞赛以“立足培养，重在参与，鼓励探索，追求卓越”为指导思想，旨在促进高等学校素质教育，培养大学生的综合知识运用能力、基本工程实践能力和创新意识。\n\n## 室内对弈组\n室内对弈组要求参赛队伍设计一辆车模能够通过车载摄像头以及其他传感器完成赛场内线条、标签的检测与辨认、几何物体的识别与搬运。通过机械、电子和控制算法完成预赛和决赛两个阶段的目标排序任务和对抗挑战任务。\n<!-- more -->\n\n<img src=\"https://img.imgdb.cn/item/60431c61360785be54872edf\" width=300 height=300 />\n\n\n# 总体方案介绍\n## 作品设计要求\n创意组比赛要求设计一辆车模能够通过车载摄像头完成赛场内线条、二维标签的检测与辨认、几何物识别与搬运。通过机械、电子与控制算法完成预赛阶段的目标排序任务和决赛阶段的步步为营对抗挑战任务。 其具体要求如下：\n\n1. 参赛作品中微控制器必须为 NXP 公司的微控制器系列产品，控制器的数量不限。对于棋盘格内的 April-Tags 标签识别推荐使用 NXP 公司的 i.MXRT1060 可编程视觉模块。\n2. 传感器的种类和数量没有限制。要求控制电路（包括 MCU、传感器、电\n机驱动等)必须自行设计、制作、调试。\n3. 车模机械结构可以自行设计制作。\n4. 车模平台的静态尺寸（长、宽）小于 50 厘米，平台高度小于 100 厘米。\n\n车模在进入场地后，用于摆放障碍物的机械臂可以伸出车模平台 50 厘米范围之外。经过对赛题的分析，可知图像处理、小车定位与决策部分是设计的难点。因此要求在整个作品设计需要中严格考虑设计方案的可行性与稳定性，设计出能够快速稳定完成设计要求的智能小车系统。\n\n## 系统方案总概述\n综合分析本次竞赛规则和需求，选用 NXP 公司的 OpenMV（ RT 1060） 视觉摄像头作为图像获取和预处理核心模块，选用 i.MX6Q 开发板作为路径规划算法运行的核心处理器，配合 MK60DN512ZVLQ10 单片控制机械系统完成棋子、障碍的识别和搬运。\n系统工作原理如下：首先由视觉摄像头进行 April-Tags 的识别和车身姿态的识别，完成场上自我定位任务以及对目标位置的解算。 然后将棋子和障碍信息发送到 i.MX6Q 开发板进行路径规划，最终由前（决策）摄像头发送控制指令，主、 从单片机（ MK60DN512ZVLQ10） 接收控制信号和速度、角度信息，进行闭环控制，完成棋子和障碍的拾取放置任务。 其系统框架图如图。\n<img src=\"https://img.imgdb.cn/item/60431c78360785be54873c24.jpg\" width=500 height=500 />\n <!-- ![总体方案图](https://img.imgdb.cn/item/60431c78360785be54873c24.jpg) -->\n\n# 机械结构设计\n 依据对竞赛规则的解读，从车模期望性能出发，从车体框架设计，到车轮的选型，电机转速、功率、驱动力的计算，编码器的选型，抓取装置设计，电源选择以及连接与固定，最后进行车模机械机构的优化，每一步设计与选择都经过了从理论推导到实际设计与选型的过程。 整个机械子系统具体由四部分组成分别为：支撑机构、动作机构、移动机构、连接部件。机械子系统总体框架图如下图所示。\n <img src=\"https://img.imgdb.cn/item/60431e48360785be54889c54.jpg\" width=500 height=500 />\n\n\n整个车模采用 1515 铝型材和 2020 铝型材搭建车模底板和支撑架；以 45°全向麦克纳姆轮为轮分布在机体的左前后，右前后四个位置，四个轮胎方向处于同一高度， 以对称 O 型安装； 四个电机对称的 安装在平台的四端， 通过联轴器与麦克纳姆轮连接；棋子搬运装置安装于底板上，位置位于在车子底板最中；车子前和右端分各装有障碍放置装置；主板和各个模块板以及电池紧密放置在底板上；摄像头按照需求放置在铝型材支架的两端。\n <img src=\"https://img.imgdb.cn/item/60431ebe360785be5488e225.jpg\" width=500 height=500 />\n\n# 硬件电路系统设计\n根据对竞赛规则的解读，从期望的车模功能出发，设计出符合要求及满足期望功能的硬件电路系统如图 4.1 所示。 将硬件电路系统集成为七个模块，分别为电源管理模块、 系统主板、 MK60DN512ZVLQ10 核心板、电机驱动模块、电动推杆驱动模块、电磁铁驱动模块、 I.MX6Q 开发板， 如图 4.1 所示。为了方便焊接、布线及拆卸和维修，同时保证电路系统的合理与稳定，提高系统抗干扰能力，将各个模块分开制板。\n <img src=\"https://img.imgdb.cn/item/60431f3c360785be54893507.jpg\" width=500 height=500 />\n\n\n# 系统程序设计及实现\n程序部分由五大部分组成，分别是控制模块、图像识别、传感器数据处理以、通信模块以及路径规划算法。\n控制模块主要用于对电机的控制和棋子拾取和障碍放置，其中电机控制采用 PID 算法对电机转速进行调节，结合麦克纳姆轮速度控制关系，实现对车辆\n的运动状态进行控制，棋子障碍主要通过控制舵机和电磁铁来完成。\n由于本系统有多个设备，其中 4 个摄像头和开发板以及单片机，经综合考虑选择用 UART 结合 DMA 的方式进行多设备间的数据交换。\n传感器数据处理主要是对各传感器的测量数据进行最优估计以及数据融合，其主要采用的是卡尔曼滤波算法。\n图像识别以 i.MX RT1060 为核心的 OpenMV 为硬件平台，采用 Micropython 进行编程，利用其内置的图像处理库进行场地的 April-Tag 识别和车辆定位。\n八皇后的算法设计主要运用贪心算法来寻找最短路径，并结合搬运次数计算搬运时间，进而规划路径；步步为营的算法设计， 在对增强学习算法和 Qlearning 算法尝试之后选择用 BFS 算法寻找最短路径并结合障碍数量来进行决策。 整体结构如图。\n <img src=\"https://img.imgdb.cn/item/60431fcd360785be5489983a.jpg\" width=500 height=500 />\n\n# 比赛视频\n<!-- 相对布局，自适应大小  -->\n<div style=\"position: relative; width: 100%; height: 0; padding-bottom: 75%;\">\n    <iframe src=\"//player.bilibili.com/player.html?aid=247049959&bvid=BV1Sv411h7xw&cid=306696680&page=1\"  scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" style=\"position: absolute; width: 100%; height: 100%; left: 0; top: 0;\"></iframe>\n</div>\n","source":"_posts/智能车竞赛获得全国一等奖.md","raw":"---\ntitle: 智能车竞赛获得全国一等奖\ndate: 2019-09-01 17:07:11\ntags: ['比赛']\ncategories: 比赛\n---\n\n\n# 引言\n## 智能车竞赛\n> 全国大学生“飞思卡尔杯”智能汽车竞赛是由教育部高等学校自动化专业教学指导委员会主办全国大学生智能汽车竞赛。该竞赛以“立足培养，重在参与，鼓励探索，追求卓越”为指导思想，旨在促进高等学校素质教育，培养大学生的综合知识运用能力、基本工程实践能力和创新意识。\n\n## 室内对弈组\n室内对弈组要求参赛队伍设计一辆车模能够通过车载摄像头以及其他传感器完成赛场内线条、标签的检测与辨认、几何物体的识别与搬运。通过机械、电子和控制算法完成预赛和决赛两个阶段的目标排序任务和对抗挑战任务。\n<!-- more -->\n\n<img src=\"https://img.imgdb.cn/item/60431c61360785be54872edf\" width=300 height=300 />\n\n\n# 总体方案介绍\n## 作品设计要求\n创意组比赛要求设计一辆车模能够通过车载摄像头完成赛场内线条、二维标签的检测与辨认、几何物识别与搬运。通过机械、电子与控制算法完成预赛阶段的目标排序任务和决赛阶段的步步为营对抗挑战任务。 其具体要求如下：\n\n1. 参赛作品中微控制器必须为 NXP 公司的微控制器系列产品，控制器的数量不限。对于棋盘格内的 April-Tags 标签识别推荐使用 NXP 公司的 i.MXRT1060 可编程视觉模块。\n2. 传感器的种类和数量没有限制。要求控制电路（包括 MCU、传感器、电\n机驱动等)必须自行设计、制作、调试。\n3. 车模机械结构可以自行设计制作。\n4. 车模平台的静态尺寸（长、宽）小于 50 厘米，平台高度小于 100 厘米。\n\n车模在进入场地后，用于摆放障碍物的机械臂可以伸出车模平台 50 厘米范围之外。经过对赛题的分析，可知图像处理、小车定位与决策部分是设计的难点。因此要求在整个作品设计需要中严格考虑设计方案的可行性与稳定性，设计出能够快速稳定完成设计要求的智能小车系统。\n\n## 系统方案总概述\n综合分析本次竞赛规则和需求，选用 NXP 公司的 OpenMV（ RT 1060） 视觉摄像头作为图像获取和预处理核心模块，选用 i.MX6Q 开发板作为路径规划算法运行的核心处理器，配合 MK60DN512ZVLQ10 单片控制机械系统完成棋子、障碍的识别和搬运。\n系统工作原理如下：首先由视觉摄像头进行 April-Tags 的识别和车身姿态的识别，完成场上自我定位任务以及对目标位置的解算。 然后将棋子和障碍信息发送到 i.MX6Q 开发板进行路径规划，最终由前（决策）摄像头发送控制指令，主、 从单片机（ MK60DN512ZVLQ10） 接收控制信号和速度、角度信息，进行闭环控制，完成棋子和障碍的拾取放置任务。 其系统框架图如图。\n<img src=\"https://img.imgdb.cn/item/60431c78360785be54873c24.jpg\" width=500 height=500 />\n <!-- ![总体方案图](https://img.imgdb.cn/item/60431c78360785be54873c24.jpg) -->\n\n# 机械结构设计\n 依据对竞赛规则的解读，从车模期望性能出发，从车体框架设计，到车轮的选型，电机转速、功率、驱动力的计算，编码器的选型，抓取装置设计，电源选择以及连接与固定，最后进行车模机械机构的优化，每一步设计与选择都经过了从理论推导到实际设计与选型的过程。 整个机械子系统具体由四部分组成分别为：支撑机构、动作机构、移动机构、连接部件。机械子系统总体框架图如下图所示。\n <img src=\"https://img.imgdb.cn/item/60431e48360785be54889c54.jpg\" width=500 height=500 />\n\n\n整个车模采用 1515 铝型材和 2020 铝型材搭建车模底板和支撑架；以 45°全向麦克纳姆轮为轮分布在机体的左前后，右前后四个位置，四个轮胎方向处于同一高度， 以对称 O 型安装； 四个电机对称的 安装在平台的四端， 通过联轴器与麦克纳姆轮连接；棋子搬运装置安装于底板上，位置位于在车子底板最中；车子前和右端分各装有障碍放置装置；主板和各个模块板以及电池紧密放置在底板上；摄像头按照需求放置在铝型材支架的两端。\n <img src=\"https://img.imgdb.cn/item/60431ebe360785be5488e225.jpg\" width=500 height=500 />\n\n# 硬件电路系统设计\n根据对竞赛规则的解读，从期望的车模功能出发，设计出符合要求及满足期望功能的硬件电路系统如图 4.1 所示。 将硬件电路系统集成为七个模块，分别为电源管理模块、 系统主板、 MK60DN512ZVLQ10 核心板、电机驱动模块、电动推杆驱动模块、电磁铁驱动模块、 I.MX6Q 开发板， 如图 4.1 所示。为了方便焊接、布线及拆卸和维修，同时保证电路系统的合理与稳定，提高系统抗干扰能力，将各个模块分开制板。\n <img src=\"https://img.imgdb.cn/item/60431f3c360785be54893507.jpg\" width=500 height=500 />\n\n\n# 系统程序设计及实现\n程序部分由五大部分组成，分别是控制模块、图像识别、传感器数据处理以、通信模块以及路径规划算法。\n控制模块主要用于对电机的控制和棋子拾取和障碍放置，其中电机控制采用 PID 算法对电机转速进行调节，结合麦克纳姆轮速度控制关系，实现对车辆\n的运动状态进行控制，棋子障碍主要通过控制舵机和电磁铁来完成。\n由于本系统有多个设备，其中 4 个摄像头和开发板以及单片机，经综合考虑选择用 UART 结合 DMA 的方式进行多设备间的数据交换。\n传感器数据处理主要是对各传感器的测量数据进行最优估计以及数据融合，其主要采用的是卡尔曼滤波算法。\n图像识别以 i.MX RT1060 为核心的 OpenMV 为硬件平台，采用 Micropython 进行编程，利用其内置的图像处理库进行场地的 April-Tag 识别和车辆定位。\n八皇后的算法设计主要运用贪心算法来寻找最短路径，并结合搬运次数计算搬运时间，进而规划路径；步步为营的算法设计， 在对增强学习算法和 Qlearning 算法尝试之后选择用 BFS 算法寻找最短路径并结合障碍数量来进行决策。 整体结构如图。\n <img src=\"https://img.imgdb.cn/item/60431fcd360785be5489983a.jpg\" width=500 height=500 />\n\n# 比赛视频\n<!-- 相对布局，自适应大小  -->\n<div style=\"position: relative; width: 100%; height: 0; padding-bottom: 75%;\">\n    <iframe src=\"//player.bilibili.com/player.html?aid=247049959&bvid=BV1Sv411h7xw&cid=306696680&page=1\"  scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" style=\"position: absolute; width: 100%; height: 100%; left: 0; top: 0;\"></iframe>\n</div>\n","slug":"智能车竞赛获得全国一等奖","published":1,"updated":"2022-06-28T05:30:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4z9v5oj000b0s7eevofbbga","content":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><h2 id=\"智能车竞赛\"><a href=\"#智能车竞赛\" class=\"headerlink\" title=\"智能车竞赛\"></a>智能车竞赛</h2><blockquote>\n<p>全国大学生“飞思卡尔杯”智能汽车竞赛是由教育部高等学校自动化专业教学指导委员会主办全国大学生智能汽车竞赛。该竞赛以“立足培养，重在参与，鼓励探索，追求卓越”为指导思想，旨在促进高等学校素质教育，培养大学生的综合知识运用能力、基本工程实践能力和创新意识。</p>\n</blockquote>\n<h2 id=\"室内对弈组\"><a href=\"#室内对弈组\" class=\"headerlink\" title=\"室内对弈组\"></a>室内对弈组</h2><p>室内对弈组要求参赛队伍设计一辆车模能够通过车载摄像头以及其他传感器完成赛场内线条、标签的检测与辨认、几何物体的识别与搬运。通过机械、电子和控制算法完成预赛和决赛两个阶段的目标排序任务和对抗挑战任务。</p>\n<span id=\"more\"></span>\n\n<img src=\"https://img.imgdb.cn/item/60431c61360785be54872edf\" width=300 height=300 />\n\n\n<h1 id=\"总体方案介绍\"><a href=\"#总体方案介绍\" class=\"headerlink\" title=\"总体方案介绍\"></a>总体方案介绍</h1><h2 id=\"作品设计要求\"><a href=\"#作品设计要求\" class=\"headerlink\" title=\"作品设计要求\"></a>作品设计要求</h2><p>创意组比赛要求设计一辆车模能够通过车载摄像头完成赛场内线条、二维标签的检测与辨认、几何物识别与搬运。通过机械、电子与控制算法完成预赛阶段的目标排序任务和决赛阶段的步步为营对抗挑战任务。 其具体要求如下：</p>\n<ol>\n<li>参赛作品中微控制器必须为 NXP 公司的微控制器系列产品，控制器的数量不限。对于棋盘格内的 April-Tags 标签识别推荐使用 NXP 公司的 i.MXRT1060 可编程视觉模块。</li>\n<li>传感器的种类和数量没有限制。要求控制电路（包括 MCU、传感器、电<br>机驱动等)必须自行设计、制作、调试。</li>\n<li>车模机械结构可以自行设计制作。</li>\n<li>车模平台的静态尺寸（长、宽）小于 50 厘米，平台高度小于 100 厘米。</li>\n</ol>\n<p>车模在进入场地后，用于摆放障碍物的机械臂可以伸出车模平台 50 厘米范围之外。经过对赛题的分析，可知图像处理、小车定位与决策部分是设计的难点。因此要求在整个作品设计需要中严格考虑设计方案的可行性与稳定性，设计出能够快速稳定完成设计要求的智能小车系统。</p>\n<h2 id=\"系统方案总概述\"><a href=\"#系统方案总概述\" class=\"headerlink\" title=\"系统方案总概述\"></a>系统方案总概述</h2><p>综合分析本次竞赛规则和需求，选用 NXP 公司的 OpenMV（ RT 1060） 视觉摄像头作为图像获取和预处理核心模块，选用 i.MX6Q 开发板作为路径规划算法运行的核心处理器，配合 MK60DN512ZVLQ10 单片控制机械系统完成棋子、障碍的识别和搬运。<br>系统工作原理如下：首先由视觉摄像头进行 April-Tags 的识别和车身姿态的识别，完成场上自我定位任务以及对目标位置的解算。 然后将棋子和障碍信息发送到 i.MX6Q 开发板进行路径规划，最终由前（决策）摄像头发送控制指令，主、 从单片机（ MK60DN512ZVLQ10） 接收控制信号和速度、角度信息，进行闭环控制，完成棋子和障碍的拾取放置任务。 其系统框架图如图。<br><img src=\"https://img.imgdb.cn/item/60431c78360785be54873c24.jpg\" width=500 height=500 /><br> <!-- ![总体方案图](https://img.imgdb.cn/item/60431c78360785be54873c24.jpg) --></p>\n<h1 id=\"机械结构设计\"><a href=\"#机械结构设计\" class=\"headerlink\" title=\"机械结构设计\"></a>机械结构设计</h1><p> 依据对竞赛规则的解读，从车模期望性能出发，从车体框架设计，到车轮的选型，电机转速、功率、驱动力的计算，编码器的选型，抓取装置设计，电源选择以及连接与固定，最后进行车模机械机构的优化，每一步设计与选择都经过了从理论推导到实际设计与选型的过程。 整个机械子系统具体由四部分组成分别为：支撑机构、动作机构、移动机构、连接部件。机械子系统总体框架图如下图所示。<br> <img src=\"https://img.imgdb.cn/item/60431e48360785be54889c54.jpg\" width=500 height=500 /></p>\n<p>整个车模采用 1515 铝型材和 2020 铝型材搭建车模底板和支撑架；以 45°全向麦克纳姆轮为轮分布在机体的左前后，右前后四个位置，四个轮胎方向处于同一高度， 以对称 O 型安装； 四个电机对称的 安装在平台的四端， 通过联轴器与麦克纳姆轮连接；棋子搬运装置安装于底板上，位置位于在车子底板最中；车子前和右端分各装有障碍放置装置；主板和各个模块板以及电池紧密放置在底板上；摄像头按照需求放置在铝型材支架的两端。<br> <img src=\"https://img.imgdb.cn/item/60431ebe360785be5488e225.jpg\" width=500 height=500 /></p>\n<h1 id=\"硬件电路系统设计\"><a href=\"#硬件电路系统设计\" class=\"headerlink\" title=\"硬件电路系统设计\"></a>硬件电路系统设计</h1><p>根据对竞赛规则的解读，从期望的车模功能出发，设计出符合要求及满足期望功能的硬件电路系统如图 4.1 所示。 将硬件电路系统集成为七个模块，分别为电源管理模块、 系统主板、 MK60DN512ZVLQ10 核心板、电机驱动模块、电动推杆驱动模块、电磁铁驱动模块、 I.MX6Q 开发板， 如图 4.1 所示。为了方便焊接、布线及拆卸和维修，同时保证电路系统的合理与稳定，提高系统抗干扰能力，将各个模块分开制板。<br> <img src=\"https://img.imgdb.cn/item/60431f3c360785be54893507.jpg\" width=500 height=500 /></p>\n<h1 id=\"系统程序设计及实现\"><a href=\"#系统程序设计及实现\" class=\"headerlink\" title=\"系统程序设计及实现\"></a>系统程序设计及实现</h1><p>程序部分由五大部分组成，分别是控制模块、图像识别、传感器数据处理以、通信模块以及路径规划算法。<br>控制模块主要用于对电机的控制和棋子拾取和障碍放置，其中电机控制采用 PID 算法对电机转速进行调节，结合麦克纳姆轮速度控制关系，实现对车辆<br>的运动状态进行控制，棋子障碍主要通过控制舵机和电磁铁来完成。<br>由于本系统有多个设备，其中 4 个摄像头和开发板以及单片机，经综合考虑选择用 UART 结合 DMA 的方式进行多设备间的数据交换。<br>传感器数据处理主要是对各传感器的测量数据进行最优估计以及数据融合，其主要采用的是卡尔曼滤波算法。<br>图像识别以 i.MX RT1060 为核心的 OpenMV 为硬件平台，采用 Micropython 进行编程，利用其内置的图像处理库进行场地的 April-Tag 识别和车辆定位。<br>八皇后的算法设计主要运用贪心算法来寻找最短路径，并结合搬运次数计算搬运时间，进而规划路径；步步为营的算法设计， 在对增强学习算法和 Qlearning 算法尝试之后选择用 BFS 算法寻找最短路径并结合障碍数量来进行决策。 整体结构如图。<br> <img src=\"https://img.imgdb.cn/item/60431fcd360785be5489983a.jpg\" width=500 height=500 /></p>\n<h1 id=\"比赛视频\"><a href=\"#比赛视频\" class=\"headerlink\" title=\"比赛视频\"></a>比赛视频</h1><!-- 相对布局，自适应大小  -->\n<div style=\"position: relative; width: 100%; height: 0; padding-bottom: 75%;\">\n    <iframe src=\"//player.bilibili.com/player.html?aid=247049959&bvid=BV1Sv411h7xw&cid=306696680&page=1\"  scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" style=\"position: absolute; width: 100%; height: 100%; left: 0; top: 0;\"></iframe>\n</div>\n","site":{"data":{}},"excerpt":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><h2 id=\"智能车竞赛\"><a href=\"#智能车竞赛\" class=\"headerlink\" title=\"智能车竞赛\"></a>智能车竞赛</h2><blockquote>\n<p>全国大学生“飞思卡尔杯”智能汽车竞赛是由教育部高等学校自动化专业教学指导委员会主办全国大学生智能汽车竞赛。该竞赛以“立足培养，重在参与，鼓励探索，追求卓越”为指导思想，旨在促进高等学校素质教育，培养大学生的综合知识运用能力、基本工程实践能力和创新意识。</p>\n</blockquote>\n<h2 id=\"室内对弈组\"><a href=\"#室内对弈组\" class=\"headerlink\" title=\"室内对弈组\"></a>室内对弈组</h2><p>室内对弈组要求参赛队伍设计一辆车模能够通过车载摄像头以及其他传感器完成赛场内线条、标签的检测与辨认、几何物体的识别与搬运。通过机械、电子和控制算法完成预赛和决赛两个阶段的目标排序任务和对抗挑战任务。</p>","more":"<img src=\"https://img.imgdb.cn/item/60431c61360785be54872edf\" width=300 height=300 />\n\n\n<h1 id=\"总体方案介绍\"><a href=\"#总体方案介绍\" class=\"headerlink\" title=\"总体方案介绍\"></a>总体方案介绍</h1><h2 id=\"作品设计要求\"><a href=\"#作品设计要求\" class=\"headerlink\" title=\"作品设计要求\"></a>作品设计要求</h2><p>创意组比赛要求设计一辆车模能够通过车载摄像头完成赛场内线条、二维标签的检测与辨认、几何物识别与搬运。通过机械、电子与控制算法完成预赛阶段的目标排序任务和决赛阶段的步步为营对抗挑战任务。 其具体要求如下：</p>\n<ol>\n<li>参赛作品中微控制器必须为 NXP 公司的微控制器系列产品，控制器的数量不限。对于棋盘格内的 April-Tags 标签识别推荐使用 NXP 公司的 i.MXRT1060 可编程视觉模块。</li>\n<li>传感器的种类和数量没有限制。要求控制电路（包括 MCU、传感器、电<br>机驱动等)必须自行设计、制作、调试。</li>\n<li>车模机械结构可以自行设计制作。</li>\n<li>车模平台的静态尺寸（长、宽）小于 50 厘米，平台高度小于 100 厘米。</li>\n</ol>\n<p>车模在进入场地后，用于摆放障碍物的机械臂可以伸出车模平台 50 厘米范围之外。经过对赛题的分析，可知图像处理、小车定位与决策部分是设计的难点。因此要求在整个作品设计需要中严格考虑设计方案的可行性与稳定性，设计出能够快速稳定完成设计要求的智能小车系统。</p>\n<h2 id=\"系统方案总概述\"><a href=\"#系统方案总概述\" class=\"headerlink\" title=\"系统方案总概述\"></a>系统方案总概述</h2><p>综合分析本次竞赛规则和需求，选用 NXP 公司的 OpenMV（ RT 1060） 视觉摄像头作为图像获取和预处理核心模块，选用 i.MX6Q 开发板作为路径规划算法运行的核心处理器，配合 MK60DN512ZVLQ10 单片控制机械系统完成棋子、障碍的识别和搬运。<br>系统工作原理如下：首先由视觉摄像头进行 April-Tags 的识别和车身姿态的识别，完成场上自我定位任务以及对目标位置的解算。 然后将棋子和障碍信息发送到 i.MX6Q 开发板进行路径规划，最终由前（决策）摄像头发送控制指令，主、 从单片机（ MK60DN512ZVLQ10） 接收控制信号和速度、角度信息，进行闭环控制，完成棋子和障碍的拾取放置任务。 其系统框架图如图。<br><img src=\"https://img.imgdb.cn/item/60431c78360785be54873c24.jpg\" width=500 height=500 /><br> <!-- ![总体方案图](https://img.imgdb.cn/item/60431c78360785be54873c24.jpg) --></p>\n<h1 id=\"机械结构设计\"><a href=\"#机械结构设计\" class=\"headerlink\" title=\"机械结构设计\"></a>机械结构设计</h1><p> 依据对竞赛规则的解读，从车模期望性能出发，从车体框架设计，到车轮的选型，电机转速、功率、驱动力的计算，编码器的选型，抓取装置设计，电源选择以及连接与固定，最后进行车模机械机构的优化，每一步设计与选择都经过了从理论推导到实际设计与选型的过程。 整个机械子系统具体由四部分组成分别为：支撑机构、动作机构、移动机构、连接部件。机械子系统总体框架图如下图所示。<br> <img src=\"https://img.imgdb.cn/item/60431e48360785be54889c54.jpg\" width=500 height=500 /></p>\n<p>整个车模采用 1515 铝型材和 2020 铝型材搭建车模底板和支撑架；以 45°全向麦克纳姆轮为轮分布在机体的左前后，右前后四个位置，四个轮胎方向处于同一高度， 以对称 O 型安装； 四个电机对称的 安装在平台的四端， 通过联轴器与麦克纳姆轮连接；棋子搬运装置安装于底板上，位置位于在车子底板最中；车子前和右端分各装有障碍放置装置；主板和各个模块板以及电池紧密放置在底板上；摄像头按照需求放置在铝型材支架的两端。<br> <img src=\"https://img.imgdb.cn/item/60431ebe360785be5488e225.jpg\" width=500 height=500 /></p>\n<h1 id=\"硬件电路系统设计\"><a href=\"#硬件电路系统设计\" class=\"headerlink\" title=\"硬件电路系统设计\"></a>硬件电路系统设计</h1><p>根据对竞赛规则的解读，从期望的车模功能出发，设计出符合要求及满足期望功能的硬件电路系统如图 4.1 所示。 将硬件电路系统集成为七个模块，分别为电源管理模块、 系统主板、 MK60DN512ZVLQ10 核心板、电机驱动模块、电动推杆驱动模块、电磁铁驱动模块、 I.MX6Q 开发板， 如图 4.1 所示。为了方便焊接、布线及拆卸和维修，同时保证电路系统的合理与稳定，提高系统抗干扰能力，将各个模块分开制板。<br> <img src=\"https://img.imgdb.cn/item/60431f3c360785be54893507.jpg\" width=500 height=500 /></p>\n<h1 id=\"系统程序设计及实现\"><a href=\"#系统程序设计及实现\" class=\"headerlink\" title=\"系统程序设计及实现\"></a>系统程序设计及实现</h1><p>程序部分由五大部分组成，分别是控制模块、图像识别、传感器数据处理以、通信模块以及路径规划算法。<br>控制模块主要用于对电机的控制和棋子拾取和障碍放置，其中电机控制采用 PID 算法对电机转速进行调节，结合麦克纳姆轮速度控制关系，实现对车辆<br>的运动状态进行控制，棋子障碍主要通过控制舵机和电磁铁来完成。<br>由于本系统有多个设备，其中 4 个摄像头和开发板以及单片机，经综合考虑选择用 UART 结合 DMA 的方式进行多设备间的数据交换。<br>传感器数据处理主要是对各传感器的测量数据进行最优估计以及数据融合，其主要采用的是卡尔曼滤波算法。<br>图像识别以 i.MX RT1060 为核心的 OpenMV 为硬件平台，采用 Micropython 进行编程，利用其内置的图像处理库进行场地的 April-Tag 识别和车辆定位。<br>八皇后的算法设计主要运用贪心算法来寻找最短路径，并结合搬运次数计算搬运时间，进而规划路径；步步为营的算法设计， 在对增强学习算法和 Qlearning 算法尝试之后选择用 BFS 算法寻找最短路径并结合障碍数量来进行决策。 整体结构如图。<br> <img src=\"https://img.imgdb.cn/item/60431fcd360785be5489983a.jpg\" width=500 height=500 /></p>\n<h1 id=\"比赛视频\"><a href=\"#比赛视频\" class=\"headerlink\" title=\"比赛视频\"></a>比赛视频</h1><!-- 相对布局，自适应大小  -->\n<div style=\"position: relative; width: 100%; height: 0; padding-bottom: 75%;\">\n    <iframe src=\"//player.bilibili.com/player.html?aid=247049959&bvid=BV1Sv411h7xw&cid=306696680&page=1\"  scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" style=\"position: absolute; width: 100%; height: 100%; left: 0; top: 0;\"></iframe>\n</div>"}],"PostAsset":[],"PostCategory":[{"post_id":"cl4z9v5o800010s7ehndq0a2x","category_id":"cl4z9v5oe00040s7ece4c53ts","_id":"cl4z9v5ol000f0s7edu7i8bur"},{"post_id":"cl4z9v5oc00030s7e7w3m0wpn","category_id":"cl4z9v5ok000c0s7efvrxeupz","_id":"cl4z9v5on000k0s7e630r9jqg"},{"post_id":"cl4z9v5oi00090s7ea0433om4","category_id":"cl4z9v5ok000c0s7efvrxeupz","_id":"cl4z9v5oo000n0s7e1obxckc9"},{"post_id":"cl4z9v5oj000b0s7eevofbbga","category_id":"cl4z9v5on000j0s7e5kyq31y3","_id":"cl4z9v5oo000p0s7eeuachakq"}],"PostTag":[{"post_id":"cl4z9v5o800010s7ehndq0a2x","tag_id":"cl4z9v5of00050s7e8bo63el5","_id":"cl4z9v5ol000e0s7edjnod7lh"},{"post_id":"cl4z9v5oc00030s7e7w3m0wpn","tag_id":"cl4z9v5ok000d0s7e0dzmddb2","_id":"cl4z9v5on000i0s7e8ia49tsi"},{"post_id":"cl4z9v5oi00090s7ea0433om4","tag_id":"cl4z9v5ok000d0s7e0dzmddb2","_id":"cl4z9v5on000m0s7e7qjghlte"},{"post_id":"cl4z9v5oj000b0s7eevofbbga","tag_id":"cl4z9v5on000l0s7eetbo4md7","_id":"cl4z9v5oo000o0s7e34w79bxy"}],"Tag":[{"name":"测试","_id":"cl4z9v5of00050s7e8bo63el5"},{"name":"技术","_id":"cl4z9v5ok000d0s7e0dzmddb2"},{"name":"比赛","_id":"cl4z9v5on000l0s7eetbo4md7"}]}}